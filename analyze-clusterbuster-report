#!/usr/bin/env python3
# Copyright 2022 Robert Krawitz/Red Hat
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import sys
import argparse
import json
import re
import os
from lib.clusterbuster.analysis.ClusterBusterAnalysis import ClusterBusterAnalysis
from lib.clusterbuster.loader.ClusterBusterLoader import ClusterBusterLoader

parser = argparse.ArgumentParser(description='Analyze ClusterBuster report')
analysis_formats = ClusterBusterAnalysis.list_analysis_formats()

parser.add_argument("-o", "--outfile", default=None, type=str, metavar='file', help='Output filename')
parser.add_argument('--list_formats', action='store_true', help='List available report formats')
parser.add_argument('--kata', action='store_true', help='Compare Kata with non-Kata results')
parser.add_argument("-r", "--report-type", default=None, type=str, metavar='format',
                    choices=analysis_formats, help=f'Analysis format: one of {", ".join(analysis_formats)}')
parser.add_argument("files", metavar='file', type=str, nargs='*', help='Files to process')
args = parser.parse_args()
if args.list_formats:
    print('\n'.join(sorted(analysis_formats)))
    sys.exit(1)


def analyze_clusterbuster_1(f, data):
    report = ClusterBusterAnalysis(data, report_type=args.report_type).Analyze()
    if isinstance(report, str):
        print(report, file=f)
    else:
        json.dump(report, fp=f, indent=2)


known_subdirs = {}


def matches_patterns(f: str, patterns: list):
    if patterns:
        for pattern in patterns:
            if not re.search(pattern, f):
                return False
    return True


def create_report_spec(arg: str):
    answer = {}
    dirname = None
    job_patterns = []
    run_name = None
    for component in arg.split(':'):
        pair = component.split('=', 1)
        if len(pair) == 1:
            dirname = pair[0]
        else:
            key, value = pair
            key = key.lower()
            if key.startswith('dir'):
                dirname = value
            elif key == 'job_pattern':
                job_patterns.append(value)
            elif key == 'name':
                run_name = value
            else:
                raise ValueError(f"Unexpected key {key} in name {arg}")
    if dirname is None:
        raise ValueError(f"No directory name found in {arg}")
    if run_name is None:
        run_name = dirname.rstrip('/').split('/')[-1]
    if job_patterns:
        for pattern in job_patterns:
            run_name += f'-{pattern.lstrip(" -_").rstrip(" -_")}'
    if os.path.isdir(dirname):
        dirs = [os.path.realpath(os.path.join(dirname, d)) for d in os.listdir(dirname) if (matches_patterns(d, job_patterns) and
                                                                                            os.path.isdir(os.path.join(dirname, d)) and
                                                                                            os.path.isfile(os.path.join(dirname, d, "clusterbuster-report.json")))]
        if not dirs:
            print(f"No matching subdirectories found under {dirname} ({arg})", sys.stderr)
            return None
        for d in dirs:
            known_subdirs[d] = arg
        answer['dirs'] = dirs
        answer['run_name'] = run_name
    else:
        raise ValueError(f"{dirname}: Not a directory")
    return answer


def analyze_clusterbuster(f):
    reports = {}
    dir_args = []
    if args.kata:
        for arg in args.files:
            dir_args.append(f'{arg}:job_pattern=-runc-')
            dir_args.append(f'{arg}:job_pattern=-kata-')
    else:
        dir_args = args.files
    for arg in dir_args:
        spec = create_report_spec(arg)
        if spec is not None:
            if spec['run_name'] in reports:
                raise ValueError(f'Duplicate report name {spec["run_name"]}')
            reports[spec['run_name']] = spec
    if not reports:
        raise ValueError("No reports found")
    for report in reports.values():
        analyze_clusterbuster_1(f, ClusterBusterLoader(report['dirs']).Load())


try:
    if args.outfile and args.outfile != '-':
        with open(args.outfile, 'w') as f:
            analyze_clusterbuster(f)
    else:
        analyze_clusterbuster(sys.stdout)
except KeyboardInterrupt:
    sys.exit(1)
except BrokenPipeError:
    sys.exit(1)
