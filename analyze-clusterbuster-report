#!/usr/bin/env python3
# Copyright 2022 Robert Krawitz/Red Hat
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import sys
import argparse
import json
from lib.clusterbuster.analysis.ClusterBusterAnalysis import ClusterBusterAnalysis
from lib.clusterbuster.loader.ClusterBusterLoader import ClusterBusterLoader

parser = argparse.ArgumentParser(description='Analyze ClusterBuster report')
analysis_formats = ClusterBusterAnalysis.list_analysis_formats()

parser.add_argument("-o", "--outfile", default=None, type=str, metavar='file', help='Output filename')
parser.add_argument('--list_formats', action='store_true', help='List available report formats')
parser.add_argument("-r", "--report-type", default=None, type=str, metavar='format',
                    choices=analysis_formats, help=f'Analysis format: one of {", ".join(analysis_formats)}')
parser.add_argument("files", metavar='file', type=str, nargs='*', help='Files to process')
args = parser.parse_args()
if args.list_formats:
    print('\n'.join(sorted(analysis_formats)))
    sys.exit(1)


def do_analyze_clusterbuster(f, data):
    report = ClusterBusterAnalysis(data, report_type=args.report_type).Analyze()
    if isinstance(report, str):
        print(report, file=f)
    else:
        json.dump(report, fp=f, indent=2)


try:
    data = ClusterBusterLoader(args.files).Load()
    if args.outfile and args.outfile != '-':
        with open(args.outfile, 'w') as f:
            do_analyze_clusterbuster(f, data)
    else:
        do_analyze_clusterbuster(sys.stdout, data)
except KeyboardInterrupt:
    sys.exit(1)
except BrokenPipeError:
    sys.exit(1)
