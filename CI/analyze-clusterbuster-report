#!/usr/bin/env perl
# Copyright 2022 Robert Krawitz/Red Hat
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

use strict;
use Cwd ('realpath');
use JSON;

my (%scaling_data);
my (%uperf_data);
my (%fio_data);
my (%files_data);

sub read_summary($$) {
    my ($fh, $hash) = @_;
    $/ = undef;
    my ($data) = <$fh>;
    my ($json) = from_json($data);
    foreach my $report (@$json) {
	my ($metadata) = $$report{'metadata'} || next;
	my ($summary) = $$report{'summary'} || next;
	my ($metrics) = $$summary{'metrics'} || next;
	if ($$report{'metadata'}{'kind'} ne 'clusterbusterResults') {
	    warn("Invalid data!\n");
	    next;
	}
	my ($runtime_env) = ($$metadata{'runtime_class'} eq 'kata') ? 'kata' : 'nonkata';
	my ($client_pin_node) = $$metadata{'options'}{'pin_nodes'}{'client'};
	my ($count) = $$summary{'total_instances'};
	my ($workload) = $$metadata{'workload'};
	if ($workload eq 'cpusoaker') {
	    $$hash{'scaling'}{$count}{$runtime_env}{'start_rate'} = $$summary{'pod_start_rate'};
	    $$hash{'scaling'}{$count}{$runtime_env}{'first_pod_start'} = $$summary{'first_pod_start_time'};
	    $$hash{'scaling'}{$count}{$runtime_env}{'last_pod_start'} = $$summary{'last_pod_start_time'};
	    $$hash{'scaling'}{$count}{$runtime_env}{'iterations_cpu_sec'} = $$summary{'work_iterations_cpu_sec'};
	    $$hash{'scaling'}{$count}{$runtime_env}{'iterations_sec'} = $$summary{'work_iterations_sec'};
	    $$hash{'scaling'}{$count}{$runtime_env}{'memory'} = $$metrics{'Maximum memory working set'}{"node: $client_pin_node"};
	} elsif ($workload eq 'uperf') {
	    # For now only look at the first job
	    my (@jobs) = sort keys %{$$metadata{'workload_metadata'}{'jobs'}};
	    my ($job) = $jobs[0];
	    my ($msgsize) = $$metadata{'workload_metadata'}{'jobs'}{$job}{'msgsize'};
	    my ($threads) = $$metadata{'workload_metadata'}{'jobs'}{$job}{'nthr'};
	    my ($op) = $$metadata{'workload_metadata'}{'jobs'}{$job}{'test_type'};
	    if ($op eq 'stream') {
		$$hash{'uperf'}{$count}{$msgsize}{$threads}{$runtime_env}{'rate'} =
		    $$summary{'results'}{$job}{'summary'}{'data_rate'};
	    } elsif ($op eq 'rr') {
		$$hash{'uperf'}{$count}{$msgsize}{$threads}{$runtime_env}{'ops_sec'} =
		    $$summary{'results'}{$job}{'summary'}{'ops_rate'};
		$$hash{'uperf'}{$count}{$msgsize}{$threads}{$runtime_env}{'avg_time_op'} =
		    $$summary{'results'}{$job}{'summary'}{'total'}{'avg_time_avg'};
		$$hash{'uperf'}{$count}{$msgsize}{$threads}{$runtime_env}{'max_time_op'} =
		    $$summary{'results'}{$job}{'summary'}{'total'}{'max_time_max'};
	    }
	    $$hash{'uperf'}{$count}{$msgsize}{$threads}{$runtime_env}{"cpu_util_$op"} =
		$$metrics{'CPU utilization'}{'Total'}{"instance: $client_pin_node"};

	} elsif ($$metadata{'workload'} eq 'fio') {
	    my (@jobs) = sort keys %{$$metadata{'workload_metadata'}{'jobs'}};
	    foreach my $job (@jobs) {
		my ($mdata) = $$metadata{'workload_metadata'}{'jobs'}{$job};
		my ($workload) = $$mdata{'pattern'};
		my ($blocksize) = $$mdata{'blocksize'};
		my ($iodepth) = $$mdata{'iodepth'};
		my ($fdatasync) = $$mdata{'fdatasync'};
		my ($direct) = $$mdata{'direct'};
		my ($engine) = $$mdata{'ioengine'};
		my ($result) = $$summary{'results'}{$job}{'job_results'};
		foreach my $op (keys %$result) {
		    my ($iops) = $$result{$op}{'io_rate'};
		    $$hash{'fio'}{$count}{$engine}{$iodepth}{$fdatasync}{$direct}{$workload}{$blocksize}{$runtime_env}{$op}{'iops'} = $iops;
		    $$hash{'fio'}{$count}{$engine}{$iodepth}{$fdatasync}{$direct}{$workload}{$blocksize}{$runtime_env}{'total'}{'iops'} += $iops;
		    my ($throughput) = $$result{$op}{'data_rate'};
		    $$hash{'fio'}{$count}{$engine}{$iodepth}{$fdatasync}{$direct}{$workload}{$blocksize}{$runtime_env}{$op}{'throughput'} = $throughput;
		    $$hash{'fio'}{$count}{$engine}{$iodepth}{$fdatasync}{$direct}{$workload}{$blocksize}{$runtime_env}{'total'}{'throughput'} += $throughput;
		}
	    }
	} elsif ($$metadata{'workload'} eq 'files') {
	    my ($mdata) = defined $$metadata{'workload_metadata'}{'dirs_per_volume'} ? $$metadata{'workload_metadata'} : $$metadata{'options'}{'workloadOptions'};
	    my ($dirs) = $$mdata{'dirs_per_volume'};
	    my ($files) = $$mdata{'files_per_dir'};
	    my ($blocksize) = $$mdata{'file_block_size'};
	    my ($blocks) = $$mdata{'file_size'};
	    my ($direct) = $$mdata{'files_direct'};
	    foreach my $op ('create', 'read', 'remove') {
		$$hash{'files'}{$count}{$dirs}{$files}{$blocksize}{$blocks}{$direct}{$runtime_env}{$op}{'elapsed_time'} = $$summary{$op}{'operation_elapsed_time'};
		$$hash{'files'}{$count}{$dirs}{$files}{$blocksize}{$blocks}{$direct}{$runtime_env}{$op}{'cpu_time'} = $$summary{$op}{'cpu_time'};
	    }
	    $$hash{'files'}{$count}{$dirs}{$files}{$blocksize}{$blocks}{$direct}{$runtime_env}{'read'}{'io_throughput'} = $$summary{'read'}{'data_rate'};
	} else {
	    warn("Unknown workload $workload ($_)\n");
	}
    }
}

sub print_value_bin($$) {
    my ($value, $suffix) = @_;
    if (! defined $value || $value eq '') {
 	return '';
    } elsif ($value < 1024) {
	return sprintf("%d $suffix", $value);
    } elsif ($value < 1024 * 1024) {
	return sprintf("%d Ki$suffix", $value / 1024);
    } elsif ($value < 1024 * 1024 * 1024) {
	return sprintf("%d Mi$suffix", $value / 1024 / 1024);
    } elsif ($value < 1024 * 1024 * 1024 * 1024) {
	return sprintf("%d Gi$suffix", $value / 1024 / 1024 / 1024);
    } else {
	return sprintf("%d Ti$suffix", $value / 1024 / 1024 / 1024 / 1024);
    }
}

sub print_value($;$) {
    my ($value, $prec) = @_;
    if (! defined $prec) {
	$prec = 6;
    }
    if (! defined $value || $value eq '') {
	return '';
    } else {
	return sprintf("%.${prec}f", ref $value eq 'HASH' ? exp($$value{'logvalue'} / $$value{'count'}) : $value)
    }
}

sub safe_div($$;$) {
    my ($num, $denom, $prec) = @_;
    if (! defined $prec) {
	$prec = 6;
    }
    if (! defined $num || ! defined $denom) {
	return '';
    } else {
	$num = print_value($num, 20);
	$denom = print_value($denom, 20);
	if ($denom == 0 || $denom eq '' || $num eq '') {
	    return '';
	} else {
	    return sprintf("%.${prec}f", $num / $denom);
	}
    }
}

sub safe_sub($$;$) {
    my ($v1, $v2, $prec) = @_;
    if (! defined $v1 || ! defined $v2 || $v2 == 0) {
	return '';
    } else {
	$v1 = print_value($v1, $prec);
	$v2 = print_value($v2, $prec);
	return $v1 - $v2;
    }
}

sub process_scaling(\%) {
    my ($all_data) = @_;
    my ($scaling_data) = $$all_data{'scaling'};
    my (@scaling_keys) = sort {$a <=> $b} keys %$scaling_data;
    return if (!@scaling_keys);
    print "\n";
    print "Scaling: memory\n";
    printf("%s\t%s\t%s\t%s\t%s\n", 'Pods', 'Non-Kata mem', 'Kata mem', 'ratio', 'Kata ovhd');
    foreach my $key (@scaling_keys) {
	next if (! defined $$scaling_data{$key}{'nonkata'} && ! defined $$scaling_data{'kata'});
	my ($nonkatamem) = $$scaling_data{$key}{'nonkata'}{'memory'};
	my ($katamem) = $$scaling_data{$key}{'kata'}{'memory'};
	printf("%d\t%s\t%s\t%s\t%s\n",
	       $key,
	       safe_div($nonkatamem, $key, 0),
	       safe_div($katamem, $key, 0),
	       safe_div($katamem, $nonkatamem, 3),
	       safe_div(safe_sub($katamem, $nonkatamem), $key, 0));
    }

    print "\nScaling: pod starts\n";
    printf("%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n", 'Pods', 'Non-Kata', 'Kata', 'ratio', 'Non-Kata 1st', 'Non-Kata last', 'Kata 1st', 'Kata last');
    foreach my $key (@scaling_keys) {
	next if (! defined $$scaling_data{$key}{'nonkata'} && ! defined $$scaling_data{'kata'});
	printf("%d\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n",
	       $key,
	       safe_div($key, $$scaling_data{$key}{'nonkata'}{'last_pod_start'}, 3),
	       safe_div($key, $$scaling_data{$key}{'kata'}{'last_pod_start'}, 3),
	       safe_div($$scaling_data{$key}{'kata'}{'last_pod_start'}, $$scaling_data{$key}{'nonkata'}{'last_pod_start'}, 3),
	       print_value($$scaling_data{$key}{'nonkata'}{'first_pod_start'}, 3),
	       print_value($$scaling_data{$key}{'nonkata'}{'last_pod_start'}, 3),
	       print_value($$scaling_data{$key}{'kata'}{'first_pod_start'}, 3),
	       print_value($$scaling_data{$key}{'kata'}{'last_pod_start'}, 3));
    }

    print "\nScaling: CPU load (work iterations)\n";
    printf("%s\t%s\t%s\t%s\t%s\t%s\t%s\n", 'Pods', 'Non-Kata CPU', 'Kata CPU', 'Ratio', 'Non-Kata clock', 'Kata clock', 'Ratio');
    foreach my $key (@scaling_keys) {
	next if (! defined $$scaling_data{$key}{'nonkata'} && ! defined $$scaling_data{'kata'});
	printf("%d\t%s\t%s\t%s\t%s\t%s\t%s\n",
	       $key,
	       print_value($$scaling_data{$key}{'nonkata'}{'iterations_cpu_sec'}, 0),
	       print_value($$scaling_data{$key}{'kata'}{'iterations_cpu_sec'}, 0),
	       safe_div($$scaling_data{$key}{'kata'}{'iterations_cpu_sec'}, $$scaling_data{$key}{'nonkata'}{'iterations_cpu_sec'}, 3),
	       print_value($$scaling_data{$key}{'nonkata'}{'iterations_sec'}, 0),
	       print_value($$scaling_data{$key}{'kata'}{'iterations_sec'}, 0),
	       safe_div($$scaling_data{$key}{'kata'}{'iterations_sec'}, $$scaling_data{$key}{'nonkata'}{'iterations_sec'}), 3);
    }
}

sub process_uperf(\%) {
    my ($all_data) = @_;
    my ($uperf_data) = $$all_data{'uperf'};
    my (@uperf_pods) = keys %$uperf_data;
    my (%summary_data) = ();
    return if (! @uperf_pods);
    print "\n";
    foreach my $pod_count (sort { $a <=> $b } @uperf_pods) {
	printf("\nNetworking: %d pod%s\n", $pod_count, ($pod_count == 1 ? '' : 's'));
	printf("%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n",
	       'msgsize', 'nthr',
	       'runc thruput', 'runc latency', 'runc thru cpu', 'runc lat cpu',
	       'kata thruput', 'kata latency', 'kata thru cpu', 'kata lat cpu',
	       'rel thruput', 'rel latency');
	foreach my $msg_size (sort { $a <=> $b } keys %{$$uperf_data{$pod_count}}) {
	    foreach my $nthr (sort { $a <=> $b } keys %{$$uperf_data{$pod_count}{$msg_size}}) {
		my ($stuff) = $$uperf_data{$pod_count}{$msg_size}{$nthr};
		foreach my $runtime ('nonkata', 'kata') {
		    foreach my $field ('rate', 'avg_time_op', 'cpu_util_stream', 'cpu_util_rr') {
			$summary_data{$runtime}{$field}{'logvalue'} += log($$stuff{$runtime}{$field});
			$summary_data{$runtime}{$field}{'count'}++;
		    }
		}
		printf("%d\t%d\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n",
		       $msg_size, $nthr,
		       print_value($$stuff{'nonkata'}{'rate'}, 0),
		       print_value($$stuff{'nonkata'}{'avg_time_op'}, 6),
		       print_value($$stuff{'nonkata'}{'cpu_util_stream'}, 3),
		       print_value($$stuff{'nonkata'}{'cpu_util_rr'}, 3),
		       print_value($$stuff{'kata'}{'rate'}, 0),
		       print_value($$stuff{'kata'}{'avg_time_op'}, 6),
		       print_value($$stuff{'kata'}{'cpu_util_stream'}, 3),
		       print_value($$stuff{'kata'}{'cpu_util_rr'}, 3),
		       safe_div($$stuff{'kata'}{'rate'}, $$stuff{'nonkata'}{'rate'}, 3),
		       safe_div($$stuff{'kata'}{'avg_time_op'}, $$stuff{'nonkata'}{'avg_time_op'}, 3));
	    }
	}
    }
    print "\nNetworking: Geomean\n";
    printf("\t\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n",
	   'runc thruput', 'runc latency', 'runc thru cpu', 'runc lat cpu',
	   'kata thruput', 'kata latency', 'kata thru cpu', 'kata lat cpu',
	   'rel thruput', 'rel latency');
    printf("\t\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n",
	   print_value($summary_data{'nonkata'}{'rate'}, 0),
	   print_value($summary_data{'nonkata'}{'avg_time_op'}, 6),
	   print_value($summary_data{'nonkata'}{'cpu_util_stream'}, 3),
	   print_value($summary_data{'nonkata'}{'cpu_util_rr'}, 3),
	   print_value($summary_data{'kata'}{'rate'}, 0),
	   print_value($summary_data{'kata'}{'avg_time_op'}, 6),
	   print_value($summary_data{'kata'}{'cpu_util_stream'}, 3),
	   print_value($summary_data{'kata'}{'cpu_util_rr'}, 3),
	   safe_div($summary_data{'kata'}{'rate'}, $summary_data{'nonkata'}{'rate'}, 3),
	   safe_div($summary_data{'kata'}{'avg_time_op'}, $summary_data{'nonkata'}{'avg_time_op'}, 3));
}

sub process_fio(\%) {
    my ($all_data) = @_;
    my ($fio_data) = $$all_data{'fio'};
    my (@fio_pods) = keys %$fio_data;
    my (%summary_data) = ();
    return if (! @fio_pods);
    print "\n\nfio:\n";
    foreach my $pod_count (sort { $a <=> $b } @fio_pods) {
	foreach my $engine (sort keys %{$$fio_data{$pod_count}}) {
	    my ($f1) = $$fio_data{$pod_count}{$engine};
	    foreach my $iodepth (sort { $a <=> $b } keys %{$f1}) {
		my ($f2) = $$f1{$iodepth};
		foreach my $fdatasync (sort { $a <=> $b } keys %{$f2}) {
		    my ($f3) = $$f2{$fdatasync};
		    foreach my $direct (sort { $a <=> $b } keys %{$f3}) {
			my ($stuff) = $$f3{$direct};
			printf("\nI/O: engine %s, iodepth %d, fdatasync %d, direct %d, %d pod%s\n",
			       $engine, $iodepth, $fdatasync, $direct, $pod_count, ($pod_count == 1 ? '' : 's'));
			printf("%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n",
			       "Runtime", "Workload", "Blocksize", "Read rate", "Read IOPS", "Write rate", "Write IOPS", "Total rate", "Total IOPS");
			foreach my $workload (sort keys %$stuff) {
			    my ($printed_workload) = 0;
			    foreach my $blocksize (sort { $a <=> $b } keys %{$$stuff{$workload}}) {
				my ($printed_blocksize) = 0;
				my ($stuff1) = $$stuff{$workload}{$blocksize};
				foreach my $runtime ('kata', 'nonkata') {
				    printf("%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n",
					   $runtime,
					   $printed_workload++ ? '' : $workload,
					   $printed_blocksize++ ? '' : $blocksize,
					   print_value($$stuff1{$runtime}{'read'}{'throughput'}, 0),
					   print_value($$stuff1{$runtime}{'read'}{'iops'}, 0),
					   print_value($$stuff1{$runtime}{'write'}{'throughput'}, 0),
					   print_value($$stuff1{$runtime}{'write'}{'iops'}, 0),
					   print_value($$stuff1{$runtime}{'total'}{'throughput'}, 0),
					   print_value($$stuff1{$runtime}{'total'}{'iops'}, 0));
				    foreach my $metric ('throughput', 'iops') {
					if (defined $$stuff1{$runtime}{"op_${workload}"}{$metric}) {
					    if ($$stuff1{$runtime}{"op_${workload}"}{$metric} > $summary_data{$runtime}{"op_${workload}"}{$metric}{'max'}) {
						$summary_data{$runtime}{"op_${workload}"}{$metric}{'max'} = $$stuff1{$runtime}{"op_${workload}"}{$metric};
					    }
					    $summary_data{$runtime}{"op_${workload}"}{$metric}{'logvalue'} += log($$stuff1{$runtime}{"op_${workload}"}{$metric});
					    $summary_data{$runtime}{"op_${workload}"}{$metric}{'count'}++;
					}
					foreach my $op ('read', 'write', 'total') {
					    if (defined $$stuff1{$runtime}{$op}{$metric}) {
						if ($$stuff1{$runtime}{$op}{$metric} > $summary_data{$runtime}{$op}{$metric}{'max'}) {
						    $summary_data{$runtime}{$op}{$metric}{'max'} = $$stuff1{$runtime}{$op}{$metric};
						}
						$summary_data{$runtime}{$op}{$metric}{'logvalue'} += log($$stuff1{$runtime}{$op}{$metric});
						$summary_data{$runtime}{$op}{$metric}{'count'}++;
					    }
					}
				    }
				}
				printf("%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n",
				       'relative', '', '',
				       safe_div($$stuff1{'kata'}{'read'}{'throughput'},
						$$stuff1{'nonkata'}{'read'}{'throughput'}, 3),
				       safe_div($$stuff1{'kata'}{'read'}{'throughput'},
						$$stuff1{'nonkata'}{'read'}{'throughput'}, 3),
				       safe_div($$stuff1{'kata'}{'write'}{'throughput'},
						$$stuff1{'nonkata'}{'write'}{'throughput'}, 3),
				       safe_div($$stuff1{'kata'}{'write'}{'throughput'},
						$$stuff1{'nonkata'}{'write'}{'throughput'}, 3),
				       safe_div($$stuff1{'kata'}{'total'}{'throughput'},
						$$stuff1{'nonkata'}{'total'}{'throughput'}, 3),
				       safe_div($$stuff1{'kata'}{'total'}{'throughput'},
						$$stuff1{'nonkata'}{'total'}{'throughput'}, 3));
				print("\n");
			    }
			}
		    }
		}
	    }
	}
    }
    print("\nSummary:\n");
    print("Runtime\tOperation\tMax throughput\tGeomean throughput\tMax IOPS\tGeomean IOPS\n");
    foreach my $op ('read', 'write', 'total') {
	my ($printed_op) = 0;
	foreach my $runtime ('kata', 'nonkata') {
	    print join("\t", $runtime, $printed_op++ ? '' : $op, 
		       print_value($summary_data{$runtime}{$op}{'throughput'}{'max'}, 0),
		       print_value($summary_data{$runtime}{$op}{'throughput'}, 0),
		       print_value($summary_data{$runtime}{$op}{'iops'}{'max'}, 0),
		       print_value($summary_data{$runtime}{$op}{'iops'}, 0)), "\n";
	}
	print join("\t", 'relative', '',
		   safe_div($summary_data{'kata'}{$op}{'throughput'}{'max'},
			    $summary_data{'nonkata'}{$op}{'throughput'}{'max'}),
		   safe_div($summary_data{'kata'}{$op}{'throughput'},
			    $summary_data{'nonkata'}{$op}{'throughput'}),
		   safe_div($summary_data{'kata'}{$op}{'iops'}{'max'},
			    $summary_data{'nonkata'}{$op}{'iops'}{'max'}),
		   safe_div($summary_data{'kata'}{$op}{'iops'},
			    $summary_data{'nonkata'}{$op}{'iops'})), "\n\n";
    }
}

sub print_one_files_job($) {
    my ($data) = @_;
    printf("Runtime\tCreate\t\t\tRead\t\t\t\tRemove\n");
    printf("\tElapsed Time\tCPU Time\tFiles/sec\t");
    printf("Elapsed Time\tCPU Time\tFiles/sec\tBytes/sec\t");
    printf("Elapsed Time\tCPU Time\tFiles/sec\n");
    foreach my $runtime ('kata', 'nonkata') {
	printf("%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n",
	       $runtime,
	       print_value($$data{$runtime}{'create'}{'elapsed_time'}, 3),
	       print_value($$data{$runtime}{'create'}{'cpu_time'}, 3),
	       print_value($$data{$runtime}{'create'}{'rate'}, 0),
	       print_value($$data{$runtime}{'read'}{'elapsed_time'}, 3),
	       print_value($$data{$runtime}{'read'}{'cpu_time'}, 3),
	       print_value($$data{$runtime}{'read'}{'rate'}, 0),
	       print_value($$data{$runtime}{'read'}{'io_throughput'}, 0),
	       print_value($$data{$runtime}{'remove'}{'elapsed_time'}, 3),
	       print_value($$data{$runtime}{'remove'}{'cpu_time'}, 3),
	       print_value($$data{$runtime}{'remove'}{'rate'}, 0));
    }
    printf("%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n",
	   'relative',
	   safe_div($$data{'kata'}{'create'}{'elapsed_time'}, $$data{'nonkata'}{'create'}{'elapsed_time'}, 3),
	   safe_div($$data{'kata'}{'create'}{'cpu_time'}, $$data{'nonkata'}{'create'}{'cpu_time'}, 3),
	   safe_div($$data{'nonkata'}{'create'}{'elapsed_time'}, $$data{'kata'}{'create'}{'elapsed_time'}, 3),
	   safe_div($$data{'kata'}{'read'}{'elapsed_time'}, $$data{'nonkata'}{'read'}{'elapsed_time'}, 3),
	   safe_div($$data{'kata'}{'read'}{'cpu_time'}, $$data{'nonkata'}{'read'}{'cpu_time'}, 3),
	   safe_div($$data{'nonkata'}{'read'}{'elapsed_time'}, $$data{'kata'}{'read'}{'elapsed_time'}, 3),
	   safe_div($$data{'kata'}{'read'}{'io_throughput'}, $$data{'nonkata'}{'read'}{'io_throughput'}, 3),
	   safe_div($$data{'kata'}{'remove'}{'elapsed_time'}, $$data{'nonkata'}{'remove'}{'elapsed_time'}, 3),
	   safe_div($$data{'kata'}{'remove'}{'cpu_time'}, $$data{'nonkata'}{'remove'}{'cpu_time'}, 3),
	   safe_div($$data{'nonkata'}{'remove'}{'elapsed_time'}, $$data{'kata'}{'remove'}{'elapsed_time'}, 3));
}

sub process_files(\%) {
    my ($all_data) = @_;
    my ($files_data) = $$all_data{'files'};
    my (@files_pods) = keys %$files_data;
    return if (! @files_pods);
    print "\n\nFiles:";
    my (%geomean);
    foreach my $pods (sort { $a <=> $b } @files_pods) {
	my ($f1) = $$files_data{$pods};
	foreach my $dirs (sort { $a <=> $b } keys %$f1) {
	    my ($f2) = $$f1{$dirs};
	    foreach my $files (sort { $a <=> $b } keys %$f2) {
		my ($f3) = $$f2{$files};
		foreach my $blocksize (sort { $a <=> $b } keys %$f3) {
		    my ($f4) = $$f3{$blocksize};
		    foreach my $blocks (sort { $a <=> $b } keys %$f4) {
			my ($f5) = $$f4{$blocks};
			foreach my $direct (sort { $a <=> $b } keys %$f5) {
			    my ($f6) = $$f5{$direct};
			    foreach my $runtime ('kata', 'nonkata') {
				foreach my $op ('create', 'read', 'remove') {
				    $$f6{$runtime}{$op}{'rate'} = safe_div($dirs * $files, $$f6{$runtime}{$op}{'elapsed_time'});
				}
			    }
			    printf("\nPods: %d, Dirs: %d, files per dir: %d, total files: %d, block size: %d, file size: %d, total bytes %s, direct: $direct\n",
				   $pods, $dirs, $files, $dirs * $files * $pods, $blocksize, $blocks, print_value_bin($pods * $dirs * $files * $blocks, "B"));
			    print_one_files_job($f6);
			    foreach my $runtime ('kata', 'nonkata') {
				foreach my $op ('create', 'read', 'remove') {
				    foreach my $var ('elapsed_time', 'cpu_time', 'rate', 'io_throughput') {
					if ($$f6{'kata'}{$op}{$var} > 0 && $$f6{'nonkata'}{$op}{$var} > 0) {
					    $geomean{$direct}{$runtime}{$op}{$var}{'logvalue'} += log($$f6{$runtime}{$op}{$var});
					    $geomean{$direct}{$runtime}{$op}{$var}{'count'}++;
					}
				    }
				}
			    }
			}
		    }
		}
	    }
	}
    }
    foreach my $direct (sort keys %geomean) {
	printf("\nGeomean: direct: $direct\n");
	print_one_files_job($geomean{$direct});
    }
}

sub analyze_directories(\@\%) {
    my ($dirs, $data) = @_;
    my ($analyze_cmd) = realpath($0);
    $analyze_cmd =~ s,[^/]*$,../clusterbuster-report,;
    open(my $summary, '-|', realpath($analyze_cmd), '-o', 'json-summary', @$dirs) || die "Can't run $analyze_cmd: $!\n";
    read_summary($summary, $data);
    close($summary);
}

my (%all_data);
my (@dirs);

if (! @ARGV) {
    warn("Reading summary from stdin\n");
    read_summary(\*STDIN, %all_data);
} else {
    foreach my $dir (@ARGV) {
	if (-d $dir) {
	    if (-f "$dir/clusterbuster-report.json") {
		push @dirs, $dir;
	    } elsif (opendir (my $dh, $dir)) {
		while (readdir($dh)) {
		    my ($fn) = "$dir/$_";
		    if (-d $fn &&
			/^(cpusoaker|fio|uperf|files)-(kata|nonkata)-[[:digit:]]+/ &&
			! /(\.FAIL|\.tmp)$/) {
			push @dirs, $fn;
		    }
		}
		closedir($dh);
	    }
	}
    }
    analyze_directories(@dirs, %all_data);
}

process_scaling(%all_data);
process_uperf(%all_data);
process_fio(%all_data);
process_files(%all_data);
