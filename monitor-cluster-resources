#!/usr/bin/python3 -u

# Copyright 2023 Robert Krawitz/Red Hat
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import re
from datetime import datetime
import time
import sys
import subprocess
import selectors


def _ts():
    return datetime.utcfromtimestamp(time.time()).strftime('%Y-%m-%dT%T.%f')


def _get_timestamp(string):
    """
    Return a string with a timestamp prepended to the first line
    and any other lines indented
    :param string: String to be timestamped
    :return: Timestamped string
    """
    string = re.sub(r'\n(.*\S.*)', r'\n            \1', string)
    return '%s %s' % (_ts(), string)


def timestamp(string):
    """
    Timestamp a string and print it to stderr
    :param string: String to be printed to stderr with timestamp attached
    """
    print(_get_timestamp(str(string)))


node_cpu = {}
node_memory = {}
node_cpu_capacity = {}
node_memory_capacity = {}
node_pod_capacity = {}
pod_status = {}
pod_memory = {}
pod_cpu = {}
node_pods = {}
pod_nodes = {}


def process_memory(token):
    if not token or token == '':
        return 0
    m = re.match(r'([0-9]+)(Ki|Mi|Gi)?', token)
    if m:
        mem = int(m.group(1))
        if m.group(2) == 'Ki':
            return mem * 1024
        elif m.group(2) == 'Mi':
            return mem * 1024 * 1024
        elif m.group(2) == 'Gi':
            return mem * 1024 * 1024 * 1024
        else:
            return mem


def process_cpu(token):
    if not token or token == '':
        return 0
    m = re.match(r'([0-9]+)(m)?', token)
    if m.group(2) == 'm':
        return int(m.group(1)) * .001
    else:
        return int(m.group(1))


def fformat(num: float, precision: int = 3):
    """
    Return a rounded representation of a number.
    :param num:
    :param precision:
    """
    try:
        if precision > 1:
            return f'{num:.{precision}f}'
        else:
            return str(round(num))
    except Exception:
        return str(num)


def process_stdout(line):
    ns, pod, status, node, start, cpu, memory = line.split('|')
    podname = f'{pod}.{ns}'
    if podname in pod_status and pod_status[podname] == status:
        return
    memory = process_memory(memory)
    cpu = process_cpu(cpu)
    changed = False
    if status == 'Running':
        pod_memory[podname] = memory
        pod_cpu[podname] = cpu
        node_memory[node] += memory
        node_cpu[node] += cpu
        node_pods[node] += 1
        changed = True
    elif podname in pod_cpu:
        node_memory[node] -= pod_memory[podname]
        node_cpu[node] -= pod_cpu[podname]
        node_pods[node] -= 1
        del pod_cpu[podname]
        del pod_memory[podname]
        changed = True
    pod_status[podname] = status
    if changed:
        timestamp(f'{ns} {pod} {status} {node} {start} {cpu} {memory} {node_memory[node]} {fformat(node_cpu[node])} {node_pods[node]} {fformat(node_memory[node] / node_memory_capacity[node])} {fformat(node_cpu[node] / node_cpu_capacity[node])} {fformat(node_pods[node] / node_pod_capacity[node])}')


def run_command(cmd, process_stdout=None, process_stderr=None):
    """ Run specified command, capturing stdout and stderr as array of timestamped lines.
        Optionally fail if return status is non-zero.  Also optionally report
        stdout and/or stderr to the appropriate file descriptors
    """
    with subprocess.Popen(cmd, stdin=subprocess.DEVNULL, stdout=subprocess.PIPE, stderr=subprocess.PIPE) as command:
        sel = selectors.DefaultSelector()
        sel.register(command.stdout, selectors.EVENT_READ)
        sel.register(command.stderr, selectors.EVENT_READ)
        foundSomething = True
        while foundSomething:
            # Keep reading until we reach EOF on both channels.
            # command.poll() is not a good criterion because the process
            # might complete before everything has been read.
            foundSomething = False
            for key, _ in sel.select():
                data = key.fileobj.readline()
                if len(data) > 0:
                    foundSomething = True
                    data = data.decode().rstrip()
                    if key.fileobj is command.stdout:
                        if process_stdout:
                            process_stdout(data)
                        else:
                            timestamp(data)
                    elif key.fileobj is command.stderr:
                        if process_stdout:
                            process_stderr(data)
                        else:
                            timestamp(data)


def process_node(line):
    node, cpu, memory, pods = line.split('|')
    node_cpu_capacity[node] = process_cpu(cpu)
    node_memory_capacity[node] = process_memory(memory)
    node_pod_capacity[node] = int(pods)
    node_cpu[node] = 0
    node_memory[node] = 0
    node_pods[node] = 0


try:
    run_command(['sh', '-c', '''
    kubectl get node -ojson | jq -r 'foreach .items[]? as $item ([[],[]];0; ($item.metadata.name + "|" + $item.status.allocatable.cpu + "|" + $item.status.allocatable.memory + "|" + $item.status.allocatable.pods))'
    '''],
                process_node)

    run_command(['kubectl', 'get', 'pod', '--watch', '-A', '-o',
                 'jsonpath={.metadata.namespace}|{.metadata.name}|{.status.phase}|{.spec.nodeName}|{.status.startTime}|{.spec.containers[].resources.requests.cpu}|{.spec.containers[].resources.requests.memory}{"\\n"}'],
                process_stdout)
except KeyboardInterrupt:
    sys.exit()
