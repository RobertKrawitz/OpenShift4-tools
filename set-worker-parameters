#!/bin/bash

declare -a workers

readarray -t workers <<< "$(oc get nodes -l node-role.kubernetes.io/worker --no-headers=true -o name)"
workers=("${workers[@]#node/}")
declare -i totalnodes=${#workers[@]}

declare -A args
declare argsSet=0

function help() {
    cat <<EOF
Usage: $0 [options]
       -p maxPods
       -b KubeAPIBurst
       -q KubeAPIQPS
       -X option=value
EOF
    exit 1
}

while getopts "hp:b:q:X:" opt ; do
    case "$opt" in
	p) args[maxPods]="$OPTARG"; argsSet=1      ;;
	b) args[KubaAPIBurst]="$OPTARG"; argsSet=1 ;;
	q) args[KubeAPIQPS]="$OPTARG"; argsSet=1   ;;
	X)
	    option=${OPTARG%%=*}
	    value=${OPTARG#*=}
	    if [[ -n $value ]] ; then
		args[$option]=$value
		argsSet=1
	    else
		unset "args[$option]"
	    fi
	    ;;
	*) help				;;
    esac
done

if ((! argsSet )) ; then
    echo "No options set"
    help
fi

function tsec() {
    printf "%(%s)T" -1
}

function ptime() {
    local -i start=$1
    local -i interval="$(($(tsec) - start))"
    if (( interval >= 3600 )) ; then
	printf "%d:%02d:%02d" "$((interval / 3600))" "$(((interval % 3600) / 60))" "$((interval % 60))"
    else
	printf "%d:%02d" "$((interval / 60))" "$((interval % 60))"
    fi
}

if [[ $(oc get machineconfigpool worker -o json | jq -r '.metadata.labels."custom-kubelet"?' 2>/dev/null) != 'large-pods' ]] ; then
    oc label --overwrite machineconfigpool worker custom-kubelet=large-pods
fi

oc apply -f - <<EOF
apiVersion: machineconfiguration.openshift.io/v1
kind: KubeletConfig
metadata:
  name: set-max-pods
spec:
  machineConfigPoolSelector:
    matchLabels:
      custom-kubelet: large-pods
  kubeletConfig:
$(for arg in "${!args[@]}" ; do
      echo "    $arg: ${args[$arg]}"
done)
EOF

declare -i start
declare -i phase=0

start=$(tsec)

while : ; do 
    read -r name config updated updating degraded count readycount updatedcount degradedcount <<< "$(oc get machineconfigpool worker --no-headers)"
    if [[ $degraded = True ]] ; then
	echo "Machine config is degraded!"
	exit 1
    elif [[ $updating = True ]] ; then
	phase=$((phase + 1))
    fi
    if (( phase == 0 )) ; then
	readycount=0
    fi
    echo -en "\r($(ptime "$start")) Waiting for nodes to become ready ($readycount / $totalnodes)..."
    if ((readycount == totalnodes)) ; then
	echo 'ready!'
	break
    fi
    sleep 10
done
exit 0
