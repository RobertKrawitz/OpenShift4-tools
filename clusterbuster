#!/bin/bash

set -u

declare -i namespaces=1
declare -i depsPerNamespace=1
declare -i secrets=0
declare -i replicas=1
declare -i parallel=1
declare -i containers=1
declare -i sleeptime=0
declare -i doit=1
declare -i blocksize=1
declare -i blockitemcount=0
declare podType=ClusterBuster
declare podsleeptime=infinity
declare basename=clusterbuster
declare opt
declare -r nl='
'

function help() {
    cat <<EOF
Usage: $0 [options] [name]
       Default 1 namespace
    Options:
       -n              Print what would be done without doing it
       -P              Use PausePod rather than clusterbuster
       -b blocksize    Number of objects to create in one oc call (default 1)
       -c containers   Number of containers per pod
       -d deployments  Number of deployments per namespace (default 1)
       -N namespaces   Number of namespaces to create (default 1)
       -p parallel     Number of operations to perform in parallel (default 1)
       -r replicas     Number of replicas per deployment (default 1)
       -s secrets      Number of secrets per deployment (default 0)
       -w wait         Number of seconds to wait between ops (default 0)
       -z podsleep     Amount of time in seconds for pod to sleep before exit
                       (default infinity).  This may be an expression evaluated
                       as an argument to sleep(1) and need not be a numeric
                       constant.
EOF
    exit 1
}

trap exit INT

while getopts ":b:c:ns:d:p:r:w:z:hN:P" opt ; do
    case "$opt" in
	n) doit=0			;;
	P) podType=Pausepod		;;
	b) blocksize="$OPTARG"          ;;
	c) containers="$OPTARG"         ;;
	N) namespaces="$OPTARG"         ;;
	d) depsPerNamespace="$OPTARG"   ;;
	s) secrets="$OPTARG"            ;;
	r) replicas="$OPTARG"           ;;
	p) parallel="$OPTARG"           ;;
	w) sleeptime="$OPTARG"          ;;
	z) podsleeptime="$OPTARG"	;;
	h) help				;;
	*) help "$OPTARG"               ;;
    esac
done

shift $((OPTIND - 1))

if [[ -n ${1:-} ]] ; then
    basename="$1"
    shift
fi

[[ -z "$*" ]] || echo "Warning: extraneous arguments $# after basename will be ignored!" 1>&2

function finishCreation() {
    if (( doit )) ; then
	if [[ -n $accumulateddata ]] ; then
	    oc apply -f - <<< "$accumulateddata"
	    accumulateddata=
	fi
    fi
}

declare accumulateddata=

function createObject() {
    local data+="---$nl"
    while IFS='' read -r line ; do
	if [[ -n $line ]] ; then
	    data+="$line$nl"
	fi
    done
    data+="$nl"
    if (( doit )) ; then
	accumulateddata+="$data"
	if (( ++blockitemcount >= blocksize )) ; then
	    oc apply -f - <<< "$accumulateddata"
	    accumulateddata=
	    blockitemcount=0
	    if (( sleeptime )) ; then
		sleep "$sleeptime"
	    fi
	fi
    else
	echo "$data"
    fi
}

function createNSYaml() {
    local namespace=$1
    cat <<EOF
apiVersion: v1
kind: Namespace
metadata:
  name: "${namespace}"
  labels:
    ${basename}: "true"
EOF
}

function createNamespace() {
    createObject <<< "$(createNSYaml "$@")"
}

function createSecretYAML() {
    local namespace=$1
    local deployment=$2
    local i=$3
cat <<EOF
apiVersion: v1
kind: Secret
metadata:
  name: "secret-${namespace}-${deployment}-${i}"
  namespace: "$namespace"
  labels:
    ${basename}: "true"
data:
  key1: "$(base64 <<< "${namespace}X${deployment}Y${i}Z1")"
  key2: "$(base64 <<< "${namespace}X${deployment}Y${i}Z2")"
type: Opaque
EOF
}

function createSecrets() {
    local namespace=$1
    local depsPerNamespace=${2:-1}
    local secrets=${3:-1}
    local -i i
    local -i j
    for i in $(seq 0 $((depsPerNamespace - 1))) ; do
	for j in $(seq 0 $((secrets - 1))) ; do
	    createObject <<< "$(createSecretYAML "$namespace" "$i" "$j")"
	done
    done
}    

function createVolumeMountsYAML() {
    local namespace=$1
    local deployment=${2:-1}
    local secrets=${3:-1}
    local -i i
    if (( count )) ; then
	echo "          volumeMounts:"
	for i in $(seq 0 $((secrets - 1))) ; do
	    local name="secret-${namespace}-${deployment}-$i"
	    cat <<EOF
            - name: $name
              mountPath: /etc/$name
              readOnly: true
EOF
	done
    fi
}

function createVolumesYAML() {
    local namespace=$1
    local deployment=${2:-1}
    local secrets=${3:-1}
    local -i i
    if (( count )) ; then
	echo "      volumes:"
	for i in $(seq 0 $((secrets - 1))) ; do
	    local name="secret-${namespace}-${deployment}-$i"
	    cat <<EOF
        - name: $name
          secret:
            secretName: $name
EOF
	done
    fi
}

function createContainersClusterBusterYAML() {
    local namespace=$1
    local i=$2
    local secretCount=$3
    local -i pods=$4
    local -i containers=$5
    local -i j
    for j in $(seq 0 $((containers - 1))) ; do
cat <<EOF
        - name: ${namespace}-$i-$j
          imagePullPolicy: IfNotPresent
          image: "busybox"
#          resources:
#            requests:
#              cpu: 1m
#              memory: 5Mi
          securityContext:
            privileged: false
          command:
            - /bin/sh
          args:
            - -c
            - |
              trap 'exit 0' TERM
              (while : ; do date ; sleep 60 ; done)&
              sleep $podsleeptime
              exit 1
$(createVolumeMountsYAML "$namespace" "$i" "$secretCount")
EOF
    done
}

function createContainersPausepodYAML() {
    local namespace=$1
    local i=$2
    local secretCount=$3
    local -i pods=$4
    local -i containers=$5
    local -i j
    for j in $(seq 0 $((containers - 1))) ; do
cat <<EOF
        - name: ${namespace}-$i-$j
          imagePullPolicy: IfNotPresent
          securityContext:
            privileged: false
          image: "gcr.io/google_containers/pause-amd64:3.0"
$(createVolumeMountsYAML "$namespace" "$i" "$secretCount")
EOF
    done
}


function createDeploymentYAML() {
    local namespace=$1
    local i=$2
    local secretCount=$3
    local -i pods=$4
    local -i containers=$5
    cat <<EOF
kind: Deployment
apiVersion: apps/v1
metadata:
  name: ${namespace}-$i
  namespace: $namespace
  labels:
    ${basename}: "true"
spec:
  replicas: $pods
  selector:
    matchLabels:
      app: ${namespace}-$i
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        ${basename}: "true"
        name: ${namespace}-$i
        app: ${namespace}-$i
    spec:
      terminationGracePeriodSeconds: 1
      restartPolicy: Always
      containers:
$(createContainers${podType}YAML "$@")
$(createVolumesYAML "$namespace" "$i" "$secretCount")
EOF
}

function createDeployment() {
    local namespace=$1
    local count=${2:-1}
    local secretCount=${3:-1}
    local pods=${4:-1}
    local containers=${5:-1}
    local -i i
    for i in $(seq 0 $((count - 1))) ; do
	createObject <<< "$(createDeploymentYAML "$namespace" "$i" "$secretCount"  "$replicas" "$containers")"
    done
}

function heartbeat() {
    trap exit INT
    while : ; do
	printf '%(%Y-%m-%dT%H:%M:%S%z)T\n' -1
	sleep 10
    done
}

function stop_heartbeat() {
    exec 3>&2 2>/dev/null
    jobs -p | while read -r job ; do
	kill "$job"
    done
    wait
    exec 2>&3 3>&-
}

function createNamespaces_n() {
    trap exit INT
    local parallel=$1; shift
    local rotor=$1; shift
    while (( rotor < $namespaces )) ; do
	local j=0
	while (( j < blocksize )) ; do
	    createNamespace "${basename}-$((rotor + j))"
	    j=$((j+1))
	done
	rotor=$((rotor + (parallel * blocksize)))
    done
    finishCreation
}

function createSecrets_n() {
    trap exit INT
    local parallel=$1; shift
    local rotor=$1; shift
    while (( rotor < $namespaces )) ; do
	local j=0
	while (( j < blocksize )) ; do
	    createSecrets "${basename}-$((rotor + j))" "$@"
	    j=$((j+1))
	done
	rotor=$((rotor + (parallel * blocksize)))
    done
    finishCreation
}

function createDeployments_n() {
    trap exit INT
    local parallel=$1; shift
    local rotor=$1; shift
    while (( rotor < $namespaces )) ; do
	local j=0
	while (( j < blocksize )) ; do
	    createDeployment "${basename}-$((rotor + j))" "$@"
	    j=$((j+1))
	done
	rotor=$((rotor + (parallel * blocksize)))
    done
    finishCreation
}

function run_clusterbuster_1() {
    trap 'kill -9 $(jobs -p); exit' INT
    for i in $(seq 0 "$((parallel - 1))") ; do
	createNamespaces_n "$parallel" "$((i * blocksize))" &
    done
    wait

    for i in $(seq 0 "$((parallel - 1))") ; do
	createSecrets_n "$parallel" "$((i * blocksize))" "$depsPerNamespace" "$secrets" &
    done
    wait

    for i in $(seq 0 "$((parallel - 1))") ; do
	createDeployments_n "$parallel" "$((i * blocksize))" "$depsPerNamespace" "$secrets" "$replicas" "$containers" &
    done
    wait
}

trap stop_heartbeat INT EXIT
heartbeat&
declare -a nsids=()
readarray -t nsids <<< $(seq 0 $((namespaces - 1)))
(run_clusterbuster_1)
