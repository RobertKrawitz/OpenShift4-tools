#!/bin/bash

declare jq_cmd
read -r -d '' jq_cmd <<\EOF
[foreach .items[]? as $item
 ([[],[]];0;
 (if ($item.kind == "Pod") then
   ([foreach $item.spec.containers[]? as $container ([[],[]];0; [$item.metadata.namespace, $item.metadata.name, $container.name, [foreach $item.status.containerStatuses[]? as $status ([[],[]]; 0; if ($container.name == $status.name) then $status.state | keys[0] else null end)]] | flatten | map (select (. != null)) | join(" "))])
 else null end))] | flatten | map (select (. != null))[]
EOF

declare -i parallel=1
declare -i curjobs=0
declare basename=clusterbuster

declare OC
OC=$(type -p oc)
OC=${OC:-$(type -p kubectl)}	# kubectl might not work, though...

while getopts ':p:B:' opt ; do
    case "$opt" in
	B) basename=$OPTARG ;;
	p) parallel=$OPTARG ;;
	*) ;;
    esac
done

(( parallel <= 0 )) && parallel=1

trap 'wait; exit' INT EXIT

function prettyprint() {
    local -a colwidths
    local -a rows
    local -a rowfields
    local -i i
    local f

    local -a rowzero=(+ NAMESPACE POD + CONTAINER STATE REF FAIL BLOCKS + CREATED START + CONNECTED FINISH TRANSFERTIME USER SYSTEM DATA XFERTIME RATE SLEEPMEAN SLEEPSTDEV)
    local -a formats=(.0s s s .0s s s d d d .0s .3f .3f .0s .3f .3f .6f .3f .3f d .3f .3f .6f .6f)
    local -ri nfields=$((${#rowzero[@]} - 1))

    for i in $(seq 0 "$nfields") ; do
	f=${rowzero[$i]}
	f=${f%+}
	colwidths[$i]=${#f}
    done

    readarray -t rows

    for row in "${rows[@]}" ; do
	# shellcheck disable=SC2206
	rowfields=($row)
	for i in $(seq 0 $((${#rowfields[@]} - 1)) ) ; do
	    if (( ${colwidths[$i]} > 0 && ${#rowfields[$i]} > ${colwidths[$i]} )) ; then
		colwidths[$i]=${#rowfields[$i]}
	    fi
	done
    done

    local printfstr0=
    local printfstr1=

    local -i width

    for i in $(seq 0 "$nfields") ; do
	f=${rowzero[$i]}
	width=${colwidths[$i]}
	fmt=${formats[$i]}
	if [[ -n $printfstr0 && $printfstr0 != *'.0s' ]] ; then
	    printfstr0+=' '
	    printfstr1+=' '
	fi
	printfstr0+="%-${width}.${width}s"
	
	if [[ $fmt = *'s' ]] ; then
	    printfstr1+="%-${width}$fmt"
	else
	    printfstr1+="%${width}$fmt"
	fi
    done
    printfstr0+='\n'
    printfstr1+='\n'

	# shellcheck disable=SC2059
    printf "$printfstr0" "${rowzero[@]}"
    for row in "${rows[@]}" ; do
	# shellcheck disable=SC2059
	# shellcheck disable=SC2086
	printf "$printfstr1" $row
    done
}

function retrieve_pod_stats() {
    local ns=$1
    local pod=$2
    local container=$3
    local status=$4
    local -i connection_failures=0
    local -i connection_refused=0
    local -i blocks=0
    local statline=''
    case "$status" in
	running|completed)
	    # This is actually faster than reading lines if there's a lot of data.
	    local data
	    data="$(oc logs -n "$ns" "$pod" -c "$container")"
	    connection_refused=$(grep -c 'Connection refused' <<< "$data")
	    connection_failures=$(grep -c 'Could not connect' <<< "$data")
	    blocks=$(grep -c 'Read/Write' <<< "$data")
	    statline=$(grep 'STATS' <<< "$data")
	    connection_failures=$((connection_failures+connection_refused))
	    ;;
	'')
	    return
	    ;;
	*)
	    ;;
    esac
    echo "-n $ns $pod -c $container $status $connection_failures $connection_refused $blocks $statline"
}

while read -r ns pod container status ; do
    while (( curjobs >= parallel )) ; do
	wait -n
	curjobs=$((curjobs - 1))
    done
    if (( parallel > 1 )) ; then
	retrieve_pod_stats "$ns" "$pod" "$container" "$status"&
	curjobs=$((curjobs + 1))
    else
	retrieve_pod_stats "$ns" "$pod" "$container" "$status"
    fi
done <<< "$(oc get pods -ojson -l "${basename}-client" -A | jq -r "$jq_cmd")"
