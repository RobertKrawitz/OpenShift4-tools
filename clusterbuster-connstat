#!/bin/bash

# Copyright 2019-2021 Robert Krawitz/Red Hat
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

declare jq_cmd

declare -i parallel=1
declare -i summarize=0
declare -i timeout=-1
declare -i verbose=0
declare -i csv=0
declare -i header=1
declare -i format_json=0
declare -i format_raw=0
declare -i use_namespace=1
declare run_name=
declare basename=clusterbuster
declare -A cached_stats=()
declare statsfile=
declare -a extras=()
declare selector=

declare OC=${OC:-${KUBECTL:-}}
OC=${OC:-$(type -p oc)}
OC=${OC:-$(type -p kubectl)}	# kubectl might not work, though...

declare __me__
__me__=$(realpath -e "$0")

if [[ -z "$__me__" ]] ; then
    echo "Can't find my path!" 1>&2
    exit 1
fi

declare __mydir__=${__me__%/*}
declare __libdir__=${__mydir__}/lib/clusterbuster

if [[ ! -d "$__libdir__" ]] ; then
    echo "Can't find my library dir!" 1>&2
    exit 1
fi

while getopts ':p:B:st:f:F:jvqNcnr:Rl:' opt ; do
    case "$opt" in
	B) basename=$OPTARG 	  ;;
	N) use_namespace=0	  ;;
	c) csv=1		  ;;
	f) statsfile=$OPTARG	  ;;
	F) extras+=("$OPTARG")	  ;;
	n) header=0		  ;;
	p) parallel=$OPTARG 	  ;;
	q) verbose=0        	  ;;
	r) run_name=$OPTARG	  ;;
	R) format_raw=0		  ;;
	s) summarize=1	    	  ;;
	t) timeout=$OPTARG  	  ;;
	j) format_json=1	  ;;
	l) selector=$OPTARG	  ;;
	v) verbose=$((verbose+1)) ;;
	*) ;;
    esac
done

shift "$((OPTIND - 1))"

if (( use_namespace )) ; then
    read -r -d '' jq_cmd <<\EOF
[foreach .items[]? as $item
 ([[],[]];0;
 (if ($item.kind == "Pod") then
   ([foreach $item.spec.containers[]? as $container ([[],[]];0; [$item.metadata.namespace, $item.metadata.name, $container.name,
     (if ($item.status.containerStatuses? == null) then
      ($item.status.phase + ": " + $item.status.conditions[0].reason?)
     else
      [foreach $item.status.containerStatuses[]? as $status ([[],[]]; 0; if ($container.name == $status.name) then $status.state | keys[0] else null end)] end)] | flatten | map (select (. != null)) | join(" "))])
 else null end))] | flatten | map (select (. != null))[]
EOF
else
    read -r -d '' jq_cmd <<\EOF
[foreach .items[]? as $item
 ([[],[]];0;
 (if ($item.kind == "Pod") then
   ([foreach $item.spec.containers[]? as $container ([[],[]];0; [$item.metadata.name, $container.name,
     (if ($item.status.containerStatuses? == null) then
      ($item.status.phase + ": " + $item.status.conditions[0].reason?)
     else
      [foreach $item.status.containerStatuses[]? as $status ([[],[]]; 0; if ($container.name == $status.name) then $status.state | keys[0] else null end)] end)] | flatten | map (select (. != null)) | join(" "))])
 else null end))] | flatten | map (select (. != null))[]
EOF
fi

read -r -d '' jq_cmd_pods <<\EOF
{results: ., api_objects: [$objects[].items?[] | { kind: .kind, name: .metadata.name, namespace: .metadata.namespace}]}
EOF

(( parallel <= 0 )) && parallel=1

trap 'wait; exit' INT EXIT

function report() {
    local fields=()
    local values=()
    local field=
    local value=
    local extra=
    local x=$'"'
    if [[ -n "$run_name" ]] ; then
	fields+=("${x}Name${x}")
	values+=("$x$run_name$x")
    fi
    # Extra value with no = is treated as a field name with
    # empty value
    for extra in "${extras[@]}" ; do
	fields+=("${x}${extra%%=*}${x}")
	values+=("${x}${extra#*=}${x}")
    done
    while (( $# > 0 )) ; do
	fields+=("$x$1$x")
	values+=("$x$2$x")
	shift 2
    done
    if (( header )) ; then
	(IFS=,; echo "${fields[*]}")
    fi
    (IFS=,; echo "${values[*]}")
}

function do_report() {
    if (( csv )) ; then
	local -a args=()
	local field
	local value
	local line
	while read -r line ; do
	    if [[ -n "${line:-}" ]] ; then
		value=${line#*:}
		field=${line%:*}
		# Convenient way of stripping extra whitespace
		# shellcheck disable=SC2116
		# shellcheck disable=SC2086
		value=$(echo $value)
		# shellcheck disable=SC2116
		# shellcheck disable=SC2086
		field=$(echo $field)
		args+=("$field" "$value")
	    fi
	done
	report "${args[@]}"
    else
	cat
    fi
}

function maxbits() {
    local -i i
    local -i a
    for i in $(seq 0 127) ; do
	a=$((2**i + ((2**i)-1)))
	if (( a > a + 1)) ; then
	    echo "$i"
	    return
	fi
    done
    echo "$i"
}

function printit() {
    case "$mode" in
	files)
	    file_create_elapsed=$((file_create_end - file_create_start))
	    file_create_total_cpu=$((file_create_sys_cpu+file_create_user_cpu))
	    file_remove_elapsed=$((file_remove_end - file_remove_start))
	    file_remove_total_cpu=$((file_remove_sys_cpu+file_remove_user_cpu))
	    file_total_elapsed=$((file_create_elapsed + file_remove_elapsed))
	    file_total_ops=$((file_create_ops+file_remove_ops))
	    file_total_user_cpu=$((file_create_user_cpu+file_remove_user_cpu))
	    file_total_sys_cpu=$((file_create_sys_cpu+file_remove_sys_cpu))
	    file_total_total_cpu=$((file_total_user_cpu+file_total_sys_cpu))

	    cat <<EOF
Filesystem create ops:     $file_create_ops
Filesystem create elapsed: $(bc <<< "scale=3; $file_create_elapsed / 1000")
Filesystem create CPU:     $(bc <<< "scale=3; $file_create_total_cpu / 1000")
  Filesystem create user:  $(bc <<< "scale=3; $file_create_user_cpu / 1000")
  Filesystem create sys:   $(bc <<< "scale=3; $file_create_sys_cpu / 1000")
Filesystem create util:    $(bc <<< "scale=3; $file_create_total_cpu / $file_create_elapsed * 100")%
Filesystem create ops/sec: $(bc <<< "scale=3; $file_create_ops / ($file_create_elapsed / 1000)")

Filesystem remove ops:     $file_remove_ops
Filesystem remove elapsed: $(bc <<< "scale=3; $file_remove_elapsed / 1000")
Filesystem remove CPU:     $(bc <<< "scale=3; $file_remove_total_cpu / 1000")
  Filesystem remove user:  $(bc <<< "scale=3; $file_remove_user_cpu / 1000")
  Filesystem remove sys:   $(bc <<< "scale=3; $file_remove_sys_cpu / 1000")
Filesystem remove ops/sec: $(bc <<< "scale=3; $file_remove_ops / ($file_remove_elapsed / 1000)")

Filesystem total ops:     $file_total_ops
Filesystem total elapsed: $(bc <<< "scale=3; $file_total_elapsed / 1000")
Filesystem total CPU:     $(bc <<< "scale=3; $file_total_total_cpu / 1000")
  Filesystem total user:  $(bc <<< "scale=3; $file_total_user_cpu / 1000")
  Filesystem total sys:   $(bc <<< "scale=3; $file_total_sys_cpu / 1000")
Filesystem total ops/sec: $(bc <<< "scale=3; $file_total_ops / ($file_total_elapsed / 1000)")
EOF
	    ;;
	server)
	    cat <<EOF
Bytes:            $total
Containers:       $line_count
Average_elapsed:  $(bc <<< "scale=3; $total_et/$line_count/1000")
Elapsed_span:     $(bc <<< "scale=3; (($last_end)-($first_start))/1000")
Data rate MB/sec: $(bc <<< "scale=3; (($total/($total_et/$line_count/1000)/1000000))")
Mean RTT msec:    $(bc <<< "scale=3; $mean_rtt/$line_count/1000")
Max RTT msec:     $(bc <<< "scale=3; $max_rtt/1000")
Iterations:       $total_iterations
EOF
	    ;;
	soaker)
	    local -i ips=0
	    local -i ipcs=0
	    if (( total_cpu > 0 )) ; then
		ipcs=$(bc <<< "scale=0; $total_iterations*1000/$total_cpu")
	    fi
	    if (( total_et > 0 )) ; then
		ips=$(bc <<< "scale=0; $total_iterations*1000*$line_count/$total_et")
	    fi
	    cat <<EOF
Iterations:         $total_iterations
Average_elapsed:    $(bc <<< "scale=3; $total_et/$line_count/1000")
Elapsed_span:       $(bc <<< "scale=3; (($last_end)-($first_start))/1000")
First start:        $(bc <<< "scale=3; ($pod_first_start)/1000")
Starting span:      $(bc <<< "scale=3; (($pod_last_start)-($pod_first_start))/1000")
Total CPU:          $(bc <<< "scale=3; $total_cpu/1000")
CPU utilization:    $(bc <<< "scale=3; $total_cpu_util/1000")%
Iterations/CPU sec: $ipcs
Iterations/sec:     $ips
EOF
	    ;;
	sysbench)
	    cat <<EOF
Read ops/sec:      $(bc <<< "scale=3; $read_ops")"
Write ops/sec:     $(bc <<< "scale=3; $write_ops")"
Fsync ops/sec:     $(bc <<< "scale=3; $fsync_ops")"
Read rate MB/sec:  $(bc <<< "scale=3; $readrate")"
Write rate MB/sec: $(bc <<< "scale=3; $writerate")"
EOF
	    ;;
	fio)
	    echo "$jsonoutput"
	    ;;
	*)
	    echo "Unknown mode $mode" 1>&2
	    ;;
    esac
}

function process_summary_legacy() {
    local -i line_count=0
    local -i total=0
    local -i maxbits=$(($(maxbits)))
    local -i first_start=$(((2**maxbits) + ((2**maxbits)-1) ))
    local -i last_end=$((first_start + 1))
    local -i total_et=0
    local -i total_cpu=0
    local -i total_cpu_util=0
    local -i total_iterations=0
    local -i pod_start=0
    local -i pod_first_start=$first_start
    local -i pod_last_start=$last_end
    local -i mean_rtt=0
    local -i t=0
    local -i max_rtt=0
    local -i read_ops=0
    local -i write_ops=0
    local -i fsync_ops=0
    local -i readrate=0
    local -i writerate=0
    local -a output

    local -i create_start=0
    local -i create_end=0
    local -i remove_start=0
    local -i remove_end=0
    local -i file_create_start=$first_start
    local -i file_create_end=$last_end
    local -i file_remove_start=$first_start
    local -i file_remove_end=$last_end
    local -i file_create_elapsed=0
    local -i file_create_ops=0
    local -i file_create_user_cpu=0
    local -i file_create_sys_cpu=0
    local -i file_create_total_cpu=0
    local -i file_remove_elapsed=0
    local -i file_remove_ops=0
    local -i file_remove_user_cpu=0
    local -i file_remove_sys_cpu=0
    local -i file_remove_total_cpu=0
    local -i file_total_elapsed=0
    local -i file_total_ops=0
    local -i file_total_user_cpu=0
    local -i file_total_sys_cpu=0
    local -i file_total_total_cpu=0
    local jsonoutput=''
    local mode=
    while read -r rawoutput ; do
	if (( format_raw )) ; then
	    echo "$rawoutput"
	    continue
	fi
	if [[ $rawoutput = '-n,'* ]] ; then
	    IFS=, read -r -a output <<< "$rawoutput"
	else
	    read -r -a output <<< "$rawoutput"
	fi
	[[ -n "${output[*]}" ]] || continue
	[[ ${output[*]} = *'clusterbuster-json'* ]] || continue
	if [[ -z "$mode" ]] ; then
	    case "${output[2]}" in
		*'soaker'*)   mode=soaker   ;;
		*'client'*)   mode=server   ;;
		*'sysbench'*) mode=sysbench ;;
		*'files'*)    mode=files    ;;
		*'fio'*)      mode=fio      ;;
		*)            continue      ;;
	    esac
	fi
	local -i start
	local -i end
	local -i et
	(( verbose )) && echo "$rawoutput"
	case "$mode" in
	    files)
		pod_start=$(($(clean "${output[11]}") ))
		if (( pod_start < pod_first_start )) ; then pod_first_start=pod_start; fi
		if (( pod_start > pod_last_start )) ; then pod_last_start=pod_start; fi
		create_start=$(clean "${output[16]}")
		create_end=$(($(clean "${output[17]}")+create_start))
		remove_start=$(clean "${output[25]}")
		remove_end=$(($(clean "${output[26]}")+remove_start))
		if (( create_start < file_create_start )) ; then file_create_start=create_start; fi;
		if (( create_end > file_create_end )) ; then file_create_end=create_end; fi;
		if (( remove_start < file_remove_start )) ; then file_remove_start=remove_start; fi;
		if (( remove_end > file_remove_end )) ; then file_remove_end=remove_end; fi;

		start=$pod_start
		et=$(clean "${output[12]}")
		end=$((start+et))
		if (( start < first_start )) ; then first_start=$start; fi
		if (( end > last_end )) ; then last_end=$end; fi
		file_create_elapsed+=$(clean "${output[17]}")
		file_create_ops+=$(clean "${output[21]}")
		file_create_user_cpu+=$(clean "${output[18]}")
		file_create_sys_cpu+=$(clean "${output[19]}")

		file_remove_elapsed+=$(clean "${output[26]}")
		file_remove_ops+=$(clean "${output[30]}")
		file_remove_user_cpu+=$(clean "${output[27]}")
		file_remove_sys_cpu+=$(clean "${output[28]}")
		;;
	    server)
		total+=${output[19]}
		start=$(clean "${output[14]}")
		end=$(clean "${output[15]}")
		et=$(clean "${output[20]}")
		mean_rtt+=$(clean "${output[22]}")
		t=$(clean "${output[23]}")
		total_iterations=${output[8]}
		if (( t > max_rtt )) ; then max_rtt=$t; fi
		if (( start < first_start )) ; then first_start=$start; fi
		if (( end > last_end )) ; then last_end=$end; fi
		;;
	    soaker)
		pod_start=$(($(clean "${output[12]}")))
		if (( pod_start < pod_first_start )) ; then pod_first_start=pod_start; fi
		if (( pod_start > pod_last_start )) ; then pod_last_start=pod_start; fi
		start=$(clean "${output[13]}")
		end=$(clean "${output[15]}")
		et=$(clean "${output[14]}")
		if (( start < first_start )) ; then first_start=$start; fi
		if (( end > last_end )) ; then last_end=$end; fi
		total_cpu+=$(clean "${output[16]}")
		total_cpu_util+=$(clean "${output[17]}")
		total_iterations+=$(clean "${output[18]}")
		;;
	    sysbench)
		start=$(clean "${output[11]}")
		end=$(clean "${output[13]}")
		et=$(clean "${output[19]}")
		if (( start < first_start )) ; then first_start=$start; fi
		if (( end > last_end )) ; then last_end=$end; fi
		read_ops+=$(clean "${output[14]}")
		write_ops+=$(clean "${output[15]}")
		fsync_ops+=$(clean "${output[16]}")
		readrate+=${output[17]}
		writerate+=${output[18]}
		;;
	    fio)
		output=("${output[@]:15}")
		jsonoutput="$(IFS=','; echo "${output[*]}")"
	esac
	line_count+=1
	total_et+=$et
    done
    (( format_raw )) || return
    (( line_count )) || return
    printit |do_report
}

function process_summary() {
    if ((format_json)) ; then
	local tmp
	tmp=$(mktemp "/tmp/cbdataXXXXXX.json")
	# shellcheck disable=SC2064
	trap "rm -f -- $tmp; exit" INT TERM EXIT
	"${__libdir__}/postprocess-json.py" > "$tmp"
	# Don't collect this until we've processed the data
	jq --slurpfile objects <("$OC" get all -ojson -A -l "$selector") \
	   "$jq_cmd_pods" < "$tmp"
    else
	process_summary_legacy
    fi
}

function retrieve_pod_stats() {
    local ns=$1
    local pod=$2
    local container=$3
    local status=$4
    local -i connection_failures=0
    local -i connection_refused=0
    local -i blocks=0
    local statline=''
    local -a statlines=()
    local row_prefix='!'
    ns=${ns:+-n "$ns"}
    local ns1=${ns:-NA NA}
    case "$status" in
	running|completed|terminated)
	    # This is actually faster than reading lines if there's a lot of data.
	    local data
	    # shellcheck disable=SC2086
	    data="$("${OC}" logs $ns "$pod" -c "$container")"
	    connection_refused=$(grep -c 'Connection refused' <<< "$data")
	    connection_failures=$(grep -c 'Could not connect' <<< "$data")
	    blocks=$(grep -c 'Write/Read' <<< "$data")
	    readarray -t statlines < <(grep -E '^clusterbuster-json' <<< "$data")
	    if [[ $data = *"FINIS"* ]] ; then
		row_prefix=
	    fi
	    ;;
	'')
	    return
	    ;;
	*)
	    ;;
    esac
    if (( ${#statlines[@]} )) ; then
	local statline=
	for statline in "${statlines[@]}" ; do
	    echo "${row_prefix}${ns1} $pod -c $container $status $connection_failures $connection_refused $blocks $statline"
	done
    else
	echo "!${ns1} $pod -c $container $status $connection_failures $connection_refused $blocks"
    fi
}

declare wait_n=$(( BASH_VERSINFO[0] > 4 || (BASH_VERSINFO[0] > 4 && BASH_VERSINFO[1] >= 3) ))

function get_all_pods() {
    local basename=$1
    if [[ -n "$selector" ]] ; then
	"$OC" get pods -ojson -A -l "$selector"
    elif (( use_namespace )) ; then
	local ns
	while read -r ns ; do
	    ns=${ns##*/}
	    "${OC}" get pods -ojson -l "${basename}-client" -n "$ns"
	done < <("${OC}" get ns -l "$basename" --no-headers | awk '{print $1}')
    else
	"${OC}" get pods -ojson -l "${basename}-client"
    fi
}

trap exit INT

function process_stats() {
    local -i curjobs=0
    local ns
    local nsfield=
    local pod
    local container
    local status
    if (( use_namespace )) ; then
	nsfield=ns
    fi
    while read -r ${nsfield?} pod container status ; do
	local xcache=${cached_stats["$ns $pod $container"]:-}
	if [[ -n "$xcache" ]] ; then
	    echo "$xcache"
	    continue
	fi
	if (( parallel > 1 )) ; then
	    if (( wait_n )) ; then
		while (( curjobs >= parallel )) ; do
		    wait -n
		    curjobs=$((curjobs - 1))
		done
	    elif (( curjobs >= parallel )) ; then
		wait
		curjobs=0
	    fi
	    retrieve_pod_stats "$ns" "$pod" "$container" "$status"&
	    curjobs=$((curjobs + 1))
	else
	    retrieve_pod_stats "$ns" "$pod" "$container" "$status"
	fi
    done

    if (( curjobs )) ; then
	wait
    fi
}

function get_stats() {
    process_stats < <(get_all_pods "$basename" | jq -r "$jq_cmd")
}

function clean() {
    local sign=
    local num=${1//./}
    if [[ $num = '-'* ]] ; then
	sign=-
	num=${num#-}
    fi
    while [[ $num = "0"* ]] ; do
	num=${num##0}
    done
    echo "${sign}${num:-0}"
}

function do_summarize() {
    # shellcheck disable=SC2155
    local -i start_time=$(printf '%(%s)T' -1)
    local pass=1
    while : ; do
	local -i found_all=1
	set -x
	while IFS=, read -r -a output ; do
	    [[ -n "${output[*]}" ]] || continue
	    local item="${output[1]} ${output[2]} ${output[4]}"
	    if [[ -z "${output[10]:-}" || ${output[0]} = '!'* ]] ; then
		found_all=0
	    else
		[[ -n "${cached_stats[$item]:-}" ]] || cached_stats[$item]=
		cached_stats[$item]+="${output[*]}"$'\n'
		unset pod_cache["$item"]
	    fi
	done < <(get_stats)
	if ((found_all)) ; then
	    echo "$(IFS=$'\n'; echo "${cached_stats[*]}")"
	    return
	fi
	pass=$((pass+1))
	if (( timeout > 0 && $(printf '%(%s)T' -1) - start_time > timeout  )) ; then
	    echo "Summary timed out ($timeout seconds)" 1>&2
	    return 1
	fi
    done
}

if (( summarize || format_json )) ; then
    case "$statsfile" in
	-)  process_summary		   ;;
	'') do_summarize | process_summary ;;
	*)  process_summary < "$statsfile" ;;
    esac
else
    get_stats |sed -e 's/^!//'
fi
