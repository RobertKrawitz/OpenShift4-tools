#!/usr/bin/env python3

# Copyright 2021 Robert Krawitz/Red Hat
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from __future__ import print_function
from prometheus_api_client import PrometheusConnect
import argparse
import datetime
import json
import selectors
import subprocess
import sys
import time
import urllib3
import uuid
import yaml

def eprint(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)


def efail(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)
    sys.exit(1)

def get_prometheus_default_url():
    try:
        with subprocess.Popen(['oc', 'get', 'route',
                               '-n', 'openshift-monitoring',
                               'prometheus-k8s', '--no-headers', '-o',
                               'custom-columns=host:status.ingress[0].host'],
                              stdin=subprocess.DEVNULL,
                              stdout=subprocess.PIPE) as subproc:
            stdout_data = []
            while True:
                data = subproc.stdout.readline()
                if len(data) > 0:
                    stdout_data.append(data.strip().decode())
                else:
                    break
            if subproc.poll() != 0:
                efail("Unable to retrieve prometheus-k8s route")
            return 'https://%s' % "\n".join(stdout_data)
    except Exception as err:
        efail("Unable to retrieve prometheus-k8s route: %s" % err)

def get_prometheus_token():
    try:
        with subprocess.Popen(['oc', 'sa', 'get-token',
                               '-n', 'openshift-monitoring',
                               'prometheus-k8s'],
                              stdin=subprocess.DEVNULL,
                              stdout=subprocess.PIPE) as subproc:
            stdout_data = []
            while True:
                data = subproc.stdout.readline()
                if len(data) > 0:
                    stdout_data.append(data.strip().decode())
                else:
                    break
            if subproc.poll() != 0:
                efail("Unable to retrieve prometheus-k8s token")
            return 'Bearer %s' % "\n".join(stdout_data)
    except Exception as err:
        efail("Unable to retrieve prometheus-k8s token: %s" % err)


def generate_uuid():
    UUID = uuid.uuid4()
    print('UUID: %s' % UUID, file=sys.stderr)
    return str(UUID)


parser = argparse.ArgumentParser(description='Scrape data from Prometheus')
parser.add_argument('-u', '--url', '--prometheus-url', type=str, help='Prometheus URL', metavar='URL', default=get_prometheus_default_url())
parser.add_argument('-t', '--token', type=str, help='Prometheus authentication token', metavar='token', default=get_prometheus_token())
parser.add_argument('-m', '--metrics-profile', type=str, metavar='file', help='Metrics profile file or URL', default='metrics.yaml')
parser.add_argument('-j', '--json-format', help='Print JSON formatted output', action='store_true')
parser.add_argument('--json-from-command', help='Interpret command stdout as JSON', action='store_true')
parser.add_argument('--uuid', type=str, metavar='UUID', help='Index results by UUID (generate if not provided)', default=generate_uuid()),
parser.add_argument('command', metavar='command', help='command [args...]', type=str, nargs='*')
args = parser.parse_args()


urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
authorization = {}

if args.token != '':
    authorization['Authorization'] = args.token

prom = PrometheusConnect(url=args.url, disable_ssl=True, headers=authorization)

try:
    with open(args.metrics_profile, 'r') as metrics_yaml:
        yaml = yaml.safe_load(metrics_yaml)
except FileNotFoundError as err:
    efail('Cannot open metrics profile: %s' % err)
    sys.exit(1)

startTime = datetime.datetime.now()
startTime = startTime + datetime.timedelta(seconds = -1200)
chunkSize = datetime.timedelta(seconds=30)
stdout_data=[]
stderr_data=[]
try:
    with subprocess.Popen(args.command, stdin=subprocess.DEVNULL, stdout=subprocess.PIPE, stderr=subprocess.PIPE) as command:
        sel = selectors.DefaultSelector()
        sel.register(command.stdout, selectors.EVENT_READ)
        sel.register(command.stderr, selectors.EVENT_READ)
        while True:
            # Keep reading until we reach EOF on both channels.
            # command.poll() is not a good criterion because the process
            # might complete before everything has been read.
            foundSomething=False
            for key, _ in sel.select():
                data = key.fileobj.readline()
                if len(data) > 0:
                    foundSomething=True
                    data = data.decode().rstrip()
                    if key.fileobj is command.stdout:
                        stdout_data.append(data)
                    elif key.fileobj is command.stderr:
                        stderr_data.append(data)
            if not foundSomething:
                break
except BaseException as err:
    efail("Command failed: %s" % err)

json_output = None
if args.json_from_command:
    try:
        json_output = json.loads("\n".join(stdout_data))
    except json.decoder.JSONDecodeError as err:
        eprint("Cannot decode command output as JSON: %s" % err)

time.sleep(60)
endTime = datetime.datetime.now()

metric_results={}

for metric in yaml['metrics']:
    metric_data=[]
    if 'instant' not in metric or metric['instant'] is not True:
        metric_data = prom.custom_query_range(metric['query'], start_time=startTime, end_time=endTime,step=30)
    else:
        metric_data = prom.custom_query(metric['query'])
    name = metric['query']
    if 'metricName' in metric:
        name = metric['metricName']
    metric_results[name] = {
        'query': metric['query'],
        'name': name,
        'data': metric_data
    }

results = {
    'uuid': args.uuid,
    'command': args.command,
    'stdout': stdout_data,
    'stderr': stderr_data,
    'metrics': metric_results
}

if json is not None:
    results['results'] = json_output

if (args.json_format):
    print(json.dumps(results, indent=4))
else:
    print(results)
