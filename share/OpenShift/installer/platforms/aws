#!/bin/bash

# Copyright 2019 Robert Krawitz/Red Hat
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


################################################################
### AWS platform code					     ###
################################################################

declare -rg _____aws_default_domain=${AWS_DEFAULT_DOMAIN:-devcluster.openshift.com}
declare -rga _____aws_default_regions=(us-{east,west}-{1,2})

add_platform _____aws_dispatch

declare -arg _____aws_known_instance_types=(" X.General Purpose"
					    # ARM instances aren't useful...but soon enough will be
					    # a1.{medium,{,{,2,4}x}large}
					    # m6g.{medium,{,{,2,4,8,16,32,48,64}x}large}
					    m6i{,d}{,n}.{,{,2,4,8,12,16,24,32}x}large
					    m6a.{{,{,2,4,8,12,16,24,32,48xs}x}large,metal}
					    m5{,d}.{{,{,2,4,8,12,16,24}x}large,metal}
					    m5{a,n,dn}.{,{,2,4,8,12,16,24}x}large
					    m5ad.{,{,2,4,12,24}x}large
					    m5zn.{{,{,2,3,6,12}x}large,metal}
					    m4.{,{,2,4,10,16}x}large
					    " X.Burstable"
					    t{3,3a,2}.{nano,micro,small,medium,{,x,2x}large}
					    " X.Compute Optimized"
					    c4.{,{,2,4,8}x}large
					    c5.{{,{,2,4,9,12,18,24}x}large,metal}
					    c5a{,d}.{,{,2,4,8,12,16,24}x}large
					    c5d.{,{,2,4,9,18}x}large
					    c5n.{{,{,2,4,9,18}x}large,metal}
					    c6i{,n,d}.{{,{,2,4,8,12,16,24,32}x}large,metal}
					    c6a.{{,{,2,4,8,12,16,24,32,48}x}large,metal}
					    " X.Memory Optimized"
					    r4.{,{,2,4,8,16}x}large
					    r5{,d,b}.{{,{,2,4,8,12,16,24}x}large,metal}
					    r5{a,n,dn}.{,{,2,4,8,12,16,24}x}large
					    r5ad.{,{,2,4,12,24}x}large
					    r6i{,d}{,n}.{{,{,2,4,8,12,16,24,32}x}large,metal}
					    r6a.{,{,2,4,8,12,16,24,32,48}x}large
					    x1e.{,2,4,8,16,32}xlarge
					    x1.{16,32}xlarge
					    x2idn.{{16,32,32}xlarge,metal}
					    x2iedn.{{,2,4,8,16,32,32}xlarge,metal}
					    x2iezn.{{2,4,6,8,12}xlarge,metal}
					    " X.Single Thread Optimized"
					    z1d.{{,{,2,3,6,12}x}large,metal}
					    # High Memory are special dedicated-only hosts
					    " X.High Memory (special dedicated-only hosts)"
					    u-6tb1.{{56,112}xlarge,metal}
					    u-{9,12}tb1.{112xlarge,metal}
					    u-{18,24}tb1.metal
					    " X.Storage Optimized"
					    i4i.{{,{,2,4,8,16,32}x}large,metal}
					    i3.{{,{,2,4,8,16}x}large,metal}
					    i3en.{{,{,2,3,6,12,24}x}large,metal}
					    d{2,3}.{,2,4,8}xlarge
					    d3en.{,2,4,6,8,12}xlarge
					    h1.{2,4,8,16}xlarge
					    " X.GPU"
					    p4d.24xlarge
					    p3.{2,8,16}xlarge
					    p3dn.24xlarge
					    p2.{,8,16}xlarge
					    inf1.{,2,6,24}xlarge
					    inf2.{,2,8,24,48}xlarge
					    g4ad.{4,8,12}xlarge
					    g4dn.{{,2,4,8,12,16}xlarge,metal}
					    g3s.xlarge
					    g3.{4,8,16}xlarge
					    dl1.24xlarge
					    tm1.{2,32}xl
					    vb1.{3,6,24}xlarge
					    " X.HPC"
					    hpc6id.32xlarge
					    # FPGA instances are of no use for
					    # running OpenShift
					    # f1.{2,4,16}xlarge
					   )

function _____aws_validate() {
    # External variables, part of the API.
    # shellcheck disable=SC2154
    validate_instance_type "$worker_type" "$master_type" AWS master_type _____aws_split_instance "${_____aws_known_instance_types[@]}" <<'EOF'
Currently known AWS instance types.  Note that not all types are
available in all regions, and AWS may add additional types at
any time.  See https://aws.amazon.com/ec2/instance-types/
for current information about what instance types exist, and
https://aws.amazon.com/ec2/pricing/on-demand/ for information
about what instance types are available in a particular region.
EOF
}

function _____aws_split_instance() {
    local instance=$1
    if [[ $instance = "u-t"* ]] ; then
	echo " "
	echo "$instance"
    else
	local class=${instance%%.*}
	local subinstance=${instance#*.}
	echo "$class"
	echo "$subinstance"
    fi
}

function _____aws_default_install_type() {
    echo "${_____aws_default_regions[((RANDOM % ${#_____aws_default_regions[@]}))]}"
}

function _____aws_setup() {
    local region=${1#aws}
    region=${region#[-._]}
    # shellcheck disable=SC2155
    case "$region" in
	'')   export OPENSHIFT_INSTALL_AWS_REGION=$(_____aws_default_install_type) ;;
	1)    export OPENSHIFT_INSTALL_AWS_REGION=us-east-1 ;;
	2)    export OPENSHIFT_INSTALL_AWS_REGION=us-east-2 ;;
	3)    export OPENSHIFT_INSTALL_AWS_REGION=us-west-1 ;;
	4)    export OPENSHIFT_INSTALL_AWS_REGION=us-west-2 ;;
	5)    export OPENSHIFT_INSTALL_AWS_REGION=eu-west-2 ;;
	6)    export OPENSHIFT_INSTALL_AWS_REGION=eu-west-3 ;;
	7)    export OPENSHIFT_INSTALL_AWS_REGION=sa-east-1 ;;
	?*)   export OPENSHIFT_INSTALL_AWS_REGION=$region   ;;
    esac
}

function _____aws_help() {
    case "$1" in
	install_types)
	    cat <<\EOF
aws     (random US AWS zone)
  aws1  (aws us-east-1)
  aws2  (aws us-east-2)
  aws3  (aws us-west-1)
  aws4  (aws us-west-2)
  aws5  (aws eu-west-2)
  aws6  (aws eu-west-3)
  aws7  (aws sa-east-1)
  aws-* (specified AWS region by name)
EOF
	    ;;
	default_domain)
	    cat <<\EOF
For AWS: default is $_____aws_default_domain.
EOF
	    ;;
	options) ;;
	*)  ;;
    esac
}

function _____aws_instance() {
    if [[ -n "${1:-}" ]] ; then
	cat <<EOF

aws:
  type: "$1"
EOF
    fi
}

function _____aws_platform() {
    cat <<EOF
aws:
  region: $OPENSHIFT_INSTALL_AWS_REGION
EOF
}

function _____aws_base_domain() {
    echo "${install_domain:-$_____aws_default_domain}"
}

function _____aws_print_diagnostic() {
    case "$1" in
	_____aws_existing_resource_detected)
	    cat <<'EOF'
* [aws] Error message suggests that the installer tried to create a
  resource that already exists.  This resource needs to be tracked down
  and cleaned up.

EOF
	    return 1
	    ;;
	_____aws_bootstrap_failed)
	    cat <<'EOF'
* [aws] Bootstrap timed out.  This may indicate a network problem,
  an incompatibility between the machine instance type and RHCOS,
  a bug in the installer image, or similar.  It also suggests the
  possibility of authentication problems, including the possibility
  that your pull secret is invalid/expired.

EOF
	    ;;
    esac
}

function _____aws_diagnose() {
    case "$*" in
	*'Tried to create resource record set'*)
	    set_diagnostic _____aws_existing_resource_detected _____aws_print_diagnostic
	    ;;
	*'Bootstrap failed to complete'*'context deadline exceeded'*)
	    set_diagnostic _____aws_bootstrap_failed _____aws_print_diagnostic
	    ;;
    esac
}

function _____aws_dispatch() {
    local op="$1"
    shift
    case "$op" in
	base_domain)          _____aws_base_domain "$@"         ;;
	cleanup)              :					;;
	default_install_type) _____aws_default_install_type "$@";;
	diagnose)	      _____aws_diagnose "$@"		;;
	platform_help)        _____aws_help "$@"                ;;
	is_install_type)      [[ $1 = 'aws'* ]]			;;
	machine_cidr)         echo '10.0.0.0/16'		;;
	master)               _____aws_instance "$master_type"  ;;
	platform)             _____aws_platform "$@"            ;;
	postinstall)          :					;;
	replicas)             cmdline_replicas "$1" 3           ;;
	set_option)	      :					;;
	setup)                _____aws_setup "$@"               ;;
	supports_bastion)     true				;;
	validate)             _____aws_validate "$@"            ;;
	worker)               _____aws_instance "$worker_type"  ;;
	*)                    dispatch_unknown aws "$@"		;;
    esac
}
