#!/bin/bash

# Copyright 2019 Robert Krawitz/Red Hat
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


################################################################
### AWS platform code					     ###
################################################################

declare _aws_worker_type=
declare _aws_master_type=
declare -i _aws_create_bastion=1
declare -r _aws_default_domain=devcluster.openshift.com

add_platform _aws_dispatch
register_options aws_worker_type aws_master_type aws_create_bastion

declare -ar _aws_known_instance_types=("X.General Purpose"
				       # ARM instances aren't useful
				       # a1.{medium,{,{,2,4}x}large}
				       m5{,d}.{{,{,2,4,8,12,16,24}x}large,metal}
				       m5{a,n,dn}.{,{,2,4,8,12,16,24}x}large
				       m5ad.{,{,2,4,12,24}x}large
				       m4.{,{,2,4,10,16}x}large
				       "X.Burstable"
				       t{3,3a,2}.{nano,micro,small,medium,{,x,2x}large}
				       "X.Compute Optimized"
				       c4.{,{,2,4,8}x}large
				       c5.{{,{,2,4,9,12,18,24}x}large,metal}
				       c5d.{,{,2,4,9,18}x}large
				       c5n.{{,{,2,4,9,18}x}large,metal}
				       "X.Memory Optimized"
				       r4.{,{,2,4,8,16}x}large
				       r5{,d}.{{,{,2,4,8,12,16,24}x}large,metal}
				       r5{a,n,dn}.{,{,2,4,8,12,16,24}x}large
				       r5ad.{,{,2,4,12,24}x}large
				       x1e.{,2,4,8,16,32}xlarge
				       x1.{16,32}xlarge
				       "X.Single Thread Optimized"
				       z1d.{{,{,2,3,6,12}x}large,metal}
				       # High Memory are special dedicated-only hosts
				       # Y.u-t{6,9}tb1.metal
				       # Y.u-t{12,18,24}tb1.metal
				       "X.Storage Optimized"
				       i3.{{,{,2,4,8,16}x}large,metal}
				       i3en.{{,{,2,3,6,12,24}x}large,metal}
				       d2.{,2,4,8}xlarge
				       h1.{2,4,8,16}xlarge
				       "X.GPU"
				       p3.{2,8,16}xlarge
				       p3dn.24xlarge
				       p2.{,8,16}xlarge
				       g4dn.{{,2,4,8,12,16}xlarge,metal}
				       g3s.xlarge g3.{4,8,16}xlarge
				       # FPGA instances are of no use for
				       # running OpenShift
				       # f1.{2,4,16}xlarge
				     )

function _aws_validate() {
    validate_instance_type "$_aws_worker_type" "$_aws_master_type" AWS _aws_master_type _aws_split_instance "${_aws_known_instance_types[@]}" <<'EOF'
Currently known AWS instance types.  Note that not all types are
available in all regions, and AWS may add additional types at
any time.  See https://aws.amazon.com/ec2/instance-types/
for current information about what instance types exist, and
https://aws.amazon.com/ec2/pricing/on-demand/ for information
about what instance types are available in a particular region.
EOF
}

function _aws_split_instance() {
    local instance=$1
    local class=${instance%%.*}
    local subinstance=${instance#*.}
    echo "$class" "$subinstance"
}

function _aws_setup() {
    local region=${1#aws}
    region=${region#[-._]}
    case "$region" in
	1|'') export OPENSHIFT_INSTALL_AWS_REGION=us-east-1 ;;
	2)    export OPENSHIFT_INSTALL_AWS_REGION=us-east-2 ;;
	3)    export OPENSHIFT_INSTALL_AWS_REGION=us-west-1 ;;
	4)    export OPENSHIFT_INSTALL_AWS_REGION=us-west-2 ;;
	?*)   export OPENSHIFT_INSTALL_AWS_REGION=$region   ;;
    esac
}

function _aws_replicas() {
    cmdline_replicas "$1" 3
}

function _aws_default_install_type() {
    for a in _aws _aws2 _aws3 _aws4; do
	echo $a
    done | shuf --head-count 1
}

function _aws_help() {
    case "$1" in
	install_types)
	    cat <<\EOF
Default is random _aws zone.
aws     (aws us-east-1)
aws2    (aws us-east-2)
aws3    (aws us-west-1)
aws4    (aws us-west-2)
aws-*   (specified AWS region)
EOF
	    ;;
	options)
	    echo
	    cat <<EOF
AWS-specific cluster configuration:
  _aws_create_bastion  Create ssh bastion host (default=1)
  _aws_master_type     Type of master instance.
  _aws_worker_type     Type of worker instance.
    Use "list" with either to get a (known) list of instance types.
EOF
	    ;;
	default_domain)
	    cat <<\EOF
For AWS: default is $_aws_default_domain.
EOF
	    ;;
	*)  ;;
    esac
}

function _aws_master() {
    if [[ -n $_aws_master_type ]] ; then
	cat <<EOF

aws:
  type: "$_aws_master_type"
EOF
    fi
}

function _aws_worker() {
    if [[ -n $_aws_worker_type ]] ; then
	cat <<EOF

aws:
  type: "$_aws_worker_type"
EOF
    fi
}

function _aws_platform() {
    cat <<EOF
aws:
  region: $OPENSHIFT_INSTALL_AWS_REGION
EOF
}

function _aws_machine_cidr() {
    echo '10.0.0.0/16'
}

function _aws_base_domain() {
    echo "${install_domain:-$_aws_default_domain}"
}

function _aws_is_install_type() {
    [[ $1 = aws* ]]
}

function _aws_postinstall() {
    if (( _aws_create_bastion )) ; then
	do_create_bastion
    fi
}

function _aws_print_diagnostic() {
    case "$1" in
	'Tried to create resource record set')
	    cat <<'EOF'
* Error message suggests that the installer tried to create a resource
  that already exists.  This resource needs to be tracked down and
  cleaned up.

EOF
	    ;;
    esac
}

function _aws_diagnose() {
    case "$*" in
	'Tried to create resource record set')
	    set_diagnostic _aws_existing_resource_detected _aws_print_diagnostic
	    ;;
    esac
}

function _aws_set_option() {
    local option=$1
    local value=$2
    case "$option" in
	aws_worker_type)    _aws_worker_type=$value    ;;
	aws_master_type)    _aws_master_type=$value    ;;
	aws_create_bastion) _aws_create_bastion=$value ;;
	*)                  fatal "Unknown option $option in aws platform" ;;
    esac
}

function _aws_dispatch() {
    local op="$1"
    shift
    case "$op" in
	base_domain)          _aws_base_domain "$@"          ;;
	cleanup)              :                              ;;
	default_install_type) _aws_default_install_type "$@" ;;
	diagnose)	      _aws_diagnose "$@"	     ;;
	help)                 _aws_help "$@"                 ;;
	is_install_type)      _aws_is_install_type "$@"      ;;
	machine_cidr)         _aws_machine_cidr "$@"         ;;
	master)               _aws_master "$@"               ;;
	platform)             _aws_platform "$@"             ;;
	postinstall)          _aws_postinstall "$@"          ;;
	replicas)             _aws_replicas "$@"             ;;
	set_option)	      _aws_set_option "$@"	     ;;
	setup)                _aws_setup "$@"                ;;
	validate)             _aws_validate "$@"             ;;
	worker)               _aws_worker "$@"               ;;
	*)                    dispatch_unknown aws "$@"      ;;
    esac
}
