#!/bin/bash

# Copyright 2019 Robert Krawitz/Red Hat
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


################################################################
### AWS platform code					     ###
################################################################

declare -rg _____aws_default_domain=${AWS_DEFAULT_DOMAIN:-devcluster.openshift.com}
declare -rga _____aws_default_regions=(aws aws2 aws3 aws4)

add_platform _____aws_dispatch

declare -arg _____aws_known_instance_types=("X.General Purpose"
					    # ARM instances aren't useful
					    # a1.{medium,{,{,2,4}x}large}
					    m5{,d}.{{,{,2,4,8,12,16,24}x}large,metal}
					    m5{a,n,dn}.{,{,2,4,8,12,16,24}x}large
					    m5ad.{,{,2,4,12,24}x}large
					    m4.{,{,2,4,10,16}x}large
					    "X.Burstable"
					    t{3,3a,2}.{nano,micro,small,medium,{,x,2x}large}
					    "X.Compute Optimized"
					    c4.{,{,2,4,8}x}large
					    c5.{{,{,2,4,9,12,18,24}x}large,metal}
					    c5d.{,{,2,4,9,18}x}large
					    c5n.{{,{,2,4,9,18}x}large,metal}
					    "X.Memory Optimized"
					    r4.{,{,2,4,8,16}x}large
					    r5{,d}.{{,{,2,4,8,12,16,24}x}large,metal}
					    r5{a,n,dn}.{,{,2,4,8,12,16,24}x}large
					    r5ad.{,{,2,4,12,24}x}large
					    x1e.{,2,4,8,16,32}xlarge
					    x1.{16,32}xlarge
					    "X.Single Thread Optimized"
					    z1d.{{,{,2,3,6,12}x}large,metal}
					    # High Memory are special dedicated-only hosts
					    # Y.u-t{6,9}tb1.metal
					    # Y.u-t{12,18,24}tb1.metal
					    "X.Storage Optimized"
					    i3.{{,{,2,4,8,16}x}large,metal}
					    i3en.{{,{,2,3,6,12,24}x}large,metal}
					    d2.{,2,4,8}xlarge
					    h1.{2,4,8,16}xlarge
					    "X.GPU"
					    p3.{2,8,16}xlarge
					    p3dn.24xlarge
					    p2.{,8,16}xlarge
					    g4dn.{{,2,4,8,12,16}xlarge,metal}
					    g3s.xlarge g3.{4,8,16}xlarge
					    # FPGA instances are of no use for
					    # running OpenShift
					    # f1.{2,4,16}xlarge
					   )

function _____aws_validate() {
    validate_instance_type "$worker_type" "$master_type" AWS master_type _____aws_split_instance "${_____aws_known_instance_types[@]}" <<'EOF'
Currently known AWS instance types.  Note that not all types are
available in all regions, and AWS may add additional types at
any time.  See https://aws.amazon.com/ec2/instance-types/
for current information about what instance types exist, and
https://aws.amazon.com/ec2/pricing/on-demand/ for information
about what instance types are available in a particular region.
EOF
}

function _____aws_split_instance() {
    local instance=$1
    local class=${instance%%.*}
    local subinstance=${instance#*.}
    echo "$class"
    echo "$subinstance"
}

function _____aws_setup() {
    local region=${1#aws}
    region=${region#[-._]}
    case "$region" in
	1|'') export OPENSHIFT_INSTALL_AWS_REGION=us-east-1 ;;
	2)    export OPENSHIFT_INSTALL_AWS_REGION=us-east-2 ;;
	3)    export OPENSHIFT_INSTALL_AWS_REGION=us-west-1 ;;
	4)    export OPENSHIFT_INSTALL_AWS_REGION=us-west-2 ;;
	5)    export OPENSHIFT_INSTALL_AWS_REGION=eu-west-2 ;;
	6)    export OPENSHIFT_INSTALL_AWS_REGION=eu-west-3 ;;
	7)    export OPENSHIFT_INSTALL_AWS_REGION=sa-east-1 ;;
	?*)   export OPENSHIFT_INSTALL_AWS_REGION=$region   ;;
    esac
}

function _____aws_replicas() {
    cmdline_replicas "$1" 3
}

function _____aws_default_install_type() {
    echo ${_____aws_default_regions[((RANDOM % ${#_____aws_default_regions[@]}))]}
}

function _____aws_help() {
    case "$1" in
	install_types)
	    cat <<\EOF
Default is random aws US zone.
aws     (aws us-east-1)
aws2    (aws us-east-2)
aws3    (aws us-west-1)
aws4    (aws us-west-2)
aws5    (aws eu-west-2)
aws6    (aws eu-west-3)
aws7    (aws sa-east-1)
aws-*   (specified AWS region)
EOF
	    ;;
	default_domain)
	    cat <<\EOF
For AWS: default is $_____aws_default_domain.
EOF
	    ;;
	options) ;;
	*)  ;;
    esac
}

function _____aws_instance() {
    if [[ -n "${1:-}" ]] ; then
	cat <<EOF

aws:
  type: "$1"
EOF
    fi
}

function _____aws_platform() {
    cat <<EOF
aws:
  region: $OPENSHIFT_INSTALL_AWS_REGION
EOF
}

function _____aws_machine_cidr() {
    echo '10.0.0.0/16'
}

function _____aws_base_domain() {
    echo "${install_domain:-$_____aws_default_domain}"
}

function _____aws_print_diagnostic() {
    case "$1" in
	'Tried to create resource record set')
	    cat <<'EOF'
* Error message suggests that the installer tried to create a resource
  that already exists.  This resource needs to be tracked down and
  cleaned up.

EOF
	    ;;
    esac
}

function _____aws_diagnose() {
    case "$*" in
	'Tried to create resource record set')
	    set_diagnostic _____aws_existing_resource_detected _____aws_print_diagnostic
	    ;;
    esac
}

function _____aws_dispatch() {
    local op="$1"
    shift
    case "$op" in
	base_domain)          _____aws_base_domain "$@"         ;;
	cleanup)              :					;;
	default_install_type) _____aws_default_install_type "$@";;
	diagnose)	      _____aws_diagnose "$@"		;;
	platform_help)        _____aws_help "$@"                ;;
	is_install_type)      [[ $1 = 'aws'* ]]			;;
	machine_cidr)         _____aws_machine_cidr "$@"        ;;
	master)               _____aws_instance "$master_type"  ;;
	platform)             _____aws_platform "$@"            ;;
	postinstall)          :					;;
	replicas)             _____aws_replicas "$@"            ;;
	set_option)	      :					;;
	setup)                _____aws_setup "$@"               ;;
	supports_bastion)     true				;;
	validate)             _____aws_validate "$@"            ;;
	worker)               _____aws_instance "$worker_type"  ;;
	*)                    dispatch_unknown aws "$@"		;;
    esac
}
