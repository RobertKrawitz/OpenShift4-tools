#!/bin/bash

# Copyright 2019 Robert Krawitz/Red Hat
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

################################################################
### libvirt platform code				     ###
################################################################

add_platform _____libvirt_dispatch

declare -ig _____libvirt_created_proxy=0
declare -ig _____libvirt_force_standard_installer=0
declare -ig _____libvirt_found_api_up=0
declare -rg _____libvirt_server_ipaddr=192.168.126.1
declare -rg _____libvirt_apps_ipaddr=192.168.126.51
register_options libvirt_std_install

function _____libvirt_host_disk_space() {
    if [[ -d /var/lib/libvirt/openshift-images ]] ; then
	df /var/lib/libvirt/openshift-images/ | tail -1 |awk '{print $4}'
    else
	df /var/lib/libvirt/ | tail -1 |awk '{print $4}'
    fi
}

function _____libvirt_domainname() {
    echo "${install_domain:-$OPENSHIFT_INSTALL_BASE_DOMAIN}"
}

function _____libvirt_apiserver_on_localhost() {
    local host
    local has
    local address
    local ipaddr
    # shellcheck disable=SC2034
    while read -r host has address ipaddr ; do
	if [[ $ipaddr = 127.0.0.1 ]] ; then
	    return 0
	fi
    done <<< "$(host "api.$(_____libvirt_domainname)")"
    return 1
}

function _____libvirt_apiserver_in_etc_hosts() {
    grep -q "^127.0.0.1[ 	]*api.$(_____libvirt_domainname)" /etc/hosts
}

function _____libvirt_find_dnsmasq() {
    local -a files=(/etc/NetworkManager/dnsmasq.d/*.conf)
    if [[ -z "${files[*]}" ]] ; then
	return 2
    else
	local file=
	local fn=
	while read -r fn ; do
	    [[ -z "$file" ]] || return 3
	    file=$fn
	done <<< "$(grep -l "^server=/$OPENSHIFT_INSTALL_BASE_DOMAIN/$_____libvirt_server_ipaddr" "/etc/NetworkManager/dnsmasq.d/"*.conf /dev/null)"
	[[ -n "$file" ]] || return 4
	echo "$file"
	grep -q "^address=/.apps.$OPENSHIFT_INSTALL_BASE_DOMAIN/$_____libvirt_apps_ipaddr" "$file"
    fi
}

function _____libvirt_dnsmasq_contents() {
    cat <<EOF
server=/$OPENSHIFT_INSTALL_BASE_DOMAIN/$_____libvirt_server_ipaddr
address=/.apps.$OPENSHIFT_INSTALL_BASE_DOMAIN/$_____libvirt_apps_ipaddr
EOF
}

function _____libvirt_validate() {
    # shellcheck disable=SC2155
    local -i space=$(_____libvirt_host_disk_space)
    space=$((space / 1024 / 1024))
    # shellcheck disable=SC2155
    local ipaddr_file="$(_____libvirt_find_dnsmasq)"
    _____libvirt_find_dnsmasq >/dev/null 2>&1
    case "$?" in
	1)
	    cat <<EOF
*** WARNING: Your DNS masquerade file
*** ($ipaddr_file)
*** does not contain an entry for the apps addres.  It should
*** contain the following:

$(_____libvirt_dnsmasq_contents)

*** Please update this file accordingly and run

$ sudo systemctl restart NetworkManager

*** and retry.

EOF
	    ;;
	2|4)
	    cat <<EOF
*** WARNING: Please create a dnsmasq entry in 
*** /etc/NetworkManager/dnsmasq.d/$OPENSHIFT_INSTALL_BASE_DOMAIN.conf
*** containing the following:

$(_____libvirt_dnsmasq_contents)

*** Please run

$ sudo systemctl restart NetworkManager

*** and retry.

EOF
	    ;;
	3)
	    cat <<EOF
*** WARNING: You have multiple dnsmasq config files in
*** /etc/NetworkManager/dnsmasq.d defining $OPENSHIFT_INSTALL_BASE_DOMAIN.
*** Please ensure that you have only one such file.

EOF
	    ;;
    esac
    if (( space < 20 )) ; then
	cat <<EOF
*** WARNING: your host image storage (/var/lib/libvirt/openshift-images)
*** has only $space GiB available.  Recommend a bare minimum of 20 GiB
*** and preferably 65 GiB.

EOF
    elif (( space < 65 )) ; then
	cat <<EOF
*** Note: your host image storage (/var/lib/libvirt/openshift-images)
*** has only $space GiB available.  Recommend at least 65 GiB available.

EOF
    fi
    if _____libvirt_apiserver_in_etc_hosts ; then
	cat <<EOF
*** WARNING: the apiserver is on localhost (127.0.0.1).
*** This is assigned in /etc/hosts, probably because older versions of
*** the installer did not set up DNS correctly.  This will cause your
*** installation to fail.  Please remove this entry.

EOF
    fi
}

function _____libvirt_find_pool() {
    local found_pool=
    local pool=
    local ignore=
    while read -r pool ignore ; do
	if [[ -n "${OPENSHIFT_INSTALL_CLUSTER_NAME}" && $pool = "${OPENSHIFT_INSTALL_CLUSTER_NAME}"* ]] ; then
	    if [[ -z $found_pool ]] ; then
		found_pool=$pool
	    else
		echo "Non-unique matching pool names detected: $found_pool and $pool"
		return 1
	    fi
	    return 0
	fi
    done <<< "$(virsh --quiet pool-list)"
    # Too dangerous to return default if we don't find the right pool.
    # We could wipe everything out.
    echo "$found_pool"
}

function _____libvirt_find_default_domain() {
    local -a files
    readarray -t files <<< "$(find /etc/NetworkManager/dnsmasq.d/ -type f -name '*.conf' -print)"
    [[ -z "${files[*]}" ]] && fatal "No dnsmasq files in /etc/NetworkManager/dnsmasq.d"
    local dnsmasq_domain=
    for f in "${files[@]}" ; do
	# shellcheck disable=SC2155
	local data=$(grep "^server=" "$f")
	data=${data#*/}
	data=${data%/*}
	[[ -n $dnsmasq_domain && $data != "$dnsmasq_domain" ]] &&
	    fatal "Multiple domains found in /etc/NetworkManager/dnsmasq.d; pick one"
	[[ -n $data ]] && dnsmasq_domain=$data
    done
    [[ -z $dnsmasq_domain ]] && fatal "No dnsmasq files in /etc/NetworkManager/dnsmasq.d"
    echo "$dnsmasq_domain"
}

function _____libvirt_setup() {
    export OPENSHIFT_INSTALL_LIBVIRT_URI="qemu+tcp://192.168.122.1/system"
    if [[ $_____libvirt_force_standard_installer = 0 ||
	      ($query -eq 0 && $install_version = latest_default) ]] ; then
	install_version=
	force_local_tools=1
	ext_installer=
	echo "*** Using local installer with libvirt"
    fi
    generate_manifest=1
}

function _____libvirt_base_domain() {
    echo "${install_domain:-$(_____libvirt_find_default_domain)}"
}

function _____libvirt_platform() {
    # maipo is channel, not base.
    #local baseURL='https://releases-rhcos.svc.ci.openshift.org/storage/releases/maipo'
    #local install_version=${install_version:-"$(curl --silent "$baseURL/builds.json" | "$JQ" -r '.builds[0]')"}
    cat <<EOF
libvirt:
  URI: $OPENSHIFT_INSTALL_LIBVIRT_URI
  network:
    if: tt0
EOF
}

function _____libvirt_volume_present() {
    local pool=$1
    local vol=$1
    local v
    for v in $(virsh --quiet vol-list --pool "$pool" |awk '{print $1}') ; do
	[[ $v = "$vol" ]] && return 0
    done
    return 1
}

function _____libvirt_delete_volume() {
    local pool=$1
    shift
    local vol
    for vol in "$@" ; do
	if _____libvirt_volume_present "$vol" ; then
	    echo "Deleting volume $vol"
	    virsh vol-delete --pool "$pool" "$vol"
	fi
    done
}

function _____libvirt_destroy_net() {
    local net
    for net in "$@" ; do
	if virsh --quiet net-list --all |awk '{print $1}' |grep -q "$net" ; then
	    echo "Destroying net $net"
	    virsh net-destroy "$net"
	    virsh net-undefine "$net"
	fi
    done
}

function _____libvirt_destroy_node() {
    local pool=$1
    shift
    local node
    for node in "$@" ; do
	if virsh --quiet list --all |awk '{print $2}' |grep -q "$node" ; then
	    echo "Destroying $node"
	    virsh destroy "$node"
	    virsh undefine "$node"
	    _____libvirt_delete_volume "$pool" "$node"
	fi
    done
}

# See https://github.com/openshift/installer/issues/411#issuecomment-446084083
function _____libvirt_run_proxy() {
    # The proxy has a bad habit of dying every now and then.
    while : ; do
	# It's simply too noisy.
	${OC} -n openshift-ingress port-forward svc/router-internal-default 443 >/dev/null 2>&1
	# If we die by signal, stop.
	(( $? >= 128 )) && break
    done
}

function _____libvirt_cleanup() {
    exec 3>&2 2>/dev/null
    if (( _____libvirt_created_proxy )) ; then
	kill -9 %_____libvirt_run_proxy
	wait %_____libvirt_run_proxy
    fi
    exec 2>&3 3>&-

    # shellcheck disable=SC2155
    local cluster_name=$(virsh --quiet net-list | awk '{print $1}' | grep "^$OPENSHIFT_INSTALL_CLUSTER_NAME")
    [[ -z $cluster_name ]] && return
    # shellcheck disable=SC2155
    local pool=$(_____libvirt_find_pool)
    [[ -z $pool ]] && return
    if virsh pool-info  "$pool" >/dev/null 2>&1 ; then
	local ignore
	local volume
	local net
	local node
	echo -n "Destroying workers..."
	while read -r node ; do
	    if [[ $node = "${cluster_name}-worker-"* ]] ; then
		_____libvirt_destroy_node "$pool" "$node"
	    fi
	done <<< "$(virsh list --name)"
	_____libvirt_destroy_net "$cluster_name"
	while read -r net ignore ; do
	    if [[ $net = "$cluster_name"* ]] ; then
		_____libvirt_destroy_net "$net"
	    fi
	done <<< "$(virsh --quiet net-list)"
	_____libvirt_destroy_node "$pool" "${cluster_name}-bootstrap" "${cluster_name}-master-0"
	# shellcheck disable=SC2034
	while read -r volume ignore ; do
	    if [[ $volume = "$cluster_name"* ]] ; then
		_____libvirt_delete_volume "$pool" "$volume"
	    fi
	done <<< "$(virsh --quiet vol-list --pool "$pool")"
	if [[ $pool = "$OPENSHIFT_INSTALL_CLUSTER_NAME"* ]] ; then
	    virsh pool-delete "$pool"
	fi
    fi
}

function _____libvirt_preinstall() {
    # Don't use edit_manifest here to allow user another shot at it.
    if [[ -f "$srcdir/$install_dir/manifests/cluster-ingress-02-config.yml" ]] ; then
	sed -i "s/${OPENSHIFT_INSTALL_CLUSTER_NAME}\.//" "$srcdir/$install_dir/manifests/cluster-ingress-02-config.yml"
    else
	echo "*** Warning: can't find cluster ingress manifest file $srcdir/$install_dir/manifests/cluster-ingress-02-config.yml"
    fi
}

function _____libvirt_postinstall() {
    (( ! wait_for_complete )) && return
    echo "Waiting for DNS to come on line..."
    "${___topdir:-}waitfor-pod" -r 10 dns-default
    echo "Waiting for router to come on line..."
    "${___topdir:-}waitfor-pod" -r 10 router-default
    # See https://github.com/openshift/installer/issues/411#issuecomment-445202069
    echo "Creating route proxy"
    if getcap -vr "${OC}" | grep -q "cap_net_bind_service+eip" ; then
	echo "Enabling bind to privileged port for ${OC}, may need sudo password"
	sudo setcap CAP_NET_BIND_SERVICE=+eip "${OC}"
    fi
    _____libvirt_run_proxy 2>&1 |grep -v 'Setting up router connection for 443' &
    _____libvirt_created_proxy=1
}

function _____libvirt_help() {
    case "$1" in
	install_types)
	    cat <<\EOF
libvirt
EOF
	    ;;
	default_domain)
	    cat <<\EOF
For libvirt: default is taken from a unique entry
    in /etc/NetworkManager/dnsmasq.d, if available.
EOF
	    ;;
	options)
	    cat <<EOF

For libvirt:
  libvirt_std_install Use the standard installer rather than local
EOF
	    ;;
	*)  ;;
    esac
}

function _____libvirt_print_diagnostic() {
    local retval=0
    case "$1" in
	_____libvirt_api_plugin_incompatibility_detected)
	    cat <<'EOF'
* [libvirt] Error message suggests a stray 'terraform-provider-libvirt'
  binary. Please remove all files of that name from your home directory and
  try again.

EOF
	    ;;
	_____libvirt_no_platform)
	    cat <<'EOF'
* [libvirt] The installer version you are using does not support libvirt.
  Please ensure that you are using the local installer; also use
  --rebuild if necessary to ensure that your local version is built
  correctly.

EOF
	    retval=1
	    ;;
	_____libvirt_socket_fail)
	    cat <<'EOF'
* [libvirt] The installer is unable to talk to the libvirt daemon, so it
  cannot create infrastructure:

  + Ensure that the lines

        listen_tls = 0
        listen_tls = 1

    are present in /etc/libvirt/libvirtd.conf.

  + Ensure that the line

        LIBVIRTD_ARGS="--listen"

    are present in /etc/sysconfig/libvirtd (or equivalent).

  + In newer versions of libvirtd and systemd (such as on Fedora 31),
    socket creation is handled via systemd rather than libvirtd listening
    directly.  If installation started failing across an OS upgrade,
    this is a likely cause.  To remedy:

        % sudo systemctl stop libvirtd.service
        % sudo systemctl enable libvirtd-tcp.socket
        % sudo systemctl start libvirtd-tcp.socket
        % sudo systemctl start libvirtd.service

EOF
	    retval=1
	    ;;
	_____libvirt_bootstrap_fail)
	    # shellcheck disable=SC2155
	    local -i space=$(_____libvirt_host_disk_space)
	    # Arbitrary, but this probably indicates that we're at least very
	    # low on disk apce"
	    if (( space < 131072 )) ; then
		cat <<EOF
* [libvirt] Your libvirt storage on /var/lib/libvirt/openshift-images/
  is low on disk space ($space MiB) or full.

  Please ensure that you have at least 65 GB of free disk space.

EOF
	    fi
	    if ((! _____libvirt_found_api_up )) ; then
		cat <<EOF
* [libvirt] The apiserver did not come up.

EOF
	    fi
	    # shellcheck disable=SC2155
	    local ipaddr_file="$(_____libvirt_find_dnsmasq)"
	    _____libvirt_find_dnsmasq >/dev/null 2>&1
	    local -i ipaddr_status=$?
	    case "$ipaddr_status" in
		1)
		    cat <<EOF
* [libvirt] Your DNS masquerade file ($ipaddr_file)
  does not contain an entry for the apps addres.  It should
  contain the following:

$(_____libvirt_dnsmasq_contents)

  Please update this file accordingly and run

$ sudo systemctl restart NetworkManager

EOF
		    retval=1
		    ;;
		2|4)
		    cat <<EOF
* [libvirt] Please create a dnsmasq entry in 
  /etc/NetworkManager/dnsmasq.d/$OPENSHIFT_INSTALL_BASE_DOMAIN.conf
  containing the following:

$(_____libvirt_dnsmasq_contents)

  Please run

$ sudo systemctl restart NetworkManager

EOF
		    retval=1
		    ;;
		3)
		    cat <<EOF
* [libvirt] You have multiple dnsmasq config files in
  /etc/NetworkManager/dnsmasq.d defining $OPENSHIFT_INSTALL_BASE_DOMAIN.
  Please ensure that you have only one such file.

EOF
		    retval=1
		    ;;
	    esac

	    if _____libvirt_api_on_localhost ; then
		cat <<EOF
* [libvirt] The apiserver host (api.$(_____libvirt_domainname))
  has address 127.0.0.1 assigned to it.

EOF

		if _____libvirt_apiserver_in_etc_hosts ; then
		    cat <<EOF
  This is assigned in /etc/hosts, probably because older versions of the
  installer did not set up DNS correctly.  Please remove this entry.

EOF
		fi
	    # There could be other problems also in some cases.
	    return $retval
	    fi
	    ;;
    esac

}

function _____libvirt_diagnose() {
    case "$*" in
	*'Tried to create resource record set'*)
	    set_diagnostic _____libvirt_api_plugin_incompatibility_detected _____libvirt_print_diagnostic
	    ;;
	*"must specify one of the platforms"*)
	    set_diagnostic _____libvirt_no_platform _____libvirt_print_diagnostic
	    ;;
	*"unable to connect to server at '192.168.122.1:16509"*)
	    set_diagnostic _____libvirt_socket_fail _____libvirt_print_diagnostic
	    ;;
	*"context deadline exceeded"*)
	    set_diagnostic _____libvirt_bootstrap_fail _____libvirt_print_diagnostic
	    ;;
	*"API v*up")
	    _____libvirt_found_api_up=1
	    ;;
    esac
}

function _____libvirt_set_option() {
    local option=$1
    # local value=$2
    case "$option" in
	libvirt_std_install) _____libvirt_force_standard_installer=1 ;;
	*)              fatal "Unknown option $option in libvirt platform" ;;
    esac
}

function _____libvirt_dispatch() {
    local op="$1"
    shift
    case "$op" in
	base_domain)          _____libvirt_base_domain "$@"		;;
	cleanup)              _____libvirt_cleanup "$@"			;;
	default_install_type) echo libvirt				;;
	diagnose)	      _____libvirt_diagnose "$@"		;;
	platform_help)        _____libvirt_help "$@"			;;
	is_install_type)      [[ $1 = libvirt ]]			;;
	machine_cidr)         echo '192.168.126.0/24'			;;
	master)               :						;;
	platform)             _____libvirt_platform "$@"		;;
	postinstall)          _____libvirt_postinstall "$@"		;;
	preinstall)	      _____libvirt_preinstall "$@"		;;
	replicas)             cmdline_replicas "$1" 1			;;
	set_option)	      libvirt_set_option "$@"			;;
	setup)                _____libvirt_setup "$@"			;;
	supports_bastion)     false					;;
	validate)             _____libvirt_validate "$@"		;;
	worker)               :						;;
	*)                    dispatch_unknown libvirt "$@"		;;
    esac
}
