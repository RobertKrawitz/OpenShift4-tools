#!/bin/bash

# Copyright 2019-2022 Robert Krawitz/Red Hat
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

################################################################
# Files workload
################################################################

declare -ig ___file_size=1024
declare -ig ___file_block_size=0
declare -ig ___file_dirs_per_volume=1
declare -ig ___files_per_dir=1

function _createContainersFilesYAML() {
    local namespace=$1
    local instance=$2
    local secretCount=$3
    local -i replicas=$4
    local -i containersPerPod=$5
    local log_host=${6:-}
    local -i log_port=${7:-0}
    local -i container
    local syncService=
    local syncPortNum=
    local -i file_blocks=$((___file_size/___file_block_size))
    IFS=: read -r syncService syncPortNum <<< $(getSync)
    # shellcheck disable=1340
    for container in $(seq 0 $((containersPerPod - 1))) ; do
	# shellcheck disable=2030
	cat <<EOF
- name: "c${container}"
  imagePullPolicy: $imagePullPolicy
  image: "$containerImage"
$(indent 2 containerResourcesYAML)
  env:
  - name: VERBOSE
    value: "$verbose"
$(indent 2 bootstrapCommandYAML files.pl)
  - "$namespace"
  - "c${container}"
  - "$basetime"
  - "$baseoffset"
  - "$(ts)"
  - "$poddelay"
  - "$podsleeptime"
  - "$syncService"
  - "$syncPortNum"
  - "$___file_dirs_per_volume"
  - "$___files_per_dir"
  - "$___file_block_size"
  - "$file_blocks"
  - "$processes_per_pod"
  - "$log_host"
  - "$log_port"
$(tmp_volume_paths=("${volume_mount_paths[@]/%/\"}"); IFS=$'\n'; echo "${tmp_volume_paths[*]/#/  - \"}")
$(emptydirs=("${emptydirs[@]/%/\"}"); IFS=$'\n'; echo "${emptydirs[*]/#/  - \"}")
$(indent 2 volumeMountsYAML "$namespace" "$instance" "$secretCount")
EOF
    done
}

function _createFilesDeployment() {
    local namespace=$1
    local instance=$2
    local secretCount=$3
    local -i replicas=$4
    if [[ $deploymentType = pod ]] ; then
	local -i replica=0
	while (( replica++ < replicas )) ; do
	    local name="${namespace}-files-${instance}-${replica}"
	    createObject -n "$namespace" "$name"  <<EOF
apiVersion: v1
kind: Pod
metadata:
  name: $name
$(indent 2 namespaceYAML "$namespace")
$(indent 2 privilegeYAML)
  selector:
    matchLabels:
      app: ${namespace}-files-${instance}
$(indent 2 standardLabelsYAML files "$namespace" "$instance" 1)
$(createSpec _createContainersFilesYAML "$@")
  restartPolicy: Never
EOF
	done
    else
	local name="${namespace}-files-${instance}"
	createObject -n "$namespace" "$name" <<EOF
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${namespace}-files-$instance
$(indent 2 namespaceYAML "$namespace")
$(indent 2 privilegeYAML)
$(indent 2 standardLabelsYAML)
spec:
  replicas: $replicas
  selector:
    matchLabels:
      app: ${namespace}-files-$instance
  strategy:
    type: RollingUpdate
  template:
    metadata:
$(indent 2 standardLabelsYAML files "$namespace" "$instance" 1)
$(indent 4 createSpec _createContainersFilesYAML "$@")
EOF
    fi
}

function createDeploymentFiles() {
    local namespace=$1
    local count=${2:-1}
    local secretCount=${3:-1}
    local replicas=${4:-1}
    local containersPerPod=${5:-1}
    local log_host=${6:-}
    local -i log_port=${7:-0}
    local -i instance
    createSyncServiceIfNeeded "$namespace" 4 "$((containersPerPod * processes_per_pod * replicas * count))"
    for instance in $(seq $firstDeployment $((count + firstDeployment - 1))) ; do
	_createFilesDeployment "$namespace" "$instance" "$secretCount"  "$replicas" "$containersPerPod" "$log_host" "$log_port"
    done
}

function calculateLogsRequiredFiles() {
    local -i namespaces=$1
    local -i depsPerNamespace=${2:-1}
    local -i replicas=${3:-1}
    local -i containersPerPod=${4:-1}
    echo $((namespaces * containersPerPod * processes_per_pod * replicas * depsPerNamespace))
}

function listConfigMapsFiles() {
    cat <<EOF
${__libdir__}/files.pl
${__libdir__}/sync.pl
EOF
}

function helpOptionsFiles() {
    cat <<'EOF'
    Using Files:
       --dirs-per-volume=N
                        Create the specified number of directories per volume.
                        Default 1.
       --files-per-dir=N
                        Create the specified number of files per directory.
       --file-size=N
                        Each file should be of the specified size.
                        Sizes may be in bytes, [KMGT]iB, or [KMGT]B.
       --file-block-size=N
                        Write files using the specified I/O chunk size.
                        If unspecified, it defaults to the file size.
                        This should be a divisor of the file size; if not,
                        the results are unspecified.
EOF
}

function documentFiles() {
    cat <<'EOF'
* files: a simple filesystem stressor that creates and removes a large
  number of files.
EOF
}

function processOptionsFiles() {
    local opt
    local -a unknown_opts=()
    for opt in "$@" ; do
	read -r noptname1 noptname optvalue <<< $(parse_option "$opt")
	case "$noptname1" in
	    dirspervolume)	___file_dirs_per_volume=$optvalue		;;
	    filesperdir)	___files_per_dir=$optvalue			;;
	    fileblocksize)	___file_block_size=$(parse_size $optvalue)	;;
	    filesize)		___file_size=$(parse_size $optvalue)		;;
	    *) 			unknown_opts+=("$noptname ($noptname1)") ;;
	esac
    done
    if [[ -n "${unknown_opts[*]:-}" ]] ; then
	help "${unknown_opts[@]}"
    fi
    if (( ___file_block_size <= 0)) ; then
	___file_block_size=___file_size
    fi
}

function supportsReportingFiles() {
    :
}

function reportOptionsFiles() {
    cat <<EOF
"dirspervolume": $___file_dirs_per_volume,
"filesperdir": $___files_per_dir,
"fileblocksize": $___file_block_size,
"filesize": $___file_size
EOF
}

register_workload Files dispatch_generic file
