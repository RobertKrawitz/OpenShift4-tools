#!/bin/bash

# Copyright 2019-2022 Robert Krawitz/Red Hat
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

################################################################
# Client/server workload
################################################################

declare -ig ___msg_size=32768

function server_server_arglist() {
    local mk_args_func="$1"; shift
    local replicas=$4
    "$mk_args_func" "$port" "$___msg_size" "$(ts)" "$((containers_per_pod * replicas))"
}

function server_client_arglist() {
    local mk_args_func="$1"; shift
    local namespace=$1
    local instance=$2
    if [[ $target_data_rate != 0 && $target_data_rate != '' && $workload_run_time_max -eq 0 && bytes_transfer_max -eq 0 ]] ; then
	bytes_transfer=$default_bytes_transfer
	bytes_transfer_max=$default_bytes_transfer
    fi
    "$mk_args_func" "svc-${namespace}-server-server-$instance" "$port" "$target_data_rate" "$bytes_transfer" \
		    "$bytes_transfer_max" "$___msg_size" "$workload_run_time" "$workload_run_time_max"
}

function server_create_deployment() {
    local namespace=$1
    local count=${2:-1}
    local secret_count=${3:-1}
    local replicas=${4:-1}
    local containers_per_pod=${5:-1}
    local -i instance
    create_sync_service_if_needed "$namespace" 2 "$((containers_per_pod * replicas * count))"

    for instance in $(seq $first_deployment $((count + first_deployment - 1))) ; do
	create_service "$namespace" "${namespace}-server-server-${instance}" "$port"
	create_standard_deployment -w server-server -p -c server -d single_pod -e server.pl \
				   -A "$(create_affinity_yaml ${namespace}-server-client-${instance})" \
				   -a server_server_arglist \
				   "$namespace" "$instance" "$secret_count" "$replicas" 1
	create_standard_deployment -w server-client -e client.pl \
				   -A "$(create_affinity_yaml ${namespace}-server-server-${instance})" \
				   -a server_client_arglist \
				   "$namespace" "$instance" "$secret_count" "$replicas" "$containers_per_pod"
    done
}

function server_list_configmaps() {
    cat <<EOF
${__podfile_dir__}/client.pl
${__podfile_dir__}/server.pl
EOF
}

function server_calculate_logs_required() {
    local -i namespaces=$1
    local -i deps_per_namespace=${2:-1}
    local -i replicas=${3:-1}
    local -i containers_per_pod=${4:-1}
    echo $((namespaces * containers_per_pod * replicas * deps_per_namespace))
}

function server_help_options() {
    cat <<'EOF'
    Client/server Options:
       --msgsize       Message size in data transfer
       --pin_node=server=<node>
                       Specify node to which the server is bound.
EOF
}

function server_document() {
    cat <<'EOF'
* server: a client-server workload with optional bidirectional data
  trasfer, optionally at a specified data rate.
EOF
}

function server_process_options() {
    local opt
    local -a unknown_opts=()
    local ftest
    for opt in "$@" ; do
	read -r noptname1 noptname optvalue <<< "$(parse_option "$opt")"
	case "$noptname1" in
	    msgsize) ___msg_size=$optvalue ;;
	    *) unknown_opts+=("$noptname ($noptname1)")	;;
	esac
    done
    if [[ -n "${unknown_opts[*]:-}" ]] ; then
	help "${unknown_opts[@]}"
    fi
    if (( ___msg_size <= 0 )) ; then
	fatal "Message size must be positive, exiting!"
    fi
}

function server_supports_reporting() {
    echo "server_supports_reporting" 1>&2
    :
}

function server_report_options() {
    cat <<EOF
"msg_size": $___msg_size
EOF
}

register_workload server
