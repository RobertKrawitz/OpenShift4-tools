#!/bin/bash

# Copyright 2019-2022 Robert Krawitz/Red Hat
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

################################################################
# Client/server workload
################################################################

declare -ig ___msg_size=32768

function _create_server_container_yaml() {
    local namespace=$1
    local instance=$2
    local secret_count=$3
    local expected_clients=$4
    cat <<EOF
- name: server
  image: "$container_image"
  imagePullPolicy: $image_pull_policy
$(indent 2 container_standard_auxiliary_yaml)
  ports:
  - containerPort: $port
$(indent 2 bootstrap_command_yaml server.pl)
$(indent 2 c_arg "--basetime" "$basetime")
$(indent 2 c_arg "--baseoffset" "$baseoffset")
$(indent 2 c_arg "--port" "$port")
$(indent 2 c_arg "--container" "${namespace}-${instance}-server")
$(indent 2 c_arg "--msgsize" "$___msg_size")
$(indent 2 c_arg "--crtime" "$(ts)")
$(indent 2 c_arg "--expected_clients" "$expected_clients")
$(indent 2 volume_mounts_yaml "$namespace" "$instance" "$secret_count")
EOF
}

function _create_server_deployment() {
    local namespace=$1
    local instance=$2
    local secret_count=$3
    local name=${namespace}-${instance}-server
    if [[ $deployment_type = pod ]] ; then
	create_object -n "$namespace" "$name" <<EOF
apiVersion: v1
kind: Pod
metadata:
  name: "$name"
$(indent 2 standard_all_metadata_yaml "$namespace" server)
  selector:
    matchLabels:
      app: ${namespace}-${instance}
$(indent 2 standard_labels_yaml server "$namespace" "$instance")
$(create_spec -c server _create_server_container_yaml "$@")
  restartPolicy: Never
EOF
    else
	create_object -n "$namespace" "$name" <<EOF
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "$name"
$(indent 2 standard_deployment_metadata_yaml "$namespace" server)
$(indent 2 standard_labels_yaml)
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ${namespace}-$instance
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
$(indent 6 standard_labels_yaml server "$namespace" "$instance")
$(indent 6 standard_pod_metadata_yaml "$namespace" server)
$(indent 4 create_spec -c server _create_server_container_yaml "$@")
EOF
    fi
}

function _create_client_container_yaml() {
    local namespace=$1
    local instance=$2
    local secret_count=$3
    local containers_per_pod=$5
    local log_host=$6
    local log_port=$7
    local -i container
    local sync_service=
    local sync_port_num=
    IFS=: read -r sync_service sync_port_num <<< $(get_sync)
    if [[ $target_data_rate != 0 && $target_data_rate != '' && $workload_run_time_max -eq 0 && bytes_transfer_max -eq 0 ]] ; then
	bytes_transfer=$default_bytes_transfer
	bytes_transfer_max=$default_bytes_transfer
    fi
    for container in $(seq 0 $((containers_per_pod - 1))) ; do
	cat <<EOF
- name: c${container}
  image: "$container_image"
  imagePullPolicy: $image_pull_policy
$(indent 2 container_standard_auxiliary_yaml)
  env:
  - name: VERBOSE
    value: "$verbose"
$(indent 2 bootstrap_command_yaml client.pl)
$(indent 2 c_arg "-n" "$namespace")
$(indent 2 c_arg "-c" "c$container")
$(indent 2 c_arg "--basetime" "$basetime")
$(indent 2 c_arg "--baseoffset" "$baseoffset")
$(indent 2 c_arg "--crtime" "$(ts)")
$(indent 2 c_num_arg "--exit_at_end" "$exit_at_end")
$(indent 2 c_arg "--sync_host" "$sync_service")
$(indent 2 c_arg "--sync_port" "$sync_port_num")
$(indent 2 c_arg "--log_host" "$log_host")
$(indent 2 c_arg "--log_port" "$log_port")
$(indent 2 c_arg "--server" "service-${namespace}-server-$instance")
$(indent 2 c_num_arg "--port" "$port")
$(indent 2 c_arg "--data_rate" "$target_data_rate")
$(indent 2 c_num_arg "--bytes" "$bytes_transfer")
$(indent 2 c_num_arg "--bytes_max" "$bytes_transfer_max")
$(indent 2 c_num_arg "--msg_size" "$___msg_size")
$(indent 2 c_arg "--xfertime" "$workload_run_time")
$(indent 2 c_arg "--xfertime_max" "$workload_run_time_max")
$(indent 2 volume_mounts_yaml "$namespace" "$instance" "$secret_count")
EOF
    done
}

function _create_client_affinity_yaml() {
    (( affinity )) || return 0
    local server=$1
    local affinity_type
    case "$affinity" in
	1) affinity_type=Affinity     ;;
	*) affinity_type=AntiAffinity ;;
    esac
    cat << EOF
affinity:
  pod$affinity_type:
    requiredDuringSchedulingIgnoredDuringExecution:
    - labelSelector:
        matchExpressions:
        - key: app
          operator: In
          values:
          - "$server"
      topologyKey: kubernetes.io/hostname
EOF
}

function _create_client_deployment() {
    local namespace=$1
    local instance=$2
    local secret_count=$3
    local replicas=$4
    local affinity_yaml="$(_create_client_affinity_yaml "${namespace}-server-${instance}")"
    if [[ $deployment_type = pod ]] ; then
	local -i replica=0
	while (( replica++ < replicas )) ; do
	    local name=${namespace}-${instance}-client-${replica}
	    create_object -n "$namespace" "$name" <<EOF
apiVersion: v1
kind: Pod
metadata:
  name: $name
$(indent 2 standard_all_metadata_yaml "$namespace" client)
  selector:
    matchLabels:
      app: ${namespace}-${instance}-client
$(indent 2 standard_labels_yaml client "$namespace" "$instance" 1)
$(create_spec ${affinity_yaml:+-A "$affinity_yaml"} _create_client_container_yaml "$@" "$replica")
  restartPolicy: Never
EOF
	done
    else
	local name=${namespace}-${instance}-client
	create_object -n "$namespace" "$name" <<EOF
apiVersion: apps/v1
kind: Deployment
metadata:
  name: $name
$(indent 2 standard_deployment_metadata_yaml "$namespace" client)
$(indent 2 standard_labels_yaml)
spec:
  replicas: $replicas
  restartPolicy: Always
  selector:
    matchLabels:
      app: ${namespace}-${instance}-client
  strategy:
    type: RollingUpdate
  template:
    metadata:
$(indent 6 standard_labels_yaml client "$namespace" "$instance" 1)
$(indent 6 standard_pod_metadata_yaml "$namespace" client)
$(indent 4 create_spec ${affinity_yaml:+-A "$affinity_yaml"} _create_client_container_yaml "$@" "x")
EOF
    fi
}

function create_deployment_server() {
    local namespace=$1
    local count=${2:-1}
    local secret_count=${3:-1}
    local replicas=${4:-1}
    local containers_per_pod=${5:-1}
    local log_host=${6:-}
    local -i log_port=${7:-0}
    local -i instance
    create_sync_service_if_needed "$namespace" 2 "$((containers_per_pod * replicas * count))"

    for instance in $(seq $first_deployment $((count + first_deployment - 1))) ; do
	create_service "$namespace" "${namespace}-server-${instance}" "$port"
	if [[ $deployment_type = pod ]] ; then
	    _create_server_deployment "$namespace" "$instance" "$secret_count" "$((containers_per_pod * replicas))"
	else
	    _create_server_deployment "$namespace" "$instance" "$secret_count" "-1"
	fi
	_create_client_deployment "$namespace" "$instance" "$secret_count" "$replicas" "$containers_per_pod" "$log_host" "$log_port"
    done
}

function list_configmaps_server() {
    cat <<EOF
${__podfile_dir__}/client.pl
${__podfile_dir__}/server.pl
EOF
}

function calculate_logs_required_server() {
    local -i namespaces=$1
    local -i deps_per_namespace=${2:-1}
    local -i replicas=${3:-1}
    local -i containers_per_pod=${4:-1}
    echo $((namespaces * containers_per_pod * replicas * deps_per_namespace))
}

function help_options_server() {
    cat <<'EOF'
    Client/server options:
       msgsize         Message size in data transfer
       pin_node=server=<node>
                       Specify node to which the server is bound.
EOF
}

function document_server() {
    cat <<'EOF'
* server: a client-server workload with optional bidirectional data
  trasfer, optionally at a specified data rate.
EOF
}

function process_options_server() {
    local opt
    local -a unknown_opts=()
    local ftest
    for opt in "$@" ; do
	read -r noptname1 noptname optvalue <<< "$(parse_option "$opt")"
	case "$noptname1" in
	    msgsize) ___msg_size=$optvalue ;;
	    *) unknown_opts+=("$noptname ($noptname1)")	;;
	esac
    done
    if [[ -n "${unknown_opts[*]:-}" ]] ; then
	help "${unknown_opts[@]}"
    fi
    if (( ___msg_size <= 0 )) ; then
	fatal "Message size must be positive, exiting!"
    fi
}

function supports_reporting_server() {
    :
}

function report_options_server() {
    cat <<EOF
"msg_size": $___msg_size
EOF
}

register_workload server dispatch_generic
