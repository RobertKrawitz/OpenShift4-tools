#!/bin/bash

# Copyright 2019-2022 Robert Krawitz/Red Hat
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

################################################################
# CPU soaker workload
################################################################

function _createContainersSoakerYAML() {
    local namespace=$1
    local instance=$2
    local secretCount=$3
    local -i processes=$4
    local -i containersPerPod=$5
    local log_host=${6:-}
    local -i log_port=${7:-0}
    local -i container
    local syncService=
    local syncPortNum=
    IFS=: read -r syncService syncPortNum <<< $(getSync)
    for container in $(seq 0 $((containersPerPod - 1))) ; do
	cat <<EOF
- name: "c$container"
  imagePullPolicy: $imagePullPolicy
  image: "$containerImage"
$(indent 2 containerResourcesYAML)
  env:
  - name: VERBOSE
    value: "$verbose"
$(indent 2 bootstrapCommandYAML cpusoaker.pl)
  - "$namespace"
  - "c$container"
  - "$basetime"
  - "$baseoffset"
  - "$(ts)"
  - "$poddelay"
  - "$processes"
  - "$workloadRunTime"
  - "$exitAtEnd"
  - "$syncService"
  - "$syncPortNum"
  - "$log_host"
  - "$log_port"
$(indent 2 volumeMountsYAML "$namespace" "${instance}" "$secretCount")
EOF
    done
}

function _createSoakerDeployment() {
    local namespace=$1
    local instance=$2
    if [[ $deploymentType = pod ]] ; then
	local -i replica=0
	while (( replica++ < replicas )) ; do
	    local name=${namespace}-soaker-${instance}-${replica}
	    createObject -n "$namespace" "$name" <<EOF
apiVersion: v1
kind: Pod
metadata:
  name: $name
$(indent 2 namespaceYAML "$namespace")
$(indent 2 privilegeYAML)
$(indent 2 nodeSelectorYAML)
  selector:
    matchLabels:
      app: ${namespace}-soaker-${instance}
$(indent 2 standardLabelsYAML soaker "$namespace" "$instance" 1)
$(createSpec _createContainersSoakerYAML "$@")
  restartPolicy: Never
EOF
	done
    else
	local name=${namespace}-soaker-${instance}
	createObject -n "$namespace" "$name" <<EOF
apiVersion: apps/v1
kind: Deployment
metadata:
  name: $name
$(indent 2 namespaceYAML "$namespace")
$(indent 2 privilegeYAML)
$(indent 2 standardLabelsYAML)
spec:
  replicas: $replicas
$(indent 2 nodeSelectorYAML)
  selector:
    matchLabels:
      app: ${namespace}-soaker-${instance}
  strategy:
    type: RollingUpdate
  template:
    metadata:
$(indent 6 standardLabelsYAML soaker "$namespace" "$instance" 1)
$(indent 4 createSpec _createContainersSoakerYAML "$@")
EOF
    fi
}

function createDeploymentSoaker() {
    local namespace=$1
    local count=${2:-1}
    local secretCount=${3:-1}
    local replicas=${4:-1}
    local containersPerPod=${5:-1}
    local log_host=${6:-}
    local -i log_port=${7:-0}
    local -i instance
    createSyncServiceIfNeeded "$namespace" 2 "$((containersPerPod * replicas * processes_per_pod * count))"
    for instance in $(seq $firstDeployment $((count + firstDeployment - 1))) ; do
	_createSoakerDeployment "$namespace" "$instance" "$secretCount"  "$((processes_per_pod))" "$containersPerPod" "$log_host" "$log_port"
    done
}

function listConfigMapsSoaker() {
    cat <<EOF
${__libdir__}/cpusoaker.pl
${__libdir__}/sync.pl
EOF
}

function calculateLogsRequiredSoaker() {
    local -i namespaces=$1
    local -i depsPerNamespace=${2:-1}
    local -i replicas=${3:-1}
    local -i containersPerPod=${4:-1}
    echo $((namespaces * processes_per_pod * containersPerPod * replicas * depsPerNamespace))
}

function documentSoaker() {
    cat <<'EOF'
* soaker: a simple CPU soaker running a continuous tight loop.
EOF
}

function supportsReportingSoaker() {
    :
}

register_workload Soaker dispatch_generic cpu cpusoak soak cpusoaker
