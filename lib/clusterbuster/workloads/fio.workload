#!/bin/bash

# Copyright 2019-2022 Robert Krawitz/Red Hat
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

################################################################
# FIO workload
################################################################

declare -ag ___fio_generic_options=()
declare -ag ___fio_blocksizes=(4096)
declare -ag ___fio_patterns=(read)
declare -ag ___fio_iodepths=(1)
declare -ag ___fio_directs=(0)
declare -ag ___fio_fdatasyncs=(1)
declare -ag ___fio_ioengines=(libaio)
declare -g  ___fio_job_file=generic.jobfile
declare -gi ___fio_ramp_time=5
declare -gi ___fio_filesize=; ___fio_filesize=$(parse_size "4Gi")
declare -g  ___fio_workdir="/tmp"
declare -g  ___fio_processed_job_file

function fio_arglist() {
    local mountdir=$1; shift
    local namespace=$1
    local instance=$2
    local secret_count=$3
    local replicas=$4
    local containers_per_pod=$5
    while [[ "$1" != '--' ]] ; do shift; done; shift
    mk_yaml_args "python3" "${mountdir}fio.py" "$@" \
		 "$processes_per_pod" "$___fio_workdir" "$workload_run_time" "$configmap_mount_dir" \
		 "svc-${namespace}-fio-${instance}-${replica}-dc" "$drop_cache_port" \
		 "${___fio_blocksizes[*]:-}" "${___fio_patterns[*]:-}" "${___fio_iodepths[*]:-}" \
		 "${___fio_fdatasyncs[*]:-}" "${___fio_directs[*]:-}" "${___fio_ioengines[*]:-}" \
		 "$___fio_ramp_time" "${___fio_generic_options[*]:-}"
}

function fio_create_deployment() {
    local namespace=$1
    local count=${2:-1}
    local secret_count=${3:-1}
    local replicas=${4:-1}
    local containers_per_pod=${5:-1}
    local -i instance
    local -i syncs_needed=$((2 + (${#___fio_patterns[@]} * ${#___fio_blocksizes[@]} * ${#___fio_iodepths[@]} * ${#___fio_directs[@]} * ${#___fio_fdatasyncs[@]} * ${#___fio_ioengines[@]}) ))
    create_sync_service_if_needed "$namespace" "$syncs_needed" "$((containers_per_pod * processes_per_pod * replicas * count))" \
				  "$((containers_per_pod * replicas * count))"
    for instance in $(seq "$first_deployment" $((count + first_deployment - 1))) ; do
	create_drop_cache_deployment "$namespace" "$workload" "$instance" "$replicas"
	create_standard_deployment  -a fio_arglist -p \
				    "$namespace" "$instance" "$secret_count" "$replicas" "$containers_per_pod"
    done
}

function fio_calculate_logs_required() {
    local -i namespaces=$1
    local -i deps_per_namespace=${2:-1}
    local -i replicas=${3:-1}
    local -i containers_per_pod=${4:-1}
    echo $((namespaces * containers_per_pod * processes_per_pod * replicas * deps_per_namespace))
}

function fio_list_configmaps() {
    cat <<EOF
${__podfile_dir__}/fio.py
EOF
}

function fio_list_user_configmaps() {
    cat <<EOF
${___fio_processed_job_file}
EOF
}

function fio_help_options() {
    cat <<EOF
    Fio Options:
       --fio-patterns=<patterns>
                        Comma-separated list of patterns to use.
                        Any pattern supported by fio may be used.
                        Most common patterns are:
                        - read      (sequential read)
                        - write     (sequential write)
                        - randread  (random read)
                        - randwrite (random write)
                        - readwrite (sequential mixed read/write)
                        - randrw    (random mixed read/write)
       --fio-blocksizes=<sizes>
                        Comma-separated list of I/O blocksizes to use.
       --fio-general-option=<options>
                        General fio option.  May be repeated.
       --fio-jobfile=<file>
                        Name of fio job file to use (defaults to generic).
       --fio-ioengines=<engines>
                        Comma-separated list of names of ioengines to use
                        (default ${___fio_ioengines[*]})
       --fio-iodepth=<n>
                        Comma-separated list of names of I/O depths to use
                        I/O depth (default ${___fio_iodepths[*]})
       --fio-direct=<directs>
                        Comma-separated list of whether to use direct I/O
                        (default ${___fio_directs[*]}), values are 0 or 1.
       --fio-ramptime=<ramp time>
                        Ramp-up and down time (default $___fio_ramp_time)
       --fio-fdatasync=<fdatasyncs>
                        Comma-separated list of whether to use fdatasync 
                        (default ${___fio_fdatasyncs[*]}), values are 0 or 1.
       --fio-filesize=<size>
                        File size (default $___fio_filesize)
       --fio-workdir=<dir>
                        Work directory (default $___fio_workdir)
EOF
}

function fio_document() {
    cat <<'EOF'
* fio: a front end for the Flexible I/O tester.
  See https://fio.readthedocs.io/en/latest/fio_doc.html for more
  details.
EOF
}

function fio_process_options() {
    local opt
    local -a unknown_opts=()
    local fioblksize=
    local fiopattern=
    local fioiodepth=
    local fiodirect=
    local fiofdatasync=
    local fioioengine=
    for opt in "$@" ; do
	read -r noptname1 noptname optvalue <<< "$(parse_option "$opt")"
	case "$noptname1" in
	    fiopattern*)	fiopattern=$optvalue		         ;;     
	    fioblocksize*)	fioblksize=$optvalue		         ;;     
	    fiogenericoption)	___fio_generic_options+=("$optvalue")    ;;
	    fiojobfile)		___fio_job_file=$optvalue		 ;;
	    fioioengine*)	fioioengine=$optvalue			 ;;
	    fioiodepth*)	fioiodepth=$optvalue			 ;;
	    fiodirect*)		fiodirect=$optvalue			 ;;
	    fioramptime)	___fio_ramp_time=$optvalue		 ;;
	    fiofdatasync*)	fiofdatasync=$optvalue			 ;;
	    fiofilesize)	___fio_filesize=$(parse_size "$optvalue");;
	    fioworkdir)         ___fio_workdir=$optvalue		 ;;
	    *) 			unknown_opts+=("$noptname ($noptname1)") ;;
	esac
    done
    if [[ $___fio_job_file != *'/'* ]] ; then
	___fio_job_file="${__libdir__}/workloads/fio/${___fio_job_file}"
    fi
    if [[ ! -r "$___fio_job_file" ]] ; then
	help "Can't find job file $___fio_job_file"
    fi
    if [[ -n "${unknown_opts[*]:-}" ]] ; then
	help "${unknown_opts[@]}"
    fi
    if [[ -n "${fioblksize:-}" ]] ; then
	# shellcheck disable=SC2086
	readarray -t ___fio_blocksizes <<< "$(parse_size ${fioblksize//,/ })"
    fi
    if [[ -n "${fioiodepth:-}" ]] ; then
	# shellcheck disable=SC2086
	readarray -t ___fio_iodepths <<< "$(parse_size ${fioiodepth//,/ })"
    fi
    if [[ -n "${fiopattern:-}" ]] ; then
	___fio_patterns=(${fiopattern//,/ })
    fi
    if [[ -n "${fioioengine:-}" ]] ; then
	___fio_ioengines=(${fioioengine//,/ })
    fi
    if [[ -n "${fiodirect:-}" ]] ; then
	# shellcheck disable=SC2086
	readarray -t ___fio_directs <<< "$(bool ${fiodirect//,/ })"
    fi
    if [[ -n "${fiofdatasync:-}" ]] ; then
	# shellcheck disable=SC2086
	readarray -t ___fio_fdatasyncs <<< "$(parse_size ${fiofdatasync//,/ })"
    fi

    ___fio_preload_job_file=$(mktemp -p "$cb_tempdir" -t "01-IGNORE-fiojobXXXXXX") || fatal "Can't create temporary jobfile"
    ___fio_processed_job_file=$(mktemp -p "$cb_tempdir" -t "02-fiojobXXXXXX") || fatal "Can't create temporary jobfile"
    expand_string "$(cat "$___fio_job_file")" 'workload_run_time=1' > "$___fio_preload_job_file"
    expand_string "$(cat "$___fio_job_file")" > "$___fio_processed_job_file"
}

function fio_supports_reporting() {
    :
}

function fio_generate_metadata() {
    local -a jobs=()
    local -i jobidx=1
    local pattern
    local -i blocksize
    local -i iodepth
    local -i fdatasync
    local -i direct
    local ioengine
    echo '"jobs": {'
    for blocksize in "${___fio_blocksizes[@]}" ; do
	for pattern in "${___fio_patterns[@]}" ; do
	    for iodepth in "${___fio_iodepths[@]}" ; do
		for fdatasync in "${___fio_fdatasyncs[@]}" ; do
		    for direct in "${___fio_directs[@]}" ; do
			for ioengine in "${___fio_ioengines[@]}" ; do
			    jobs+=("$(cat <<EOF
$(printf '"%04d-%s-%d-%d-%d-%d-%s"' $((jobidx)) "$pattern" "$blocksize" "$iodepth" "$fdatasync" "$direct" "$ioengine"): {
    "pattern": "$pattern",
    "blocksize": $blocksize,
    "iodepth": $iodepth,
    "fdatasync": $fdatasync,
    "direct": $direct,
    "ioengine": "$ioengine"
}
EOF
)")
			    jobidx=$((jobidx+1))
			done
		    done
		done
	    done
	done
    done
    (IFS=$',\n'; echo "${jobs[*]}")
    echo '}'
}

function fio_report_options() {
    function mk_num_list() {
	echo "[$(IFS=','; echo "$*")]"
    }
    function mk_str_list() {
	local _strings=()
	local _arg
	for _arg in "$@" ; do
	    _strings+=("\"$_arg\"")
	done
	echo "[$(IFS=','; echo "${_strings[*]}")]"
    }
	
    cat <<EOF
"fio_general_options": "${___fio_general_options:-}",
"fio_job_file": "$(base64 -w 0 < "$___fio_processed_job_file")",
"fio_ioengine": $(mk_str_list "${___fio_ioengines[@]}"),
"fio_iodepth": $(mk_num_list "${___fio_iodepths[@]}"),
"fio_direct": $(mk_num_list "${___fio_directs[@]}"),
"fio_fdatasync": $(mk_num_list "${___fio_fdatasyncs[@]}"),
"fio_ioengines": $(mk_str_list "${___fio_ioengines[@]}"),
"fio_ramp_time": $___fio_ramp_time,
"fio_filesize": $___fio_filesize,
"fio_workdir": "$___fio_workdir"
EOF
}

register_workload fio
