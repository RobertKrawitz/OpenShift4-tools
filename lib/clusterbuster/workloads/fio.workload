#!/bin/bash

# Copyright 2019-2022 Robert Krawitz/Red Hat
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

################################################################
# FIO workload
################################################################

declare -Ag ___fio_generic_options=()
declare -g ___fio_job_file

function _create_containers_fio_yaml() {
    local namespace=$1
    local instance=$2
    local secret_count=$3
    local -i containers_per_pod=$4
    local -i processes=$5
    local log_host=${6:-}
    local -i log_port=${7:-0}
    local -i container
    local sync_service=
    local sync_port_num=
    IFS=: read -r sync_service sync_port_num <<< $(get_sync)
    # shellcheck disable=2031
    local workdir=${common_workdir:-${emptydirs[0]:-/tmp}}
    for container in $(seq 0 $((containers_per_pod - 1))) ; do
	cat <<EOF
- name: "c${container}"
  image_pull_policy: $image_pull_policy
  image: "$container_image"
$(indent 2 container_resources_yaml)
  env:
  - name: VERBOSE
    value: "$verbose"
$(indent 2 bootstrap_command_yaml fio.pl)
  - "$namespace"
  - "c${j}"
  - "$basetime"
  - "$baseoffset"
  - "$poddelay"
  - "$(ts)"
  - "$exit_at_end"
  - "$sync_service"
  - "$sync_port_num"
  - "$log_host"
  - "$log_port"
  - "$processes"
  - "$workdir"
  - "$workload_run_time"
  - "$configmap_mount_dir"
  - "${_fio_generic_options[*]:-}"
$(indent 2 volume_mounts_yaml "$namespace" "${instance}" "$secret_count")
EOF
    done
}

function _create_fio_deployment() {
    local namespace=$1
    local instance=$2
    local secret_count=$3
    local name=${namespace}-fio-${instance}
    if [[ $deployment_type = pod ]] ; then
	create_object -n "$namespace" "$name" <<EOF
apiVersion: v1
kind: Pod
metadata:
  name: $name
$(indent 2 namespace_yaml "$namespace")
$(indent 2 privilege_yaml)
  selector:
    matchLabels:
      app: ${namespace}-fio-${instance}
$(indent 2 standard_labels_yaml fio "$namespace" $instance 1)
$(create_spec _create_containers_fio_yaml "$@")
  restartPolicy: Never
EOF
    else
	create_object -n "$namespace" "$name" <<EOF
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "$name"
$(indent 2 namespace_yaml "$namespace")
$(indent 2 privilege_yaml)
$(indent 2 standard_labels_yaml)
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ${namespace}-fio-${instance}
  strategy:
    type: RollingUpdate
  template:
    metadata:
$(indent 6 standard_labels_yaml fio "$namespace" $instance 1)
$(indent 4 create_spec _create_containers_fio_yaml "$@")
EOF
    fi
}

function create_deployment_fio() {
    local namespace=$1
    local count=${2:-1}
    local secret_count=${3:-1}
    local replicas=${4:-1}
    local containers_per_pod=${5:-1}
    local log_host=${6:-}
    local -i log_port=${7:-0}
    local -i instance
    create_sync_service_if_needed "$namespace" 2 "$((containers_per_pod * replicas * count))"
    for instance in $(seq $first_deployment $((count + first_deployment - 1))) ; do
	_create_fio_deployment "$namespace" "${instance}" "$secret_count"  "$replicas" "$containers_per_pod" "$log_host" "$log_port"
    done
}

function calculate_logs_required_fio() {
    local -i namespaces=$1
    local -i deps_per_namespace=${2:-1}
    local -i replicas=${3:-1}
    local -i containers_per_pod=${4:-1}
    echo $((namespaces * containers_per_pod * processes_per_pod * replicas * deps_per_namespace))
}

function list_configmaps_fio() {
    cat <<EOF
${__podfile_dir__}/fio.pl
${__podfile_dir__}/clientlib.pl
${__podfile_dir__}/sync.pl
EOF
}

function list_user_configmaps_fio() {
    cat <<EOF
${___fio_job_file}
EOF
}

function help_options_fio() {
    cat <<'EOF'
    Fio Options:
       --fio-general-options=<options>
                        Space or comma separated general fio options
       --fio-jobfile=<file>
                        Name of fio job file to use.  May be repeated.
EOF
}

function document_fio() {
    cat <<'EOF'
* fio: a front end for the Flexible I/O tester.
  See https://fio.readthedocs.io/en/latest/fio_doc.html for more
  details.
EOF
}

function process_options_fio() {
    local opt
    local -a unknown_opts=()
    for opt in "$@" ; do
	read -r noptname1 noptname optvalue <<< "$(parse_option "$opt")"
	case "$noptname1" in
	    fiogenericoptions)	    ___fio_generic_options+=(${optvalue//,/ })     ;;
	    fiojobfile)
		if [[ ! -f "$optvalue" ]] ; then
		    echo "Job file $optvalue does not exist"
		    help
		fi
		___fio_job_file=$optvalue
		;;
	    *) 			unknown_opts+=("$noptname ($noptname1)") ;;
	esac
    done
    if [[ -n "${unknown_opts[*]:-}" ]] ; then
	help "${unknown_opts[@]}"
    fi
}

function supports_reporting_fio() {
    :
}

function report_options_fio() {
    cat <<EOF
"fio_general_options": "${___fio_general_options:-}",
"fio_job_file": "$(base64 -w 0 < "$___fio_job_file")"
EOF
}

register_workload fio dispatch_generic
