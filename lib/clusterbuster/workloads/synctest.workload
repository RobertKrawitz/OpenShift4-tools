#!/bin/bash

# Copyright 2019-2022 Robert Krawitz/Red Hat
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

################################################################
# Sysbench workload
################################################################

# Sysbench options
declare -g ___synctest_count=5
declare -g ___synctest_cluster_count=1
declare -g ___synctest_sleep=0

function synctest_create_containers_yaml() {
    "$mk_args_func" "$___synctest_count" "$___synctest_cluster_count" "$___synctest_sleep"
}

function synctest_create_deployment() {
    local mk_args_func="$1"; shift
    local namespace=$1
    local count=${2:-1}
    local secret_count=${3:-1}
    local replicas=${4:-1}
    local containers_per_pod=${5:-1}
    local -i instance
    create_sync_service_if_needed "$namespace" "$(((___synctest_count * ___synctest_cluster_count) + 2))" "$((containers_per_pod * replicas * processes_per_pod * count))"
    for instance in $(seq $first_deployment $((count + first_deployment - 1))) ; do
	create_standard_deployment -a synctest_arglist -e synctest.pl \
				   "$namespace" "$instance" "$secret_count" "$replicas" "$containers_per_pod"
    done
}

function synctest_list_configmaps() {
    cat <<EOF
${__podfile_dir__}/synctest.pl
EOF
}

function synctest_help_options() {
    cat <<'EOF'
    Synctest General Options:
       --synctest-count=n
                        Run the test for n iterations
       --synctest-cluster_count=n
                        Run n syncs per iteration
       --synctest-sleep=n
                        Sleep for the specified time between iterations
EOF
}

function synctest_document() {
    cat <<'EOF'
* synctest: tests internal sync
EOF
}

function synctest_process_options() {
    local opt
    local -a unknown_opts=()
    local ftest
    for opt in "$@" ; do
	read -r noptname1 noptname optvalue <<< "$(parse_option "$opt")"
	case "$noptname1" in
	# Synctest options
	    synctestcount)		___synctest_count=$optvalue		;;
	    synctestclustercount)	___synctest_cluster_count=$optvalue	;;
	    synctestsleep)		___synctest_sleep=$optvalue		;;
	    *) 			unknown_opts+=("$noptname ($noptname1)")	;;
	esac
    done
    if [[ -n "${unknown_opts[*]:-}" ]] ; then
	help "${unknown_opts[@]}"
    fi
}

function synctest_calculate_logs_required() {
    local -i namespaces=$1
    local -i deps_per_namespace=${2:-1}
    local -i replicas=${3:-1}
    local -i containers_per_pod=${4:-1}
    echo $((namespaces * processes_per_pod * containers_per_pod * replicas * deps_per_namespace))
}

function synctest_report_options() {
    cat <<EOF
"synctest_count": $___synctest_count,
"synctest_sleep": $___synctest_sleep
EOF
}

function synctest_workload_reporting_class() {
    echo generic
}

function synctest_supports_reporting() {
    :
}

register_workload synctest
