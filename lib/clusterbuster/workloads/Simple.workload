#!/bin/bash

# Copyright 2019-2022 Robert Krawitz/Red Hat
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

################################################################
# Simple workloads (pause pod, clusterbuster, logging)
################################################################

declare -ig ___log_bytes_per_line=1
declare -ig ___log_bytes_per_io=1
declare -ig ___log_xfer_count=1
declare -ig ___log_processes=1
declare -ig ___log_delay_usec=0
declare -ig ___log_xfertime=0

function _createContainersClusterBusterYAML() {
    local namespace=$1
    local instance=$2
    local secretCount=$3
    local -i pods=$4
    local -i containersPerPod=$5
    local -i container
    for container in $(seq 0 $((containersPerPod - 1))) ; do
	cat <<EOF
- name: ${namespace}-${instance}-$container
  imagePullPolicy: $imagePullPolicy
  image: "busybox"
$(indent 2 containerResourcesYAML)
  command:
  - /bin/sh
  args:
  - -c
  - |
    trap 'exit 0' TERM
    (while : ; do date ; sleep 60 ; done)&
    sleep $podsleeptime
    exit 1
$(indent 2 volumeMountsYAML "$namespace" "${instance}" "$secretCount")
EOF
    done
}

function _createContainersPausePodYAML() {
    local namespace=$1
    local instance=$2
    local secretCount=$3
    local -i pods=$4
    local -i containersPerPod=$5
    local -i container
    for container in $(seq 0 $((containersPerPod - 1))) ; do
	cat <<EOF
- name: ${namespace}-${instance}-$container
  imagePullPolicy: $imagePullPolicy
  image: "gcr.io/google_containers/pause-amd64:3.2"
$(indent 2 containerResourcesYAML)
$(indent 2 volumeMountsYAML "$namespace" "${instance}" "$secretCount")
EOF
    done
}

function _createContainersLogYAML() {
    local namespace=$1
    local instance=$2
    local secretCount=$3
    # shellcheck disable=2034
    local -i pods=$4
    local -i containersPerPod=$5
    local -i container
    for container in $(seq 0 $((containersPerPod - 1))) ; do
	cat <<EOF
- name: ${namespace}-${instance}-$container
  imagePullPolicy: $imagePullPolicy
  image: "$containerImage"
$(indent 2 containerResourcesYAML)
  env:
  - name: VERBOSE
    value: "$verbose"
$(indent 2 bootstrapCommandYAML logger.pl)
  - "$namespace"
  - "c${container}"
  - "$___log_bytes_per_line"
  - "$___log_bytes_per_io"
  - "$___log_xfer_count"
  - "$___log_processes"
  - "$___log_delay_usec"
  - "$___log_xfertime"
  - "$___log_exit_at_end"
$(indent 2 volumeMountsYAML "$namespace" "${instance}" "$secretCount")
EOF
    done
}

function _createDeploymentClassicYAML() {
    local namespace=$1
    local instance=$2
    local secretCount=$3
    local -i replicas=$4
    local -i containersPerPod=$5
    if [[ $deploymentType = pod ]] ; then
	local -i container=0
	while (( container++ < replicas )) ; do
	    createObject <<EOF
apiVersion: v1
kind: Pod
metadata:
  name: ${namespace}-${instance}-${container}
$(indent 2 namespaceYAML "$namespace")
$(indent 2 privilegeYAML)
$(indent 2 nodeSelectorYAML)
  selector:
    matchLabels:
      app: ${namespace}-${instance}
$(indent 2 standardLabelsYAML "${requestedWorkload}" "$namespace" "$instance")
$(createSpec _createContainers${requestedWorkload}YAML "$@")
EOF
	done
    else
	createObject <<EOF
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${namespace}-${instance}
$(indent 2 namespaceYAML "$namespace")
$(indent 2 privilegeYAML)
$(indent 2 standardLabelsYAML)
spec:
  replicas: $replicas
$(indent 2 nodeSelectorYAML)
  selector:
    matchLabels:
      app: ${namespace}-${instance}
  strategy:
    type: RollingUpdate
  template:
    metadata:
$(indent 6 standardLabelsYAML "${requestedWorkload}" "$namespace" "$instance")
$(indent 4 createSpec _createContainers${requestedWorkload}YAML "$@")
EOF
    fi
}

function _createDeploymentSimple() {
    local namespace=$1
    local count=${2:-1}
    local secretCount=${3:-1}
    local replicas=${4:-1}
    local containersPerPod=${5:-1}
    local -i instance
    for instance in $(seq $firstDeployment $((count + firstDeployment - 1))) ; do
	_createDeploymentClassicYAML "$namespace" "${instance}" "$secretCount"  "$replicas" "$containersPerPod"
    done
}

# The simple workloads do not support logging or synchronization.
# The Log workload is about log generation

function listConfigMapsLog() {
    cat <<EOF
${__libdir__}/logger.pl
EOF
}

function createDeploymentPausePod() {
    _createDeploymentSimple "$@"
}

function createDeploymentClusterBuster() {
    _createDeploymentSimple "$@"
}

function createDeploymentLog() {
    _createDeploymentSimple "$@"
}

function helpOptionsLog() {
    cat <<EOF
    Log Options:
       --log-bytes-per-line=<bytes_per_line>
                        Number of bytes per line to log.
                        Default $___log_bytes_per_line.
       --log-bytes-per-io=<bytes_per_io>
                        Number of bytes per message to log.
                        Rounded up to full lines.  Default $___log_bytes_per_io.
       --log-xfer-count=<count>
                        Number of messages to log (in I/Os)
                        Default $___log_xfer_count.  If zero, log
                        continuously (subject to log-xfertime).
       --log-processes=<processes>
                        Number of processes per pod.
                        Default $___log_processes.
       --log-delay-usec=<usecs>
                        Time in microseconds to delay between I/O.
       --log-xfertime=<time>
                        Number of seconds to log.
                        Default $___log_xfertime.  If zero, log continuously
                        (subject to log-xfer-count
EOF
}

function documentPausePod() {
    cat <<'EOF'
* pausepod: a minimal pod that does nothing.  Useful for stressing
  the control plane.  See
  https://console.cloud.google.com/gcr/images/google-containers/global/pause-amd64
EOF
}

function documentClusterBuster() {
    cat <<'EOF'
* clusterbuster: a simple pod based on busybox that logs the date
  once per minute.  Useful for testing the control plane.
EOF
}

function documentLog() {
    cat <<'EOF'
* log: a pod that emits log messages at a controllable rate.
EOF
}

function processOptionsLog() {
    local opt
    local -a unknown_opts=()
    for opt in "$@" ; do
	read -r noptname1 noptname optvalue <<< "$(process_option "$opt")"
	case "$noptname1" in
	    logbytesperline)	___log_bytes_per_line=$optvalue	;;
	    logbytesperio)	___log_bytes_per_io=$optvalue	;;
	    logxfercount)	___log_xfer_count=$optvalue	;;
	    logprocesses)	___log_processes=$optvalue	;;
	    logdelayusec)	___log_delay_usec=$optvalue	;;
	    logxfertime)	___log_xfertime=$optvalue	;;
	    *) 			unknown_opts+=("$noptname ($noptname1)") ;;
	esac
    done
    if [[ -n "${unknown_opts[*]:-}" ]] ; then
	help "${unknown_opts[@]}"
    fi
}

register_workload PausePod dispatch_generic pause
register_workload ClusterBuster dispatch_generic classic
register_workload Log dispatch_generic logger logging
