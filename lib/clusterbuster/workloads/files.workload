#!/bin/bash

# Copyright 2019-2022 Robert Krawitz/Red Hat
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

################################################################
# Files workload
################################################################

declare -ig ___file_size=4096
declare -ig ___file_block_size=0
declare -ig ___file_dirs_per_volume=1
declare -ig ___files_per_dir=1
declare -ig ___files_direct=0
declare -ig ___files_drop_cache=1
declare -ia ___file_dirs=()

function files_create_deployment() {
    create_generic_deployment -p "$@"
}

function files_arglist() {
    local mountdir=$1; shift
    local namespace=$1
    local instance=$2
    local secret_count=$3
    local replicas=$4
    local containers_per_pod=$5
    local dc_service=
    local dc_port=0
    while [[ "$1" != '--' ]] ; do shift; done; shift
    local -i file_blocks=$((___file_size/___file_block_size))
    mk_yaml_args "python3" "${mountdir}files.py" "$@" \
		 "$___file_dirs_per_volume" "$___files_per_dir" "$___file_block_size" "$file_blocks" \
		 "$processes_per_pod" "$___files_direct" "${___files_dirs[@]}"
}

function files_help_options() {
    cat <<'EOF'
    Many Files Options:
       --dirs-per-volume=N
                        Create the specified number of directories per volume.
                        Default 1.
       --files-per-dir=N
                        Create the specified number of files per directory.
       --file-size=N
                        Each file should be of the specified size.
                        Sizes may be in bytes, [KMGT]iB, or [KMGT]B.
       --file-block-size=N
                        Write files using the specified I/O chunk size.
                        If unspecified, it defaults to the file size.
                        This should be a divisor of the file size; if not,
                        the results are unspecified.
       --files-direct   Use direct I/O (default no)
       --files-drop-cache=[0,1]
                        Drop cache, don't merely sync (default $___files_drop_cache)
EOF
}

function files_document() {
    cat <<'EOF'
* files: a simple filesystem stressor that creates and removes a large
  number of files.
EOF
}

function files_process_options() {
    local opt
    local -a unknown_opts=()
    for opt in "$@" ; do
	read -r noptname1 noptname optvalue <<< "$(parse_option "$opt")"
	case "$noptname1" in
	    dirspervolume)	___file_dirs_per_volume=$optvalue		;;
	    filesperdir)	___files_per_dir=$optvalue			;;
	    fileblocksize)	___file_block_size=$(parse_size "$optvalue")	;;
	    filesize)		___file_size=$(parse_size "$optvalue")		;;
	    filesdirect)	___files_direct=$(bool "$optvalue")		;;
	    filesdrop*)		___files_drop_cache=$(bool "$optvalue")	 	;;
	    filesdir*)
		if [[ -z "$optvalue" ]] ; then
		    ___files_dirs=()
		else
		    ___files_dirs+=("$optvalue")
		fi
		;;
	    *) 			unknown_opts+=("$noptname ($noptname1)") 	;;
	esac
    done
    if [[ -n "${unknown_opts[*]:-}" ]] ; then
	warn "Notice: the following options are not known: ${unknown_opts[*]}"
    fi
    if (( ___file_block_size <= 0)) ; then
	___file_block_size=___file_size
    fi
    [[ -z "${___files_dirs[*]}" ]] && ___files_dirs=(/var/tmp/clusterbuster)
}

function files_requires_drop_cache() {
    ((___files_drop_cache))
}

function files_generate_metadata() {
    files_report_options
}

function files_report_options() {
    cat <<EOF
"dirs_per_volume": $___file_dirs_per_volume,
"files_per_dir": $___files_per_dir,
"file_block_size": $___file_block_size,
"file_size": $___file_size,
"files_direct": $___files_direct,
"files_drop_cache": $___files_drop_cache,
"files_dirs": $(mk_str_list "${___files_dirs[@]}")
EOF
}

register_workload files file
