#!/bin/bash

# Copyright 2019-2022 Robert Krawitz/Red Hat
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

################################################################
# Simple workloads (pause pod, clusterbuster, logging)
################################################################

declare -g ___classic_pod_sleep_time=0

function _create_containers_classic_yaml() {
    local namespace=$1
    local instance=$2
    local secret_count=$3
    local -i pods=$4
    local -i containers_per_pod=$5
    local log_host=${6:-}
    local -i log_port=${7:-0}
    local -i container
    local sync_service=
    local sync_port_num=
    IFS=: read -r sync_service sync_port_num <<< $(get_sync)
    for container in $(seq 0 $((containers_per_pod - 1))) ; do
	cat <<EOF
- name: "c$container"
  image_pull_policy: $image_pull_policy
  image: "$container_image"
$(indent 2 container_resources_yaml)
  env:
  - name: VERBOSE
    value: "$verbose"
$(indent 2 bootstrap_command_yaml classic.pl)
  - "$namespace"
  - "c$container"
  - "$basetime"
  - "$baseoffset"
  - "$poddelay"
  - "$(ts)"
  - "$exit_at_end"
  - "$sync_service"
  - "$sync_port_num"
  - "$log_host"
  - "$log_port"
  - "$___classic_pod_sleep_time"
$(indent 2 volume_mounts_yaml "$namespace" "${instance}" "$secret_count")
EOF
    done
}

function _create_deployment_classic_yaml() {
    local namespace=$1
    local instance=$2
    local secret_count=$3
    local -i replicas=$4
    local -i containers_per_pod=$5
    if [[ $deployment_type = pod ]] ; then
	local -i replica=0
	while (( replica++ < replicas )) ; do
	    local name="${namespace}-classic-${instance}-${replica}"
	    create_object -n "$namespace" "$name" <<EOF
apiVersion: v1
kind: Pod
metadata:
  name: $name
$(indent 2 namespace_yaml "$namespace")
$(indent 2 privilege_yaml)
  selector:
    matchLabels:
      app: ${namespace}-${instance}
$(indent 2 standard_labels_yaml "classic" "$namespace" "$instance")
$(create_spec _create_containers_classic_yaml "$@")
  restartPolicy: Never
EOF
	done
    else
	local name="${namespace}-classic-${instance}"
	create_object -n "$namespace" "$name" <<EOF
apiVersion: apps/v1
kind: Deployment
metadata:
  name: $name
$(indent 2 namespace_yaml "$namespace")
$(indent 2 privilege_yaml)
$(indent 2 standard_labels_yaml)
spec:
  replicas: $replicas
  selector:
    matchLabels:
      app: ${namespace}-${instance}
  strategy:
    type: RollingUpdate
  template:
    metadata:
$(indent 6 standard_labels_yaml "classic" "$namespace" "$instance")
$(indent 4 create_spec _create_containers_classic_yaml "$@")
EOF
    fi
}

function create_deployment_classic() {
    local namespace=$1
    local count=${2:-1}
    local secret_count=${3:-1}
    local replicas=${4:-1}
    local containers_per_pod=${5:-1}
    local log_host=${6:-}
    local -i log_port=${7:-0}
    local -i instance
    create_sync_service_if_needed "$namespace" 2 "$((containers_per_pod * replicas * count))"
    for instance in $(seq $first_deployment $((count + first_deployment - 1))) ; do
	_create_deployment_classic_yaml "$namespace" "$instance" "$secret_count" "$((processes_per_pod))" "$containers_per_pod" "$log_host" "$log_port"
    done
}

function list_configmaps_classic() {
    cat <<EOF
${__podfile_dir__}/classic.pl
EOF
}

function calculate_logs_required_classic() {
    local -i namespaces=$1
    local -i deps_per_namespace=${2:-1}
    local -i replicas=${3:-1}
    local -i containers_per_pod=${4:-1}
    echo $((namespaces * containers_per_pod * replicas * deps_per_namespace))
}

function help_options_classic() {
    cat <<EOF
    Classic Options:
       --classic-pod-sleep-time=<seconds>
                        Number of seconds pods should sleep before
                        exiting.  Default infinity.
EOF
}

function document_classic() {
    cat <<'EOF'
* classic: a simple pod based on busybox that logs the date
  once per minute.  Useful for testing the control plane.
EOF
}

function process_options_classic() {
    local opt
    local -a unknown_opts
    for opt in "$@" ; do
	read -r noptname1 noptname optvalue <<< "$(parse_option "$opt")"
	case "$noptname1" in
	    classicpodsleeptime) ___classic_pod_sleep_time=$optvalue ;;
	    *) 			unknown_opts+=("$noptname ($noptname1)") ;;
	esac
    done
    if [[ -n "${unknown_opts[*]:-}" ]] ; then
	help "${unknown_opts[@]}"
    fi
}

function report_options_classic() {
    cat <<EOF
"classic_pod_sleep_time": $___classic_pod_sleep_time
EOF
}

function supports_reporting_classic() {
    :
}

register_workload classic dispatch_generic clusterbuster
