#!/bin/bash

# Copyright 2019-2022 Robert Krawitz/Red Hat
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

################################################################
# Simple workloads (pause pod, clusterbuster, logging)
################################################################

function _classic_create_containers_yaml() {
    make_standard_containers -- "$@" <<EOF
${workload_run_time:-10}
EOF
}

function _classic_create_deployment_yaml() {
    local namespace=$1
    local instance=$2
    local -i replicas=$4
    local depname="${namespace}-${requested_workload}-${instance}"
    if [[ $deployment_type = pod ]] ; then
	local -i replica=0
	while (( replica++ < replicas )) ; do
	    local name="${depname}-${replica}"
	    create_object -n "$namespace" "$name" <<EOF
apiVersion: v1
kind: Pod
metadata:
  name: $(mkpodname "$name")
$(indent 2 standard_all_metadata_yaml "$namespace" client)
  selector:
    matchLabels:
      app: $name
$(indent 2 standard_labels_yaml ${requested_workload} "$namespace" "${instance}-${replica}" 1)
$(create_spec "_${requested_workload}_create_containers_yaml" "$@" "$replica")
  restartPolicy: Never
EOF
	done
    else
	local name="$depname"
	create_object -n "$namespace" "$name" <<EOF
apiVersion: apps/v1
kind: $deployment_type
metadata:
  name: $(mkpodname "$name")
$(indent 2 standard_deployment_metadata_yaml "$namespace" client)
$(indent 2 standard_labels_yaml "$requested_workload" "$namespace" "$instance" 1)
spec:
  replicas: $replicas
  selector:
    matchLabels:
      app: ${namespace}-${requested_workload}-${instance}
  strategy:
    type: RollingUpdate
  template:
    metadata:
$(indent 6 standard_labels_yaml "$requested_workload" "$namespace" "$instance" 1)
$(indent 6 standard_pod_metadata_yaml "$namespace" client)
$(indent 4 create_spec "_${requested_workload}_create_containers_yaml" "$@")
EOF
    fi
}

function classic_create_deployment() {
    local namespace=$1
    local count=${2:-1}
    local secret_count=${3:-1}
    local replicas=${4:-1}
    local containers_per_pod=${5:-1}
    local log_host=${6:-}
    local -i log_port=${7:-0}
    local -i instance
    create_sync_service_if_needed "$namespace" 2 "$((containers_per_pod * replicas * count))"
    for instance in $(seq $first_deployment $((count + first_deployment - 1))) ; do
	"_${requested_workload}_create_deployment_yaml" "$namespace" "$instance" "$secret_count" "$replicas" "$containers_per_pod" "$log_host" "$log_port"
    done
}

function classic_list_configmaps() {
    cat <<EOF
${__podfile_dir__}/classic.pl
EOF
}

function classic_calculate_logs_required() {
    local -i namespaces=$1
    local -i deps_per_namespace=${2:-1}
    local -i replicas=${3:-1}
    local -i containers_per_pod=${4:-1}
    echo $((namespaces * containers_per_pod * replicas * deps_per_namespace))
}

function classic_document() {
    cat <<'EOF'
* classic: a simple pod based on busybox that logs the date
  once per minute.  Useful for testing the control plane.
EOF
}

function classic_workload_reporting_class() {
    echo generic
}

function classic_supports_reporting() {
    :
}

register_workload classic dispatch_generic clusterbuster
