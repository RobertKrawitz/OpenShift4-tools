#!/bin/bash

# Copyright 2023 Robert Krawitz/Red Hat
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

################################################################
# CPU soaker workload
################################################################

function failure_arglist() {
    local mountdir=$1; shift
    while [[ "$1" != '--' ]] ; do shift; done; shift
    mk_yaml_args "python3" "${mountdir}failure.py" "$@" \
		 "$processes_per_pod" "$workload_run_time"
}

function failure_create_deployment() {
    local namespace=$1
    local count=${2:-1}
    local secret_count=${3:-1}
    local replicas=${4:-1}
    local containers_per_pod=${5:-1}
    local -i instance
    create_sync_service "$namespace" "$((containers_per_pod * replicas * processes_per_pod * count))" \
				  "$((containers_per_pod * replicas * count))"
    for instance in $(seq "$first_deployment" $((count + first_deployment - 1))) ; do
	create_standard_deployment -a failure_arglist \
				   "$namespace" "$instance" "$secret_count" "$replicas" "$containers_per_pod"
    done
}

function failure_list_configmaps() {
    cat <<EOF
$(find_on_path pod_files "failure.py")
EOF
}

function failure_calculate_logs_required() {
    local -i namespaces=$1
    local -i deps_per_namespace=${2:-1}
    local -i replicas=${3:-1}
    local -i containers_per_pod=${4:-1}
    echo $((namespaces * processes_per_pod * containers_per_pod * replicas * deps_per_namespace))
}

function failure_document() {
    cat <<'EOF'
* failure: Fail after the specified workload runtime.
EOF
}

function failure_workload_reporting_class() {
    echo generic
}

function failure_supports_reporting() {
    :
}

register_workload failure
