#!/bin/bash

# Copyright 2019-2022 Robert Krawitz/Red Hat
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

################################################################
# Sysbench workload
################################################################

# Sysbench options
declare -ag ___sysbench_generic_options=()
declare -ag ___sysbench_fileio_options=()
declare -Ag ___sysbench_fileio_tests=()
declare -g ___sysbench_fileio_test_string='seqwr,seqrd,rndwr,rndrd'

function sysbench_arglist() {
    local mountdir=$1; shift
    while [[ "$1" != '--' ]] ; do shift; done; shift
    local workdir=${common_workdir:-${emptydirs[0]:-/tmp}}
    mk_yaml_args "python3" "${mountdir}sysbench.py" "$@" \
		 "$processes_per_pod" "$workdir" "$workload_run_time" \
		 "svc-${namespace}-sysbench-${instance}-${replica:-1}-dc" "$drop_cache_port" \
		 "${___sysbench_generic_options[*]:-}" "fileio" \
		 "${___sysbench_fileio_options[*]:-}" "${!___sysbench_fileio_tests[*]}"
}

function sysbench_create_deployment() {
    local namespace=$1
    local count=${2:-1}
    local secret_count=${3:-1}
    local replicas=${4:-1}
    local containers_per_pod=${5:-1}
    local -i instance
    create_sync_service_if_needed "$namespace" "$(( (${#___sysbench_fileio_tests[@]} * 3) + 2))" \
				  "$((containers_per_pod * processes_per_pod * replicas * count))" \
				  "$((containers_per_pod * replicas * count))"
    for instance in $(seq $first_deployment $((count + first_deployment - 1))) ; do
	create_drop_cache_deployment "$namespace" "$workload" "$instance" "$replicas"
	create_standard_deployment -a sysbench_arglist -e sysbench.py -p \
				   "$namespace" "$instance" "$secret_count" "$replicas" "$containers_per_pod"
    done
}

function sysbench_list_configmaps() {
    cat <<EOF
${__podfile_dir__}/sysbench.py
${__podfile_dir__}/drop_cache.pl
EOF
}

function sysbench_calculate_logs_required() {
    local -i namespaces=$1
    local -i deps_per_namespace=${2:-1}
    local -i replicas=${3:-1}
    local -i containers_per_pod=${4:-1}
    echo $((namespaces * containers_per_pod * processes_per_pod * replicas * deps_per_namespace))
}

function sysbench_help_options() {
    cat <<'EOF'
    Sysbench General Options:
       --sysbench-generic-options=<options>
                        Space or comma separated generic Sysbench options
       --sysbench-fileio-tests=<modes>
                        Space or comma separated list of file test modes
                        to use (seqwr, seqrewr, seqrd, rndrd, rndwr, rndrw)
                        If multiple modes are specified, modes are
                        spread around.
       --sysbench-fileio-options=<options>
                        Space or comma separated fileio Sysbench options
EOF
}

function sysbench_document() {
    cat <<'EOF'
* sysbench: scriptable multi-threaded benchmark tool based on LuaJIT.
  Currently supports only file I/O operations.
  See https://github.com/akopytov/sysbench
EOF
}

function sysbench_process_options() {
    local opt
    local -a unknown_opts=()
    local ftest
    for opt in "$@" ; do
	read -r noptname1 noptname optvalue <<< "$(parse_option "$opt")"
	case "$noptname1" in
	# Sysbench options
	    sysbenchgenericoptions)     ___sysbench_generic_options+=(${optvalue//,/ })	;;
	    sysbenchfileiooptions)      ___sysbench_fileio_options+=(${optvalue//,/ })	;;
	    sysbenchfileiotests)	___sysbench_fileio_test_string=$optvalue	;;
	    *) 				unknown_opts+=("$noptname ($noptname1)")	;;
	esac
    done
    if [[ -n "${unknown_opts[*]:-}" ]] ; then
	help "${unknown_opts[@]}"
    fi
    for ftest in ${___sysbench_fileio_test_string//,/ } ; do
	___sysbench_fileio_tests[$ftest]=1
    done
}

function sysbench_supports_reporting() {
    :
}

function sysbench_report_options() {
    cat <<EOF
"sysbench_generic_options": [$(quote_list "${___sysbench_generic_options[@]}")],
"sysbench_fileio_options": [$(quote_list "${___sysbench_fileio_options[@]}")],
"sysbench_fileio_tests": [$(quote_list ${___sysbench_fileio_test_string//,/ })]
EOF
}

register_workload sysbench
