#!/bin/bash

# Copyright 2019-2022 Robert Krawitz/Red Hat
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

################################################################
# Sysbench workload
################################################################

# Sysbench options
declare -ag ___sysbench_generic_options=()
declare -ag ___sysbench_fileio_options=()
declare -Ag ___sysbench_fileio_tests=()
declare -g ___sysbench_fileio_test_string='seqwr,seqrd,rndwr,rndrd'

function _create_containers_sysbench_yaml() {
    local namespace=$1
    local instance=$2
    local secret_count=$3
    local -i processes=$4
    local -i containers_per_pod=$5
    local log_host=${6:-}
    local -i log_port=${7:-0}
    local -i container
    local sync_service=
    local sync_port_num=
    IFS=: read -r sync_service sync_port_num <<< $(get_sync)
    # shellcheck disable=2031
    local workdir=${common_workdir:-${emptydirs[0]:-/tmp}}
    for container in $(seq 0 $((containers_per_pod - 1))) ; do
	cat <<EOF
- name: "c${container}"
  image_pull_policy: $image_pull_policy
  image: "$container_image"
$(indent 2 container_resources_yaml)
  env:
  - name: VERBOSE
    value: "$verbose"
$(indent 2 bootstrap_command_yaml sysbench.pl)
  - "$namespace"
  - "c${container}"
  - "$basetime"
  - "$baseoffset"
  - "$(ts)"
  - "$poddelay"
  - "$processes"
  - "$workdir"
  - "$workload_run_time"
  - "$exit_at_end"
  - "$sync_service"
  - "$sync_port_num"
  - "$log_host"
  - "$log_port"
  - "${___sysbench_generic_options[*]:-}"
  - "fileio"
  - "${___sysbench_fileio_options[*]:-}"
  - "${!___sysbench_fileio_tests[*]}"
$(indent 2 volume_mounts_yaml "$namespace" "$instance" "$secret_count")
EOF
    done
}

function _create_sysbench_deployment() {
    local namespace=$1
    local instance=$2
    local secret_count=$3
    local name=${namespace}-sysbench-${instance}
    if [[ $deployment_type = pod ]] ; then
	create_object -n "$namespace" "$name" <<EOF
apiVersion: v1
kind: Pod
metadata:
  name: ${namespace}-sysbench-${instance}
$(indent 2 namespace_yaml "$namespace")
$(indent 2 privilege_yaml)
  selector:
    matchLabels:
      app: ${namespace}-sysbench-${instance}
$(indent 2 standard_labels_yaml sysbench "$namespace" "$instance" 1)
$(create_spec _create_containers_sysbench_yaml "$@")
  restartPolicy: Never
EOF
    else
	create_object -n "$namespace" "$name" <<EOF
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${namespace}-sysbench-$instance
$(indent 2 namespace_yaml "$namespace")
$(indent 2 privilege_yaml)
$(indent 2 standard_labels_yaml)
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ${namespace}-sysbench-$instance
  strategy:
    type: RollingUpdate
  template:
    metadata:
$(indent 6 standard_labels_yaml sysbench "$namespace" "$instance" 1)
$(indent 4 create_spec _create_containers_sysbench_yaml "$@")
EOF
    fi
}

function create_deployment_sysbench() {
    local namespace=$1
    local count=${2:-1}
    local secret_count=${3:-1}
    local replicas=${4:-1}
    local containers_per_pod=${5:-1}
    local log_host=${6:-}
    local -i log_port=${7:-0}
    local -i instance
    create_sync_service_if_needed "$namespace" "$(( (${#___sysbench_fileio_tests[@]} * 3) + 1))" "$((containers_per_pod * replicas * count))"
    for instance in $(seq $first_deployment $((count + first_deployment - 1))) ; do
	_create_sysbench_deployment "$namespace" "$instance" "$secret_count"  "$replicas" "$containers_per_pod" "$log_host" "$log_port"
    done
}

function list_configmaps_sysbench() {
    cat <<EOF
${__podfile_dir__}/sysbench.pl
${__podfile_dir__}/sync.pl
EOF
}

function calculate_logs_required_sysbench() {
    local -i namespaces=$1
    local -i deps_per_namespace=${2:-1}
    local -i replicas=${3:-1}
    local -i containers_per_pod=${4:-1}
    echo $((namespaces * containers_per_pod * processes_per_pod * replicas * deps_per_namespace))
}

function help_options_sysbench() {
    cat <<'EOF'
    Sysbench General Options:
       --sysbench-general-options=<options>
                        Space or comma separated general Sysbench options
       --sysbench-generic-options=<options>
                        Space or comma separated generic Sysbench options
       --sysbench-fileio-tests=<modes>
                        Space or comma separated list of file test modes
                        to use (seqwr, seqrewr, seqrd, rndrd, rndwr, rndrw)
                        If multiple modes are specified, modes are
                        spread around.
       --sysbench-fileio-options=<options>
                        Space or comma separated fileio Sysbench options
EOF
}

function document_sysbench() {
    cat <<'EOF'
* sysbench: scriptable multi-threaded benchmark tool based on LuaJIT.
  Currently supports only file I/O operations.
  See https://github.com/akopytov/sysbench
EOF
}

function process_options_sysbench() {
    local opt
    local -a unknown_opts=()
    local ftest
    for opt in "$@" ; do
	read -r noptname1 noptname optvalue <<< "$(parse_option "$opt")"
	case "$noptname1" in
	# Sysbench options
	    sysbenchgeneraloptions)     ___sysbench_generic_options+=(${optvalue//,/ })	;;
	    sysbenchgenericoptions)     ___sysbench_generic_options+=(${optvalue//,/ })	;;
	    sysbenchfileiooptions)      ___sysbench_fileio_options+=(${optvalue//,/ })	;;
	    sysbenchfileiotests)	___sysbench_fileio_test_string=$optvalue	;;
	    *) 				unknown_opts+=("$noptname ($noptname1)")	;;
	esac
    done
    if [[ -n "${unknown_opts[*]:-}" ]] ; then
	help "${unknown_opts[@]}"
    fi
    for ftest in ${___sysbench_fileio_test_string//,/ } ; do
	___sysbench_fileio_tests[$ftest]=1
    done
}

function supports_reporting_sysbench() {
    :
}

function report_options_sysbench() {
    cat <<EOF
"sysbench_general_options": [$(quote_list "${___sysbench_general_options[@]}")],
"sysbench_Generic_options": [$(quote_list "${___sysbench_generic_options[@]}")],
"sysbench_fileio_options": [$(quote_list "${___sysbench_fileio_options[@]}")],
"sysbench_fileio_tests": [$(quote_list ${___sysbench_fileio_test_string//,/ })]
EOF
}

register_workload sysbench dispatch_generic
