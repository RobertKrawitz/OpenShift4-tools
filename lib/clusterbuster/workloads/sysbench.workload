#!/bin/bash

# Copyright 2019-2022 Robert Krawitz/Red Hat
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

################################################################
# Sysbench workload
################################################################

# Sysbench options
declare -gA ___sysbench_options=()
declare -g ___sysbench_workload=fileio
declare -g ___sysbench_fileio_test_string='seqwr seqrd rndwr rndrd'
declare -g ___sysbench_fileio_mode_string='sync'

function sysbench_arglist() {
    local mountdir=$1; shift
    while [[ "$1" != '--' ]] ; do shift; done; shift
    local workdir=${common_workdir:-${emptydirs[0]:-/tmp}}
    mk_yaml_args "python3" "${mountdir}sysbench.py" "$@" \
		 "svc-${namespace}-sysbench-${instance}-${replica:-1}-dc" "$drop_cache_port" \
		 "$processes_per_pod" "$workdir" "$workload_run_time" "$___sysbench_workload" \
		 "${___sysbench_fileio_test_string:+$___sysbench_fileio_test_string}" \
		 "${___sysbench_fileio_mode_string:+$___sysbench_fileio_mode_string}" \
		 "${___sysbench_options[@]}"
}

function sysbench_create_deployment() {
    local namespace=$1
    local count=${2:-1}
    local secret_count=${3:-1}
    local replicas=${4:-1}
    local containers_per_pod=${5:-1}
    local -i instance
    container_image="quay.io/rkrawitz/clusterbuster-workloads:${arch}-${perf_ci_tag}"
    create_sync_service "$namespace" \
			"$((containers_per_pod * processes_per_pod * replicas * count))" \
			"$((containers_per_pod * replicas * count))"
    for instance in $(seq "$first_deployment" $((count + first_deployment - 1))) ; do
	if [[ $___sysbench_workload = fileio ]] ; then
	    create_drop_cache_deployment "$namespace" "$workload" "$instance" "$replicas"
	fi
	create_standard_deployment -a sysbench_arglist -e sysbench.py -p \
				   "$namespace" "$instance" "$secret_count" "$replicas" "$containers_per_pod"
    done
}

function sysbench_list_configmaps() {
    cat <<EOF
${__podfile_dir__}/sysbench.py
EOF
}

function sysbench_calculate_logs_required() {
    local -i namespaces=$1
    local -i deps_per_namespace=${2:-1}
    local -i replicas=${3:-1}
    local -i containers_per_pod=${4:-1}
    echo $((namespaces * containers_per_pod * processes_per_pod * replicas * deps_per_namespace))
}

function sysbench_help_options() {
    cat <<'EOF'
    Sysbench Options:
       --sysbench-workload=<workload>
			Which sysbench workload to run (fileio, cpu, memory,
			threads, mutex; oltp is not currently supported)
       --sysbench-fileio-tests=<modes>
                        Space or comma separated list of file test modes
                        to use (seqwr, seqrewr, seqrd, rndrd, rndwr, rndrw).
       All other options prefixed with "--sysbench-" are treated as sysbench
       options, with the "sysbench" prefix removed.
EOF
}

function sysbench_document() {
    cat <<'EOF'
* sysbench: scriptable multi-threaded benchmark tool based on LuaJIT.
  Currently supports cpu, fileio, memory, mutex, and threads workloads.
  See https://github.com/akopytov/sysbench
EOF
}

function _sysbench_set_option() {
    local option=$1
    local value=${2:-}
    local val="${value/sysbench-/--}"
    if [[ $value = *'='?* ]] ; then
	___sysbench_options["$option"]="$val"
    else
	if [[ -n "${___sysbench_options[$option]}" ]] ; then
	    unset ___sysbench_options["$option"]
	fi
    fi
}

function sysbench_process_options() {
    local opt
    local -a unknown_opts=()
    for opt in "$@" ; do
	read -r noptname1 noptname optvalue <<< "$(parse_option "$opt")"
	case "$noptname1" in
	# Sysbench options
	    sysbenchworkload)	 ___sysbench_workload=$optvalue 		   ;;
	    sysbenchfileiotest*) ___sysbench_fileio_test_string="${optvalue//,/ }" ;;
	    sysbenchfileiomode*) ___sysbench_fileio_mode_string="${optvalue//,/ }" ;;
	    sysbenchtime)	set_runtime "$optvalue"				   ;;
	    sysbench*)		 _sysbench_set_option "$noptname1" "$opt"	   ;;
	    *) 			unknown_opts+=("$noptname ($noptname1)")	   ;;
	esac
    done
    if [[ -n "${unknown_opts[*]:-}" ]] ; then
	warn "Notice: the following options are not known: ${unknown_opts[*]}"
    fi
}

function sysbench_supports_reporting() {
    :
}

function sysbench_report_options() {
    if [[ $___sysbench_workload = fileio ]] ; then
	cat <<EOF
"sysbench_fileio_tests": [$(quote_list ${___sysbench_fileio_test_string//,/ })],
"sysbench_fileio_modes": [$(quote_list ${___sysbench_fileio_mode_string//,/ })],
EOF
    fi
    cat <<EOF
"sysbench_workload": "$___sysbench_workload",
"sysbench_options": [$(quote_list "${___sysbench_options[@]}")]
EOF
}

function sysbench_namespace_policy() {
    if [[ ${___sysbench_workload:-fileio} = fileio ]] ; then
	echo privileged
    else
	echo restricted
    fi
}

register_workload sysbench
