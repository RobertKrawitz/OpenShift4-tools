#!/bin/bash

# Copyright 2019-2022 Robert Krawitz/Red Hat
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

################################################################
# Sysbench workload
################################################################

# Sysbench options
declare -ag ___sysbench_generic_options=()
declare -ag ___sysbench_fileio_options=()
declare -Ag ___sysbench_fileio_tests=()
declare -g ___sysbench_fileio_test_string='seqwr,seqrd,rndwr,rndrd'

function _createContainersSysbenchYAML() {
    local namespace=$1
    local instance=$2
    local secretCount=$3
    local -i processes=$4
    local -i containersPerPod=$5
    local log_host=${6:-}
    local -i log_port=${7:-0}
    local -i container
    local syncService=
    local syncPortNum=
    IFS=: read -r syncService syncPortNum <<< $(getSync)
    # shellcheck disable=2031
    local workdir=${common_workdir:-${emptydirs[0]:-/tmp}}
    for container in $(seq 0 $((containersPerPod - 1))) ; do
	cat <<EOF
- name: "c${container}"
  imagePullPolicy: $imagePullPolicy
  image: "$containerImage"
$(indent 2 containerResourcesYAML)
  env:
  - name: VERBOSE
    value: "$verbose"
$(indent 2 bootstrapCommandYAML sysbench.pl)
  - "$namespace"
  - "c${container}"
  - "$basetime"
  - "$baseoffset"
  - "$(ts)"
  - "$poddelay"
  - "$processes"
  - "$workdir"
  - "$workloadRunTime"
  - "$exitAtEnd"
  - "$syncService"
  - "$syncPortNum"
  - "$log_host"
  - "$log_port"
  - "${___sysbench_generic_options[*]:-}"
  - "fileio"
  - "${___sysbench_fileio_options[*]:-}"
  - "${!___sysbench_fileio_tests[*]}"
$(indent 2 volumeMountsYAML "$namespace" "$instance" "$secretCount")
EOF
    done
}

function _createSysbenchDeployment() {
    local namespace=$1
    local instance=$2
    local secretCount=$3
    local name=${namespace}-sysbench-${instance}
    if [[ $deploymentType = pod ]] ; then
	createObject -n "$namespace" "$name" <<EOF
apiVersion: v1
kind: Pod
metadata:
  name: ${namespace}-sysbench-${instance}
$(indent 2 namespaceYAML "$namespace")
$(indent 2 privilegeYAML)
  selector:
    matchLabels:
      app: ${namespace}-sysbench-${instance}
$(indent 2 standardLabelsYAML sysbench "$namespace" "$instance" 1)
$(createSpec _createContainersSysbenchYAML "$@")
  restartPolicy: Never
EOF
    else
	createObject -n "$namespace" "$name" <<EOF
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${namespace}-sysbench-$instance
$(indent 2 namespaceYAML "$namespace")
$(indent 2 privilegeYAML)
$(indent 2 standardLabelsYAML)
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ${namespace}-sysbench-$instance
  strategy:
    type: RollingUpdate
  template:
    metadata:
$(indent 6 standardLabelsYAML sysbench "$namespace" "$instance" 1)
$(indent 4 createSpec _createContainersSysbenchYAML "$@")
EOF
    fi
}

function createDeploymentSysbench() {
    local namespace=$1
    local count=${2:-1}
    local secretCount=${3:-1}
    local replicas=${4:-1}
    local containersPerPod=${5:-1}
    local log_host=${6:-}
    local -i log_port=${7:-0}
    local -i instance
    createSyncServiceIfNeeded "$namespace" "$(( (${#___sysbench_fileio_tests[@]} * 3) + 1))" "$((containersPerPod * replicas * count))"
    for instance in $(seq $firstDeployment $((count + firstDeployment - 1))) ; do
	_createSysbenchDeployment "$namespace" "$instance" "$secretCount"  "$replicas" "$containersPerPod" "$log_host" "$log_port"
    done
}

function listConfigMapsSysbench() {
    cat <<EOF
${__libdir__}/sysbench.pl
${__libdir__}/sync.pl
EOF
}

function calculateLogsRequiredSysbench() {
    local -i namespaces=$1
    local -i depsPerNamespace=${2:-1}
    local -i replicas=${3:-1}
    local -i containersPerPod=${4:-1}
    echo $((namespaces * containersPerPod * processes_per_pod * replicas * depsPerNamespace))
}

function helpOptionsSysbench() {
    cat <<'EOF'
    Sysbench General Options:
       --sysbench-general-options=<options>
                        Space or comma separated general Sysbench options
       --sysbench-generic-options=<options>
                        Space or comma separated generic Sysbench options
       --sysbench-fileio-tests=<modes>
                        Space of comma separated list of file test modes
                        to use (seqwr, seqrewr, seqrd, rndrd, rndwr, rndrw)
                        If multiple modes are specified, modes are
                        spread around.
       --sysbench-fileio-options=<options>
                        Space or comma separated fileio Sysbench options
EOF
}

function documentSysbench() {
    cat <<'EOF'
* sysbench: scriptable multi-threaded benchmark tool based on LuaJIT.
  Currently supports only file I/O operations.
  See https://github.com/akopytov/sysbench
EOF
}

function processOptionsSysbench() {
    local opt
    local -a unknown_opts=()
    local ftest
    for opt in "$@" ; do
	read -r noptname1 noptname optvalue <<< "$(parse_option "$opt")"
	case "$noptname1" in
	# Sysbench options
	    sysbenchgeneraloptions)     ___sysbench_generic_options+=(${optvalue//,/ })	;;
	    sysbenchgenericoptions)     ___sysbench_generic_options+=(${optvalue//,/ })	;;
	    sysbenchfileiooptions)      ___sysbench_fileio_options+=(${optvalue//,/ })	;;
	    sysbenchfileiotests)	___sysbench_fileio_test_string=$optvalue	;;
	    *) 				unknown_opts+=("$noptname ($noptname1)")	;;
	esac
    done
    if [[ -n "${unknown_opts[*]:-}" ]] ; then
	help "${unknown_opts[@]}"
    fi
    for ftest in ${___sysbench_fileio_test_string//,/ } ; do
	___sysbench_fileio_tests[$ftest]=1
    done
}

function supportsReportingSysbench() {
    :
}

function reportOptionsSysbench() {
    cat <<EOF
"sysbenchGeneralOptions": [$(quote_list "${___sysbench_general_options[@]}")],
"sysbenchGenericOptions": [$(quote_list "${___sysbench_generic_options[@]}")],
"sysbenchFileIOOptions": [$(quote_list "${___sysbench_fileio_options[@]}")],
"sysbenchFileIOTests": [$(quote_list ${___sysbench_fileio_test_string//,/ })]
EOF
}

register_workload Sysbench dispatch_generic
