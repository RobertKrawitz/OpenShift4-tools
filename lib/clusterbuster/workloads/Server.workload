#!/bin/bash

# Copyright 2019-2022 Robert Krawitz/Red Hat
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

################################################################
# Client/server workload
################################################################

declare -ig ___msgSize=32768

function _createServerContainerYAML() {
    local namespace=$1
    local instance=$2
    local secretCount=$3
    local expectedClients=$4
    cat <<EOF
- name: server
  image: "$containerImage"
  imagePullPolicy: $imagePullPolicy
$(indent 2 containerResourcesYAML)
  ports:
  - containerPort: $port
$(indent 2 bootstrapCommandYAML server.pl)
  - "$basetime"
  - "$baseoffset"
  - "$port"
  - "${namespace}-${instance}-server"
  - "$___msgSize"
  - "$(ts)"
  - "$expectedClients"
$(indent 2 volumeMountsYAML "$namespace" "$instance" "$secretCount")
EOF
}

function _createServerDeployment() {
    local namespace=$1
    local instance=$2
    local secretCount=$3
    local name=${namespace}-${instance}-server
    if [[ $deploymentType = pod ]] ; then
	createObject -n "$namespace" "$name" <<EOF
apiVersion: v1
kind: Pod
metadata:
  name: "$name"
$(indent 2 namespaceYAML "$namespace")
$(indent 2 privilegeYAML)
  selector:
    matchLabels:
      app: ${namespace}-${instance}
$(indent 2 standardLabelsYAML server "$namespace" "$instance")
$(createSpec -c server _createServerContainerYAML "$@")
  restartPolicy: Never
EOF
    else
	createObject -n "$namespace" "$name" <<EOF
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "$name"
$(indent 2 namespaceYAML "$namespace")
$(indent 2 privilegeYAML)
$(indent 2 standardLabelsYAML)
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ${namespace}-$instance
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
$(indent 6 standardLabelsYAML server "$namespace" "$instance")
$(indent 4 createSpec -c server _createServerContainerYAML "$@")
EOF
    fi
}

function _createClientContainerYAML() {
    local namespace=$1
    local instance=$2
    local secretCount=$3
    local containersPerPod=$5
    local log_host=$6
    local log_port=$7
    local -i container
    local syncService=
    local syncPortNum=
    IFS=: read -r syncService syncPortNum <<< $(getSync)
    if [[ $targetDataRate != 0 && $targetDataRate != '' && $workloadRunTimeMax -eq 0 && bytesTransferMax -eq 0 ]] ; then
	bytesTransfer=$defaultBytesTransfer
	bytesTransferMax=$defaultBytesTransfer
    fi
    for container in $(seq 0 $((containersPerPod - 1))) ; do
	cat <<EOF
- name: c${container}
  image: "$containerImage"
  imagePullPolicy: $imagePullPolicy
$(indent 2 containerResourcesYAML)
  env:
  - name: VERBOSE
    value: "$verbose"
$(indent 2 bootstrapCommandYAML client.pl)
  - "$namespace"
  - "$container"
  - "$basetime"
  - "$baseoffset"
  - "$poddelay"
  - "$port"
  - "c${container}"
  - "service-${namespace}-server-$instance"
  - "$targetDataRate"
  - "$bytesTransfer"
  - "$bytesTransferMax"
  - "$___msgSize"
  - "$workloadRunTime"
  - "$workloadRunTimeMax"
  - "$(ts)"
  - "$exitAtEnd"
  - "$syncService"
  - "$syncPortNum"
  - "$namespace"
  - "$log_host"
  - "$log_port"
$(indent 2 volumeMountsYAML "$namespace" "$instance" "$secretCount")
EOF
    done
}

function _createClientAffinityYAML() {
    (( affinity )) || return 0
    local server=$1
    local affinityType
    case "$affinity" in
	1) affinityType=Affinity     ;;
	*) affinityType=AntiAffinity ;;
    esac
    cat << EOF
affinity:
  pod$affinityType:
    requiredDuringSchedulingIgnoredDuringExecution:
    - labelSelector:
        matchExpressions:
        - key: app
          operator: In
          values:
          - "$server"
      topologyKey: kubernetes.io/hostname
EOF
}

function _createClientDeployment() {
    local namespace=$1
    local instance=$2
    local secretCount=$3
    local replicas=$4
    local affinityYAML="$(_createClientAffinityYAML "${namespace}-server-${instance}")"
    if [[ $deploymentType = pod ]] ; then
	local -i replica=0
	while (( replica++ < replicas )) ; do
	    local name=${namespace}-${instance}-client-${replica}
	    createObject -n "$namespace" "$name" <<EOF
apiVersion: v1
kind: Pod
metadata:
  name: $name
$(indent 2 namespaceYAML "$namespace")
$(indent 2 privilegeYAML)
$(indent 2 privilegeYAML)
  selector:
    matchLabels:
      app: ${namespace}-${instance}-client
$(indent 2 standardLabelsYAML client "$namespace" "$instance" 1)
$(createSpec ${affinityYAML:+-A "$affinityYAML"} _createClientContainerYAML "$@" "$replica")
  restartPolicy: Never
EOF
	done
    else
	local name=${namespace}-${instance}-client
	createObject -n "$namespace" "$name" <<EOF
apiVersion: apps/v1
kind: Deployment
metadata:
  name: $name
$(indent 2 privilegeYAML)
$(indent 2 namespaceYAML "$namespace")
$(indent 2 standardLabelsYAML)
spec:
  replicas: $replicas
  restartPolicy: Always
  selector:
    matchLabels:
      app: ${namespace}-${instance}-client
  strategy:
    type: RollingUpdate
  template:
    metadata:
$(indent 6 standardLabelsYAML client "$namespace" "$instance" 1)
$(indent 4 createSpec ${affinityYAML:+-A "$affinityYAML"} _createClientContainerYAML "$@" "x")
EOF
    fi
}

function createDeploymentServer() {
    local namespace=$1
    local count=${2:-1}
    local secretCount=${3:-1}
    local replicas=${4:-1}
    local containersPerPod=${5:-1}
    local log_host=${6:-}
    local -i log_port=${7:-0}
    local -i instance
    createSyncServiceIfNeeded "$namespace" 2 "$((containersPerPod * replicas * count))"

    for instance in $(seq $firstDeployment $((count + firstDeployment - 1))) ; do
	createService "$namespace" "${namespace}-server-${instance}" "$port"
	if [[ $deploymentType = pod ]] ; then
	    _createServerDeployment "$namespace" "$instance" "$secretCount" "$((containersPerPod * replicas))"
	else
	    _createServerDeployment "$namespace" "$instance" "$secretCount" "-1"
	fi
	_createClientDeployment "$namespace" "$instance" "$secretCount" "$replicas" "$containersPerPod" "$log_host" "$log_port"
    done
}

function listConfigMapsServer() {
    cat <<EOF
${__libdir__}/client.pl
${__libdir__}/server.pl
${__libdir__}/sync.pl
EOF
}

function calculateLogsRequiredServer() {
    local -i namespaces=$1
    local -i depsPerNamespace=${2:-1}
    local -i replicas=${3:-1}
    local -i containersPerPod=${4:-1}
    echo $((namespaces * containersPerPod * replicas * depsPerNamespace))
}

function helpOptionsServer() {
    cat <<'EOF'
    Client/server options:
       msgsize         Message size in data transfer
       pin_node=server=<node>
                       Specify node to which the server is bound.
EOF
}

function documentServer() {
    cat <<'EOF'
* server: a client-server workload with optional bidirectional data
  trasfer, optionally at a specified data rate.
EOF
}

function processOptionsServer() {
    local opt
    local -a unknown_opts=()
    local ftest
    for opt in "$@" ; do
	read -r noptname1 noptname optvalue <<< "$(parse_option "$opt")"
	case "$noptname1" in
	    msgSize) ___msgSize=$optvalue ;;
	    *) unknown_opts+=("$noptname ($noptname1)")	;;
	esac
    done
    if [[ -n "${unknown_opts[*]:-}" ]] ; then
	help "${unknown_opts[@]}"
    fi
    if (( ___msgSize <= 0 )) ; then
	fatal "Message size must be positive, exiting!"
    fi
}

function supportsReportingServer() {
    :
}

function reportOptionsServer() {
    cat <<EOF
"msgSize": $___msgSize
EOF
}

register_workload Server dispatch_generic
