#!/bin/bash

# Copyright 2019-2022 Robert Krawitz/Red Hat
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

################################################################
# Client/server workload
################################################################

declare -ga ___uperf_msg_sizes=(1024)
declare -ga ___uperf_test_types=(stream)
declare -ga ___uperf_protos=(tcp)
declare -ga ___uperf_nthrs=(1)
declare -ag ___uperf_tests=()
declare -gir ___uperf_port=30000
declare -gi ___uperf_port_addrs=24
declare -gi ___uperf_ramp_time=3
declare -g ___uperf_interface=
declare -g ___uperf_interface_server=
declare -g ___uperf_interface_client=
declare -g ___uperf_interface_pod_server=
declare -g ___uperf_interface_pod_client=

function uperf_server_arglist() {
    local mountdir=$1; shift
    while [[ "$1" != '--' ]] ; do shift; done; shift
    mk_yaml_args "python3" "${mountdir}uperf-server.py" "$@" "$___uperf_port"
}

function uperf_sysctls() {
    if [[ -z "$___uperf_interface_pod_server" ]] ; then
	cat <<EOF
net.ipv4.ip_local_port_range $___uperf_port $((___uperf_port + ___uperf_port_addrs))
EOF
    fi
}

function uperf_client_arglist() {
    local mountdir=$1; shift
    while [[ "$1" != '--' ]] ; do shift; done; shift
    # We need the address of the server, hence using $uperf_interface_pod_server
    mk_yaml_args "python3" "${mountdir}uperf-client.py" "$@" "$workload_run_time" "$___uperf_ramp_time" \
		 "${___uperf_interface_pod_server:+${___uperf_interface_pod_server}@}${namespace}-uperf-server-${instance}-1" \
		 "$___uperf_port" "${___uperf_tests[@]}"
}

function uperf_create_deployment() {
    local namespace=$1
    local count=${2:-1}
    local secret_count=${3:-1}
    local replicas=${4:-1}
    local containers_per_pod=${5:-1}
    local -i instance
    local server_annotation
    local client_annotation
    if [[ -n "$___uperf_interface" ]] ; then
	___uperf_interface_server=${___uperf_interface_server:-$___uperf_interface}
	___uperf_interface_client=${___uperf_interface_client:-$___uperf_interface}
    fi
    if [[ -n "$___uperf_interface_client" ]] ; then
	if [[ $___uperf_interface_client = *'='* ]] ; then
	    ___uperf_interface_pod_client=${___uperf_interface_client#*=}
	    ___uperf_interface_client=${___uperf_interface_client%%=*}
	fi
	if [[ -z "$___uperf_interface_pod_client" && $___uperf_interface_client != eth0 ]] ; then
	    ___uperf_interface_pod_client=net1
	fi
	client_annotation="k8s.v1.cni.cncf.io/networks: $___uperf_interface_client"
    fi
    if [[ -n "$___uperf_interface_server" ]] ; then
	if [[ $___uperf_interface_server = *'='* ]] ; then
	    ___uperf_interface_pod_server=${___uperf_interface_server#*=}
	    ___uperf_interface_server=${___uperf_interface_server%%=*}
	fi
	if [[ -z "$___uperf_interface_pod_server" && $___uperf_interface_server != eth0 ]] ; then
	    ___uperf_interface_pod_server=net1
	fi
	server_annotation="k8s.v1.cni.cncf.io/networks: $___uperf_interface_server"
    fi
    if ((((replicas * containers_per_pod * processes_per_pod) + 4) > ___uperf_port_addrs)) ; then
	___uperf_port_addrs=$(((replicas * containers_per_pod * processes_per_pod) + 4))
    fi
    container_image="quay.io/rkrawitz/clusterbuster-workloads:latest"
    create_sync_service "$namespace" \
			"$((containers_per_pod * replicas * count))" \
			"$(( (containers_per_pod * replicas * count) + count))"

    for ((instance = first_deployment; instance < count + first_deployment; instance++)) ; do
	if [[ -z "${___uperf_interface}" ]] ; then
	    create_service -k replica -e "$namespace" "${namespace}-uperf-server-${instance}-1" \
			   $(seq "$___uperf_port" $((___uperf_port + ___uperf_port_addrs)))
	fi
	create_standard_deployment -w uperf-server -p -c server \
				   -A "$(create_affinity_yaml "${namespace}-uperf-client-${instance}")" \
				   -a uperf_server_arglist \
				   ${server_annotation:+-N "$server_annotation"} \
				   "$namespace" "$instance" "$secret_count" 1 1
	create_standard_deployment -w uperf-client \
				   -A "$(create_affinity_yaml "${namespace}-uperf-server-${instance}")" \
				   -a uperf_client_arglist \
				   ${client_annotation:+-N "$client_annotation"} \
				   "$namespace" "$instance" "$secret_count" "$replicas" "$containers_per_pod"
    done
}

function uperf_list_configmaps() {
    cat <<EOF
$(find_on_path pod_files "uperf-client.py")
$(find_on_path pod_files "uperf-server.py")
$(find_on_path pod_files "uperf-mini.xml")
$(find_on_path pod_files "uperf-rr.xml")
$(find_on_path pod_files "uperf-stream.xml")
EOF
}

function uperf_help_options() {
    cat <<'EOF'
    Uperf Options:
       --pin_node=server=<node>
                       Specify node to which the server is bound.
       --pin_node=client=<node>
                       Specify node to which the client is bound.
       --uperf-ramp-time=<sec>
                       Specify the ramp time for uperf.
       --uperf-interface=<interface[=pod_interface]>
                       Specify the network interface to use.  Optional
                       pod interface is the name of the interface on the
                       pod (normally net1).
       --uperf-interface-server=<interface[=pod_interface]>
       --uperf-interface-client=<interface[=pod_interface]>
                       Specify the interfaces for client and server
                       separately.
     The following options take a comma-separated list of each
     value to test.  The outer product of all specified tests
     is run.
       --uperf-msg-size=<sizes>
                       Specify the message size(s) to be tested.
       --uperf-test-type=<types>
                       Type of test to run (currently stream or rr)
       --uperf-protocol=protocol
                       Protocol (tcp or udp).
       --uperf-nthr=<n>
                       Number of threads to be tested.
EOF
}

function uperf_document() {
    cat <<'EOF'
* uperf: a partial front end to uperf (https://www.uperf.org)
EOF
}

function uperf_process_options() {
    local opt
    local -a unknown_opts=()
    processes_per_pod=1
    for opt in "$@" ; do
	read -r noptname1 noptname optvalue <<< "$(parse_option "$opt")"
	# shellcheck disable=SC2206
	# shellcheck disable=SC2034
	case "$noptname1" in
	    uperfmsgsize*) ___uperf_msg_sizes=(${optvalue//,/ })   ;;
	    uperftesttype*) ___uperf_test_types=(${optvalue//,/ }) ;;
	    uperfproto*) ___uperf_protos=(${optvalue//,/ })	   ;;
	    uperfnthr*) ___uperf_nthrs=(${optvalue//,/ })	   ;;
	    uperframp*) ___uperf_ramp_time=$optvalue		   ;;
	    uperfinterface) ___uperf_interface=$optvalue	   ;;
	    uperfinterfaces*) ___uperf_interface_server=$optvalue  ;;
	    uperfinterfacec*) ___uperf_interface_client=$optvalue  ;;
	    *) unknown_opts+=("$noptname ($noptname1)")		   ;;
	esac
    done
    if [[ -n "${unknown_opts[*]:-}" ]] ; then
	warn "Notice: the following options are not known: ${unknown_opts[*]}"
    fi
    if (( ___uperf_msg_sizes <= 0 )) ; then
	fatal "Message size must be positive, exiting!"
    fi
    if ((___uperf_ramp_time < 0)) ; then
	___uperf_ramp_time=0
    fi
    local -i msgsize
    local testtype
    local proto
    local -i nthr
    for testtype in "${___uperf_test_types[@]}" ; do
	for proto in "${___uperf_protos[@]}" ; do
	    for msgsize in "${___uperf_msg_sizes[@]}" ; do
		for nthr in "${___uperf_nthrs[@]}" ; do
		    ___uperf_tests+=("${testtype},${proto},${msgsize},${nthr}")
		done
	    done
	done
    done
}

function uperf_generate_metadata() {
    local -a jobs=()
    local -i jobidx=1
    local -i msgsize
    local testtype
    local proto
    local -i nthr
    echo '"run_time": ' $((workload_run_time - (2 * ___uperf_ramp_time))) ,
    echo '"ramp_time": ' $___uperf_ramp_time ,
    echo '"jobs": {'
    for testtype in "${___uperf_test_types[@]}" ; do
	for proto in "${___uperf_protos[@]}" ; do
	    for msgsize in "${___uperf_msg_sizes[@]}" ; do
		for nthr in "${___uperf_nthrs[@]}" ; do
		    jobs+=("$(cat <<EOF
$(printf '"%04d-%s-%s-%dB-%di"' $((jobidx)) "$proto" "$testtype" "$msgsize" "$nthr"): {
  "test_type": "$testtype",
  "proto": "$proto",
  "msgsize": $msgsize,
  "nthr": $nthr
}
EOF
)")
		    jobidx=$((jobidx+1))
		done
	    done
	done
    done
    (IFS=$',\n'; echo "${jobs[*]}")
    echo '}'
}

function __uperf_stringify() {
    local OPTIND=0
    local -i print_strings=0
    while getopts 'ns' arg "$@" ; do
	case "$arg" in
	    n) print_strings=0 ;;
	    s) print_strings=1 ;;
	    *)		       ;;
	esac
    done
    shift $((OPTIND-1))
    local -a args=("$@")
    args=("$@")
    if ((print_strings)) ; then
	args=("${args[@]/#/\"}")
	args=("${args[@]/%/\"}")
    fi
    printf '[ %s ]' "$(IFS=$', '; echo "${args[*]}")"
}

function uperf_report_options() {
    cat <<EOF
"msg_size": $(__uperf_stringify -n "${___uperf_msg_sizes[@]}"),
"test_types": $(__uperf_stringify -s "${___uperf_test_types[@]}"),
"protocols": $(__uperf_stringify -s "${___uperf_protos[@]}"),
"nthrs": $(__uperf_stringify -n "${___uperf_nthrs[@]}"),
"ramp_time": ${___uperf_ramp_time},
"server_interface": "${___uperf_interface_server}",
"client_interface": "${___uperf_interface_client}"
EOF
}

register_workload uperf
