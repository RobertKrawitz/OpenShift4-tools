#!/bin/bash

# Copyright 2019-2022 Robert Krawitz/Red Hat
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

################################################################
# Client/server workload
################################################################

declare -ga ___uperf_msg_sizes=(1024)
declare -ga ___uperf_test_types=(stream)
declare -ga ___uperf_protos=(tcp)
declare -ga ___uperf_nthrs=(1)
declare -ag ___uperf_tests=()
declare -gir ___uperf_port=30000
declare -gir ___uperf_port_addrs=24
declare -gi ___uperf_ramp_time=3

function _uperf_server_create_container_yaml() {
    local namespace=$1
    local instance=$2
    local secret_count=$3
    local expected_clients=$4
    cat <<EOF
- name: server
  image: "$container_image"
  image_pull_policy: $image_pull_policy
$(indent 2 container_standard_auxiliary_yaml)
  ports:
  - containerPort: $___uperf_port
$(indent 2 bootstrap_command_yaml uperf-server.pl)
  - "$basetime"
  - "$baseoffset"
  - "$___uperf_port"
$(indent 2 volume_mounts_yaml "$namespace" "$instance" "$secret_count")
EOF
}

function _uperf_create_security_context() {
    cat <<EOF
securityContext:
  sysctls:
  - name: net.ipv4.ip_local_port_range
    value: $___uperf_port $((___uperf_port + ___uperf_port_addrs))
EOF
}

function _uperf_server_create_deployment() {
    local namespace=$1
    local instance=$2
    local secret_count=$3
    local name=${namespace}-${instance}-server
    create_object -n "$namespace" "$name" <<EOF
apiVersion: v1
kind: Pod
metadata:
  name: $(mkpodname "$name")
$(indent 2 standard_all_metadata_yaml "$namespace" server)
  selector:
    matchLabels:
      app: ${namespace}-${instance}
$(indent 2 standard_labels_yaml ${requested_workload}-server "$namespace" "$instance")
$(create_spec -c server _${requested_workload}_server_create_container_yaml "$@")
$(indent 2 _${requested_workload}_create_security_context)
  restartPolicy: Never
EOF
}

function uperf_client_create_containers_yaml() {
    make_standard_containers -c uperf-client.pl -- "$@" <<EOF
$workload_run_time
$___uperf_ramp_time
svc-${namespace}-uperf-server-$instance
$___uperf_port
$(IFS=$'\n'; echo "${___uperf_tests[*]}")
EOF
}

function _uperf_create_client_affinity_yaml() {
    (( affinity )) || return 0
    local server=$1
    local affinity_type
    case "$affinity" in
	1) affinity_type=Affinity     ;;
	*) affinity_type=AntiAffinity ;;
    esac
    cat << EOF
affinity:
  pod$affinity_type:
    requiredDuringSchedulingIgnoredDuringExecution:
    - labelSelector:
        matchExpressions:
        - key: app
          operator: In
          values:
          - "$server"
      topologyKey: kubernetes.io/hostname
EOF
}

function uperf_create_deployment() {
    local namespace=$1
    local count=${2:-1}
    local secret_count=${3:-1}
    local replicas=${4:-1}
    local containers_per_pod=${5:-1}
    local -i instance
    create_sync_service_if_needed "$namespace" $((${#___uperf_tests[@]} + 2)) "$((containers_per_pod * replicas * count))"

    for instance in $(seq "$first_deployment" $((count + first_deployment - 1))) ; do
	create_service "$namespace" "${namespace}-uperf-server-${instance}" $(seq "$___uperf_port" $((___uperf_port + ___uperf_port_addrs)))
	if [[ $deployment_type = pod ]] ; then
	    _uperf_server_create_deployment "$namespace" "$instance" "$secret_count" "$((containers_per_pod * replicas))"
	else
	    _uperf_server_create_deployment "$namespace" "$instance" "$secret_count" "-1"
	fi
	create_standard_deployment -w uperf_client -A "$(_uperf_create_client_affinity_yaml)" -S "$(_uperf_create_security_context)" \
				   "$namespace" "$instance" "$secret_count" "$replicas" "$containers_per_pod"
    done
}

function uperf_list_configmaps() {
    cat <<EOF
${__podfile_dir__}/uperf-client.pl
${__podfile_dir__}/uperf-server.pl
${__podfile_dir__}/uperf-mini.xml
${__podfile_dir__}/uperf-rr.xml
${__podfile_dir__}/uperf-stream.xml
EOF
}

function uperf_calculate_logs_required() {
    local -i namespaces=$1
    local -i deps_per_namespace=${2:-1}
    local -i replicas=${3:-1}
    local -i containers_per_pod=${4:-1}
    echo $((namespaces * containers_per_pod * replicas * deps_per_namespace))
}

function uperf_help_options() {
    cat <<'EOF'
    Uperf Options:
       --workload-runtime
                       How many seconds to run each test for.
       --pin_node=server=<node>
                       Specify node to which the server is bound.
     The following options take a comma-separated list of each
     value to test.  The outer product of all specified tests
     is run.
       --uperf-msg-size=<sizes>
                       Specify the message size(s) to be tested.
       --uperf-test-type=<types>
                       Type of test to run (currently stream or rr)
       --uperf-protocol=protocol
                       Protocol (tcp or udp).
       --uperf-nthr=<n>
                       Number of threads to be tested.
EOF
}

function uperf_document() {
    cat <<'EOF'
* uperf: a partial front end to uperf (https://www.uperf.org)
EOF
}

function uperf_process_options() {
    local opt
    local -a unknown_opts=()
    for opt in "$@" ; do
	read -r noptname1 noptname optvalue <<< "$(parse_option "$opt")"
	# shellcheck disable=SC2206
	# shellcheck disable=SC2034
	case "$noptname1" in
	    uperfmsgsize*) ___uperf_msg_sizes=(${optvalue//,/ })   ;;
	    uperftesttype*) ___uperf_test_types=(${optvalue//,/ }) ;;
	    uperfproto*) ___uperf_protos=(${optvalue//,/ })	   ;;
	    uperfnthr*) ___uperf_nthrs=(${optvalue//,/ })	   ;;
	    uperframp*) ___uperf_ramp_time=$optvalue		   ;;
	    *) unknown_opts+=("$noptname ($noptname1)")		   ;;
	esac
    done
    if [[ -n "${unknown_opts[*]:-}" ]] ; then
	help "${unknown_opts[@]}"
    fi
    if (( ___uperf_msg_sizes <= 0 )) ; then
	fatal "Message size must be positive, exiting!"
    fi
    if ((___uperf_ramp_time < 0)) ; then
	___uperf_ramp_time=0
    fi
    local -i msgsize
    local testtype
    local proto
    local -i nthr
    for testtype in "${___uperf_test_types[@]}" ; do
	for proto in "${___uperf_protos[@]}" ; do
	    for msgsize in "${___uperf_msg_sizes[@]}" ; do
		for nthr in "${___uperf_nthrs[@]}" ; do
		    ___uperf_tests+=("${testtype},${proto},${msgsize},${nthr}")
		done
	    done
	done
    done
}

function uperf_supports_reporting() {
    :
}

function uperf_generate_metadata() {
    local -a jobs=()
    local -i jobidx=1
    local -i msgsize
    local testtype
    local proto
    local -i nthr
    echo '"run_time": ' $((workload_run_time - (2 * ___uperf_ramp_time))) ,
    echo '"ramp_time": ' $___uperf_ramp_time ,
    echo '"jobs": {'
    for testtype in "${___uperf_test_types[@]}" ; do
	for proto in "${___uperf_protos[@]}" ; do
	    for msgsize in "${___uperf_msg_sizes[@]}" ; do
		for nthr in "${___uperf_nthrs[@]}" ; do
		    jobs+=("$(cat <<EOF
$(printf '"%04d-%s-%s-%dB-%di"' $((jobidx)) "$proto" "$testtype" $msgsize $nthr): {
  "test_type": "$testtype",
  "proto": "$proto",
  "msgsize": $msgsize,
  "nthr": $nthr
}
EOF
)")
		    jobidx=$((jobidx+1))
		done
	    done
	done
    done
    (IFS=$',\n'; echo "${jobs[*]}")
    echo '}'
}

function uperf_report_options() {
    cat <<EOF
"msg_size": $___msg_size
EOF
}

register_workload uperf
