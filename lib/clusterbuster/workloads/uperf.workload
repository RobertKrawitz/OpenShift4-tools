#!/bin/bash

# Copyright 2019-2022 Robert Krawitz/Red Hat
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

################################################################
# Client/server workload
################################################################

declare -ga ___uperf_msg_sizes=(1024)
declare -ga ___uperf_test_types=(stream)
declare -ga ___uperf_protos=(tcp)
declare -ga ___uperf_nthrs=(1)
declare -ag ___uperf_tests=()
declare -gir ___uperf_port=30000
declare -gir ___uperf_port_addrs=24
declare -gi ___uperf_ramp_time=3

function _create_uperf_server_container_yaml() {
    local namespace=$1
    local instance=$2
    local secret_count=$3
    local expected_clients=$4
    cat <<EOF
- name: server
  image: "$container_image"
  image_pull_policy: $image_pull_policy
$(indent 2 container_standard_auxiliary_yaml)
  ports:
  - containerPort: $___uperf_port
$(indent 2 bootstrap_command_yaml uperf-server.pl)
  - "$basetime"
  - "$baseoffset"
  - "$___uperf_port"
$(indent 2 volume_mounts_yaml "$namespace" "$instance" "$secret_count")
EOF
}

function _create_uperf_server_deployment() {
    local namespace=$1
    local instance=$2
    local secret_count=$3
    local name=${namespace}-${instance}-server
    create_object -n "$namespace" "$name" <<EOF
apiVersion: v1
kind: Pod
metadata:
  name: "$name"
$(indent 2 standard_all_metadata_yaml "$namespace" server)
  selector:
    matchLabels:
      app: ${namespace}-${instance}
$(indent 2 standard_labels_yaml uperf-server "$namespace" "$instance")
$(create_spec -c server _create_uperf_server_container_yaml "$@")
  restartPolicy: Never
  securityContext:
    sysctls:
    - name: net.ipv4.ip_local_port_range
      value: $___uperf_port $((___uperf_port + ___uperf_port_addrs))
EOF
}

function _create_uperf_tests() {
    local test
    for test in "$@" ; do
	echo "- \"$test\""
    done
}

function _create_uperf_client_container_yaml() {
    local namespace=$1
    local instance=$2
    local secret_count=$3
    local containers_per_pod=$5
    local log_host=$6
    local log_port=$7
    local -i container
    local sync_service=
    local sync_port_num=
    IFS=: read -r sync_service sync_port_num <<< $(get_sync)
    for container in $(seq 0 $((containers_per_pod - 1))) ; do
	cat <<EOF
- name: c${container}
  image: "$container_image"
  image_pull_policy: $image_pull_policy
$(indent 2 container_standard_auxiliary_yaml)
  env:
  - name: VERBOSE
    value: "$verbose"
$(indent 2 bootstrap_command_yaml uperf-client.pl)
  - "$namespace"
  - "c$container"
  - "$basetime"
  - "$baseoffset"
  - "$(ts)"
  - "$exit_at_end"
  - "$sync_service"
  - "$sync_port_num"
  - "$log_host"
  - "$log_port"
  - "$workload_run_time"
  - "$___uperf_ramp_time"
  - "service-${namespace}-uperf-server-$instance"
  - "$___uperf_port"
$(indent 2 _create_uperf_tests "${___uperf_tests[@]}")
$(indent 2 volume_mounts_yaml "$namespace" "$instance" "$secret_count")
EOF
    done
}

function _create_uperf_client_affinity_yaml() {
    (( affinity )) || return 0
    local server=$1
    local affinity_type
    case "$affinity" in
	1) affinity_type=Affinity     ;;
	*) affinity_type=AntiAffinity ;;
    esac
    cat << EOF
affinity:
  pod$affinity_type:
    requiredDuringSchedulingIgnoredDuringExecution:
    - labelSelector:
        matchExpressions:
        - key: app
          operator: In
          values:
          - "$server"
      topologyKey: kubernetes.io/hostname
EOF
}

function _create_uperf_client_deployment() {
    local namespace=$1
    local instance=$2
    local secret_count=$3
    local replicas=$4
    local affinity_yaml="$(_create_client_affinity_yaml "${namespace}-uperf-server-${instance}")"
    if [[ $deployment_type = pod ]] ; then
	local -i replica=0
	while (( replica++ < replicas )) ; do
	    local name=${namespace}-${instance}-uperf-client-${replica}
	    create_object -n "$namespace" "$name" <<EOF
apiVersion: v1
kind: Pod
metadata:
  name: $name
$(indent 2 standard_all_metadata_yaml "$namespace" client)
  selector:
    matchLabels:
      app: ${namespace}-${instance}-uperf-client
$(indent 2 standard_labels_yaml uperf-client "$namespace" "$instance" 1)
$(create_spec ${affinity_yaml:+-A "$affinity_yaml"} _create_uperf_client_container_yaml "$@" "$replica")
  restartPolicy: Never
  securityContext:
    sysctls:
    - name: net.ipv4.ip_local_port_range
      value: $___uperf_port $((___uperf_port + ___uperf_port_addrs))
EOF
	done
    else
	local name=${namespace}-${instance}-client
	create_object -n "$namespace" "$name" <<EOF
apiVersion: apps/v1
kind: Deployment
metadata:
  name: $name
$(indent 2 standard_deployment_metadata_yaml "$namespace" client)
$(indent 2 standard_labels_yaml)
spec:
  replicas: $replicas
  restartPolicy: Always
  selector:
    matchLabels:
      app: ${namespace}-${instance}-client
  strategy:
    type: RollingUpdate
  template:
    metadata:
$(indent 6 standard_labels_yaml client "$namespace" "$instance" 1)
$(indent 6 standard_pod_metadata_yaml "$namespace" client)
$(indent 4 create_spec ${affinity_yaml:+-A "$affinity_yaml"} _create_client_container_yaml "$@" "x")
      securityContext:
	sysctls:
	- name: net.ipv4.ip_local_port_range
          value: $___uperf_port $((___uperf_port + ___uperf_port_addrs))
EOF
    fi
}

function create_deployment_uperf() {
    local namespace=$1
    local count=${2:-1}
    local secret_count=${3:-1}
    local replicas=${4:-1}
    local containers_per_pod=${5:-1}
    local log_host=${6:-}
    local -i log_port=${7:-0}
    local -i instance
    create_sync_service_if_needed "$namespace" $((${#___uperf_tests[@]} + 2)) "$((containers_per_pod * replicas * count))"

    for instance in $(seq "$first_deployment" $((count + first_deployment - 1))) ; do
	create_service "$namespace" "${namespace}-uperf-server-${instance}" $(seq "$___uperf_port" $((___uperf_port + ___uperf_port_addrs)))
	if [[ $deployment_type = pod ]] ; then
	    _create_uperf_server_deployment "$namespace" "$instance" "$secret_count" "$((containers_per_pod * replicas))"
	else
	    _create_uperf_server_deployment "$namespace" "$instance" "$secret_count" "-1"
	fi
	_create_uperf_client_deployment "$namespace" "$instance" "$secret_count" "$replicas" "$containers_per_pod" "$log_host" "$log_port"
    done
}

function list_configmaps_uperf() {
    cat <<EOF
${__podfile_dir__}/uperf-client.pl
${__podfile_dir__}/uperf-server.pl
${__podfile_dir__}/uperf-mini.xml
${__podfile_dir__}/uperf-rr.xml
${__podfile_dir__}/uperf-stream.xml
EOF
}

function calculate_logs_required_uperf() {
    local -i namespaces=$1
    local -i deps_per_namespace=${2:-1}
    local -i replicas=${3:-1}
    local -i containers_per_pod=${4:-1}
    echo $((namespaces * containers_per_pod * replicas * deps_per_namespace))
}

function help_options_uperf() {
    cat <<'EOF'
    uperf options:
       workload-runtime
                       How many seconds to run each test for.
       pin_node=server=<node>
                       Specify node to which the server is bound.
      The following options take a comma-separated list of each
      value to test.  The outer product of all specified tests
      is run.
       uperf-msg-size  Specify the message size(s) to be tested.
       uperf-test-type Type of test to run (currently stream or rr)
       uperf-protocol  Protocol (tcp or udp).
       uperf-nthr      Number of threads to be tested.
EOF
}

function document_uperf() {
    cat <<'EOF'
* uperf: a partial front end to uperf (https://www.uperf.org)
EOF
}

function process_options_uperf() {
    local opt
    local -a unknown_opts=()
    for opt in "$@" ; do
	read -r noptname1 noptname optvalue <<< "$(parse_option "$opt")"
	# shellcheck disable=SC2206
	# shellcheck disable=SC2034
	case "$noptname1" in
	    uperfmsgsize*) ___uperf_msg_sizes=(${optvalue//,/ })   ;;
	    uperftesttype*) ___uperf_test_types=(${optvalue//,/ }) ;;
	    uperfproto*) ___uperf_protos=(${optvalue//,/ })	   ;;
	    uperfnthr*) ___uperf_nthrs=(${optvalue//,/ })	   ;;
	    uperframp*) ___uperf_ramp_time=$optvalue		   ;;
	    *) unknown_opts+=("$noptname ($noptname1)")		   ;;
	esac
    done
    if [[ -n "${unknown_opts[*]:-}" ]] ; then
	help "${unknown_opts[@]}"
    fi
    if (( ___uperf_msg_sizes <= 0 )) ; then
	fatal "Message size must be positive, exiting!"
    fi
    if ((___uperf_ramp_time < 0)) ; then
	___uperf_ramp_time=0
    fi
    local -i msgsize
    local testtype
    local proto
    local -i nthr
    for testtype in "${___uperf_test_types[@]}" ; do
	for proto in "${___uperf_protos[@]}" ; do
	    for msgsize in "${___uperf_msg_sizes[@]}" ; do
		for nthr in "${___uperf_nthrs[@]}" ; do
		    ___uperf_tests+=("${testtype},${proto},${msgsize},${nthr}")
		done
	    done
	done
    done
}

function supports_reporting_uperf() {
    :
}

function generate_metadata_uperf() {
    local -a jobs=()
    local -i jobidx=1
    local -i msgsize
    local testtype
    local proto
    local -i nthr
    echo '"run_time": ' $((workload_run_time - (2 * ___uperf_ramp_time))) ,
    echo '"ramp_time": ' $___uperf_ramp_time ,
    echo '"jobs": {'
    for testtype in "${___uperf_test_types[@]}" ; do
	for proto in "${___uperf_protos[@]}" ; do
	    for msgsize in "${___uperf_msg_sizes[@]}" ; do
		for nthr in "${___uperf_nthrs[@]}" ; do
		    jobs+=("$(cat <<EOF
$(printf '"%04d-%s-%s-%dB-%di"' $((jobidx)) "$proto" "$testtype" $msgsize $nthr): {
  "test_type": "$testtype",
  "proto": "$proto",
  "msgsize": $msgsize,
  "nthr": $nthr
}
EOF
)")
		    jobidx=$((jobidx+1))
		done
	    done
	done
    done
    (IFS=$',\n'; echo "${jobs[*]}")
    echo '}'
}

function report_options_uperf() {
    cat <<EOF
"msg_size": $___msg_size
EOF
}

register_workload uperf dispatch_generic
