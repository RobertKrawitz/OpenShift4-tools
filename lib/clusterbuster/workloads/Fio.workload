#!/bin/bash

# Copyright 2019-2022 Robert Krawitz/Red Hat
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

################################################################
# FIO workload
################################################################

function _createContainersFioYAML() {
    local namespace=$1
    local instance=$2
    local secretCount=$3
    local -i containers=$4
    local -i processes=$5
    local log_host=${6:-}
    local -i log_port=${7:-0}
    local -i container
    local syncService=
    local syncPortNum=
    IFS=: read -r syncService syncPortNum <<< $(getSync)
    # shellcheck disable=2031
    local workdir=${common_workdir:-${emptydirs[0]:-/tmp}}
    for container in $(seq 0 $((containers - 1))) ; do
	cat <<EOF
- name: "c${container}"
  imagePullPolicy: $imagePullPolicy
  image: "$containerImage"
$(indent 2 containerResourcesYAML)
  env:
  - name: VERBOSE
    value: "$verbose"
$(indent 2 bootstrapCommandYAML fio.pl)
  - "$namespace"
  - "c${j}"
  - "$basetime"
  - "$baseoffset"
  - "$(ts)"
  - "$poddelay"
  - "$processes"
  - "$workdir"
  - "$xferTime"
  - "$exitAtEnd"
  - "$syncService"
  - "$syncPortNum"
  - "$log_host"
  - "$log_port"
  - "$configmapMountDir"
  - "${fio_generic_options[*]:-}"
$(indent 2 volumeMountsYAML "$namespace" "${instance}" "$secretCount")
EOF
    done
}

function _createFioDeployment() {
    local namespace=$1
    local instance=$2
    local secretCount=$3
    if [[ $deploymentType = pod ]] ; then
	createObject <<EOF
apiVersion: v1
kind: Pod
metadata:
  name: ${namespace}-fio-${instance}
$(indent 2 namespaceYAML "$namespace")
$(indent 2 privilegeYAML)
$(indent 2 nodeSelectorYAML)
  selector:
    matchLabels:
      app: ${namespace}-fio-${instance}
$(indent 2 standardLabelsYAML fio "$namespace" $instance 1)
$(createSpec _createContainersFioYAML "$@")
  restartPolicy: Never
EOF
    else
	createObject <<EOF
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${namespace}-fio-${instance}
$(indent 2 namespaceYAML "$namespace")
$(indent 2 privilegeYAML)
$(indent 2 standardLabelsYAML)
spec:
  replicas: 1
$(indent 2 nodeSelectorYAML)
  selector:
    matchLabels:
      app: ${namespace}-fio-${instance}
  strategy:
    type: RollingUpdate
  template:
    metadata:
$(indent 6 standardLabelsYAML fio "$namespace" $instance 1)
$(indent 4 createSpec _createContainersFioYAML "$@")
EOF
    fi
}

function createDeploymentFio() {
    local namespace=$1
    local count=${2:-1}
    local secretCount=${3:-1}
    local replicas=${4:-1}
    local containers=${5:-1}
    local log_host=${6:-}
    local -i log_port=${7:-0}
    local -i instance
    createSyncServiceIfNeeded "$namespace" 2 "$((containers * replicas * count))"
    for instance in $(seq $firstDeployment $((count + firstDeployment - 1))) ; do
	_createFioDeployment "$namespace" "${instance}" "$secretCount"  "$replicas" "$containers" "$log_host" "$log_port"
    done
}

function calculateLogsRequiredFio() {
    local -i namespaces=$1
    local -i depsPerNamespace=${2:-1}
    local -i replicas=${3:-1}
    local -i containers=${4:-1}
    echo $((namespaces * containers * processes_per_pod * replicas * depsPerNamespace))
}

function listConfigMapsFio() {
    cat <<EOF
${__libdir__}/fio.pl
${__libdir__}/sync.pl
EOF
}

register_workload Fio dispatch_generic
