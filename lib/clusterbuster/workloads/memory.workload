#!/bin/bash

# Copyright 2019-2022 Robert Krawitz/Red Hat
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

################################################################
# CPU soaker workload
################################################################

declare -ig ___memory_size=1048576

function _create_containers_memory_yaml() {
    local namespace=$1
    local instance=$2
    local secret_count=$3
    local -i processes=$4
    local -i containers_per_pod=$5
    local log_host=${6:-}
    local -i log_port=${7:-0}
    local -i container
    local sync_service=
    local sync_port_num=
    IFS=: read -r sync_service sync_port_num <<< $(get_sync)
    for container in $(seq 0 $((containers_per_pod - 1))) ; do
	cat <<EOF
- name: "c$container"
  imagePullPolicy: $image_pull_policy
  image: "$container_image"
$(indent 2 container_standard_auxiliary_yaml)
  env:
  - name: VERBOSE
    value: "$verbose"
$(indent 2 bootstrap_command_yaml memory.pl)
  - "$namespace"
  - "c$container"
  - "$basetime"
  - "$baseoffset"
  - "$(ts)"
  - "$exit_at_end"
  - "$sync_service"
  - "$sync_port_num"
  - "$log_host"
  - "$log_port"
  - "$processes"
  - "$___memory_size"
  - "$workload_run_time"
$(indent 2 volume_mounts_yaml "$namespace" "${instance}" "$secret_count")
EOF
    done
}

function _create_memory_deployment() {
    local namespace=$1
    local instance=$2
    if [[ $deployment_type = pod ]] ; then
	local -i replica=0
	while (( replica++ < replicas )) ; do
	    local name=${namespace}-memory-${instance}-${replica}
	    create_object -n "$namespace" "$name" <<EOF
apiVersion: v1
kind: Pod
metadata:
  name: $(mkpodname "$name")
$(indent 2 standard_all_metadata_yaml "$namespace" client)
  selector:
    matchLabels:
      app: ${namespace}-memory-${instance}
$(indent 2 standard_labels_yaml memory "$namespace" "$instance" 1)
$(create_spec _create_containers_memory_yaml "$@")
  restartPolicy: Never
EOF
	done
    else
	local name=${namespace}-memory-${instance}
	create_object -n "$namespace" "$name" <<EOF
apiVersion: apps/v1
kind: $deployment_type
metadata:
  name: $(mkpodname "$name")
$(indent 2 standard_deployment_metadata_yaml "$namespace" client)
spec:
  replicas: $replicas
  selector:
    matchLabels:
      app: ${namespace}-memory-${instance}
  strategy:
    type: RollingUpdate
  template:
    metadata:
$(indent 6 standard_labels_yaml memory "$namespace" "$instance" 1)
$(indent 6 standard_pod_metadata_yaml "$namespace" client)
$(indent 4 create_spec _create_containers_memory_yaml "$@")
EOF
    fi
}

function create_deployment_memory() {
    local namespace=$1
    local count=${2:-1}
    local secret_count=${3:-1}
    local replicas=${4:-1}
    local containers_per_pod=${5:-1}
    local log_host=${6:-}
    local -i log_port=${7:-0}
    local -i instance
    create_sync_service_if_needed "$namespace" 2 "$((containers_per_pod * replicas * processes_per_pod * count))"
    for instance in $(seq $first_deployment $((count + first_deployment - 1))) ; do
	_create_memory_deployment "$namespace" "$instance" "$secret_count"  "$((processes_per_pod))" "$containers_per_pod" "$log_host" "$log_port"
    done
}

function list_configmaps_memory() {
    cat <<EOF
${__podfile_dir__}/memory.pl
EOF
}

function calculate_logs_required_memory() {
    local -i namespaces=$1
    local -i deps_per_namespace=${2:-1}
    local -i replicas=${3:-1}
    local -i containers_per_pod=${4:-1}
    echo $((namespaces * processes_per_pod * containers_per_pod * replicas * deps_per_namespace))
}

function document_memory() {
    cat <<'EOF'
* memory: Allocate a block of memory
EOF
}

function process_options_memory() {
    local opt
    local -a unknown_opts=()
    local fioblksize=
    local fiopattern=
    for opt in "$@" ; do
	read -r noptname1 noptname optvalue <<< "$(parse_option "$opt")"
	case "$noptname1" in
	    memorysize)	   ___memory_size=$(parse_size "$optvalue") ;;
	    *) 		   unknown_opts+=("$noptname ($noptname1)") ;;
	esac
    done
    if [[ -n "${unknown_opts[*]:-}" ]] ; then
	help "${unknown_opts[@]}"
    fi
}

function workload_reporting_class_memory() {
    echo generic
}

function supports_reporting_memory() {
    :
}

register_workload memory dispatch_generic
