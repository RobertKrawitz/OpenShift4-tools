#!/bin/bash

# Copyright 2019-2022 Robert Krawitz/Red Hat
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

################################################################
# CPU soaker workload
################################################################

declare -g ___memory_size=1048576
declare -ig ___memory_stride=0
declare -g ___memory_iterations=1
declare -g ___memory_interval=0
declare -ig ___memory_scan=0
declare -ig ___memory_sync=1
declare -g ___memory_random_seed=

function memory_arglist() {
    local mountdir=$1; shift
    while [[ "$1" != '--' ]] ; do shift; done; shift
    mk_yaml_args "python3" "${mountdir}memory.py" "$@" "$processes_per_pod" \
		 "$___memory_size" "${workload_run_time},${workload_run_time_max}" \
		 "$___memory_scan" "$___memory_stride" "$___memory_iterations" \
		 "$___memory_interval" "$___memory_random_seed" "$___memory_sync"
}

function memory_create_deployment() {
    local namespace=$1
    local count=${2:-1}
    local secret_count=${3:-1}
    local replicas=${4:-1}
    local containers_per_pod=${5:-1}
    local -i instance
    create_sync_service "$namespace" "$((containers_per_pod * replicas * processes_per_pod * count))" \
				  "$((containers_per_pod * replicas * count))"
    for instance in $(seq "$first_deployment" $((count + first_deployment - 1))) ; do
	create_standard_deployment -a memory_arglist \
				   "$namespace" "$instance" "$secret_count" "$replicas" "$containers_per_pod"
    done
}

function memory_list_configmaps() {
    cat <<EOF
$(find_on_path pod_files "memory.py")
EOF
}

function memory_calculate_logs_required() {
    local -i namespaces=$1
    local -i deps_per_namespace=${2:-1}
    local -i replicas=${3:-1}
    local -i containers_per_pod=${4:-1}
    echo $((namespaces * processes_per_pod * containers_per_pod * replicas * deps_per_namespace))
}

function memory_document() {
    cat <<'EOF'
* memory: Allocate a block of memory and optionally scan it continuously
EOF
}

function memory_help_options() {
    cat <<'EOF'
    Memory Options:
       --memory-size=<size[,max_size]>
                        Amount of memory to allocate.  If two values
                        are provided, a random value between the two
                        is used for each iteration.
       --memory-scan=<0,1>
                        Write scan memory continuously
       --memory-stride=<size>
                        Stride the specified number of bytes
                        when scanning.  Default is system pagesize.
                        Set to 1 to scan every byte.
       --memory-iterations=<n[,max_iterations]>
                        Run the scan for the specified number of
                        iterations.
       --memory-interval=<seconds[,max_seconds]>
                        Sleep for the specified time between
                        iterations.
       --memory-random-seed=<seed>
                        Use the specified value in combination with
                        the pod ID to randomize the run.  The seed
                        may be an arbitrary string.
       --memory-sync-between-iterations=<0,1>
                        Sync between each iteration.  Default is yes.
                        Most useful to set this to no is when running
                        random workloads when it is desired there to be
                        overlap between operations.
EOF
}

function memory_process_options() {
    local opt
    local -a unknown_opts=()
    for opt in "$@" ; do
	read -r noptname1 noptname optvalue <<< "$(parse_option "$opt")"
	case "$noptname1" in
	    memorysize)	   ___memory_size=$(parse_size -d, "$optvalue")		;;
	    memoryscan)	   ___memory_scan=$(bool "$optvalue")			;;
	    memorystride*) ___memory_stride=$(parse_size -d, "$optvalue")	;;
	    memoryiter*)   ___memory_iterations=$(parse_size "$optvalue")	;;
	    memoryinter*)  ___memory_interval=$(parse_size -d, "$optvalue")	;;
	    memoryrandom*) ___memory_random_seed=$(base64 -w 0 <<< "$optvalue") ;;
	    memorysync*)   ___memory_sync=$(bool "$optvalue")			;;
	    *) 		   unknown_opts+=("$noptname ($noptname1)")		;;
	esac
    done
    if [[ -n "${unknown_opts[*]:-}" ]] ; then
	warn "Notice: the following options are not known: ${unknown_opts[*]}"
    fi
}

function memory_workload_reporting_class() {
    echo generic
}

function memory_supports_reporting() {
    :
}

function memory_report_options() {
    function mk_num_list() {
	if [[ $1 = *','* ]] ; then
	    echo "[${1%,*}, ${1#*,}]"
	else
	    echo "[$1, $1]"
	fi
    }
	
    cat <<EOF
"memory_size": $(mk_num_list "$___memory_size"),
"memory_stride": $___memory_stride,
"memory_iterations": $___memory_iterations,
"memory_interval": $(mk_num_list "$___memory_interval"),
"memory_scan": $___memory_scan,
"memory_iteration_time": [$workload_run_time, $workload_run_time_max],
"memory_random_seed": "$___memory_random_seed",
"memory_sync_between_iterations": "$___memory_sync"
EOF
}

register_workload memory
