#!/bin/bash

# Copyright 2019-2022 Robert Krawitz/Red Hat
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

################################################################
# CPU soaker workload
################################################################

declare -g ___memory_size=1048576
declare -ig ___memory_stride=0
declare -g ___memory_iterations=1
declare -g ___memory_idle=0
declare -ig ___memory_scan=0
declare -ig ___memory_sync=1
declare -g ___memory_random_seed=
declare -g ___memory_iteration_runtime=10
declare -ig ___memory_idle_first=2
declare -ig ___memory_subproc=0
declare -g ___memory_start_probability=

function memory_arglist() {
    local mountdir=$1; shift
    while [[ "$1" != '--' ]] ; do shift; done; shift
    mk_yaml_args "python3" "${mountdir}memory.py" "$@" "$processes_per_pod" \
		 "${workload_run_time}" "$___memory_size" "$___memory_scan" \
		 "$___memory_stride" "$___memory_iterations" \
		 "$___memory_idle" "$___memory_random_seed" "$___memory_sync" \
		 "$___memory_iteration_runtime" "$___memory_idle_first" \
		 "$___memory_subproc" "$___memory_start_probability"
}

function memory_document() {
    cat <<'EOF'
* memory: Allocate a block of memory and optionally scan it continuously
EOF
}

function memory_help_options() {
    cat <<'EOF'
    Memory Options:
       --memory-size=<size[,max_size][,step]>
                        Amount of memory to allocate.  If two values
                        are provided, a random value between the two
                        is used for each iteration.  Step allows specifying
                        the step size.
       --memory-scan=<0,1>
                        Write scan memory continuously
       --memory-stride=<size>
                        Stride the specified number of bytes
                        when scanning.  Default is system pagesize.
                        Set to 1 to scan every byte.
       --memory-iteration-runtime=<seconds[,max_seconds][,step]>
                        The time for each iteration of the test.
                        Default is not set, in which case the
                        --workload-runtime and --memory-iterations
                        control how long the test is run.  This may not
                        be used if --memory-sync-between-iterations is set.
       --memory-iterations=<n>
                        Run the scan for the specified number of
                        iterations.  Default is 1.
       --memory-idle=<seconds[,max_seconds][,step]>
                        Sleep for the specified time between
                        iterations.
       --memory-idle-first=<0,1,2>
                        Sleep first before starting operations.
                        Value of 2 means to randomly sleep or not
                        for the first operation.  Default $memory_idle_first.
       --memory-random-seed=<seed>
                        Use the specified value in combination with
                        the pod ID to randomize the run.  The seed
                        may be an arbitrary string.
       --memory-sync-between-iterations=<0,1>
                        Sync between each iteration.  Default is yes.
                        Most useful to set this to no is when running
                        random workloads when it is desired there to be
                        overlap between operations.
       --memory-start-probability=<"" | 0.000 - 1.000>
                        Probability of memory allocation starting with
                        memory allocation as opposed to sleeping.
                        If empty, probability is calculated based on
                        average duty cycle computed as the average
                        iteration runtime divided by the sum of the
                        average iteration runtime and the average idle
                        runtime.
       --memory-subproc=<0,1>
                        Run iterations as subprocesses rather than function
                        calls, to be certain that memory is released.
EOF
}

function memory_process_options() {
    local opt
    local -a unknown_opts=()
    for opt in "$@" ; do
	read -r noptname1 noptname optvalue <<< "$(parse_option "$opt")"
	case "$noptname1" in
	    memorysize)		 ___memory_size=$(parse_size -d, "$optvalue")		  ;;
	    memoryscan)		 ___memory_scan=$(bool "$optvalue")			  ;;
	    memorystride*)	 ___memory_stride=$(parse_size "$optvalue")		  ;;
	    memoryiterations)    ___memory_iterations=$(parse_size "$optvalue")		  ;;
	    memoryiterationrun*) ___memory_iteration_runtime=$(parse_size -d, "$optvalue");;
	    memoryidle*)	 ___memory_idle=$(parse_size -d, "$optvalue")		  ;;
	    memoryrandom*)	 ___memory_random_seed=$(base64 -w 0 <<< "$optvalue")	  ;;
	    memorysync*)	 ___memory_sync=$(bool "$optvalue")			  ;;
	    memorysubproc*)	 ___memory_subproc=$(bool "$optvalue")			  ;;
	    memorystartprob*)	 ___memory_start_probability="$optvalue"		  ;;
	    *)			 unknown_opts+=("$noptname ($noptname1)")		  ;;
	esac
    done
    if [[ -n "${unknown_opts[*]:-}" ]] ; then
	warn "Notice: the following options are not known: ${unknown_opts[*]}"
    fi
}

function memory_report_options() {
    function mk_num_list() {
	if [[ $1 = *','* ]] ; then
	    echo "[${1%,*}, ${1#*,}]"
	else
	    echo "[$1, $1]"
	fi
    }
	
    cat <<EOF
"memory_size": $(mk_num_list "$___memory_size"),
"memory_scan": $___memory_scan,
"memory_stride": $___memory_stride,
"memory_iterations": $___memory_iterations,
"memory_iteration_time": $(mk_num_list "$___memory_iteration_runtime"),
"memory_idle": $(mk_num_list "$___memory_idle"),
"memory_random_seed": "$___memory_random_seed",
"memory_sync_between_iterations": "$___memory_sync",
"memory_subproc": $___memory_subproc,
"memory_start_probability": $(if [[ -n "$___memory_start_probability" ]] ; then printf '%f' "$___memory_start_probability" ; else echo -1; fi)
EOF
}

register_workload memory
