#!/bin/bash

exec 1>&2

trap exit TERM INT

set -u

#ln -s /opt/pbench-agent /var/lib

PATH=/usr/local/bin::$PATH

declare -a local_ports=()
declare sshd_listen_port=${BAK_SSH_PORT:-22}
declare passive=0
declare tool_script=
declare -a ssh_authorized_key_file=()
declare expected_agents=
declare -i worker_sync_count=2
declare configdir # Secret containing pbench config and public and private key
# This probably isn't the ideal config name.
# shellcheck disable=2155
declare configname="$(whoami)_$(hostname)_$(printf '%(%F%H-%M-%S)T' -1 )"
declare ssh_ext_port
declare -i worker_sync_port=0
declare expected_clients=
declare -i agent_sync_port=${BAK_AGENT_SYNC_PORT:-0}
declare keyfile=${BAK_USER_PRIVATE_KEY:-$HOME/.ssh/id_rsa}
declare verbose=
declare -i log_environment=0
declare -i waitforever=0
declare -i max_wait_for_ssh_tunnel=60
declare -i dont_start_sshd=0
declare -i use_ip_for_controller_addr=0
declare -i tunnel_port_start=18000
declare username=${LOGNAME:-$(id -un)}
declare controller_hostname=
declare -A host_aliases=()

function usage() {
    if [[ -n "$*" ]] ; then
	(IFS=$'\n'; echo "$*" 1>&2)
    fi
    cat 1>&2 <<EOF
Usage: $0 [options] [command args...]
       -a hostname=alias[,alias...]
                              Create alias hostnames in the ssh config.
       -A expected_agents     Number of expected agents.  Default $expected_agents.
       -C worker_sync_count   Number of times worker benchmark is expected
       	  		      to sync with the controller.  Should be at
			      least 2 (start and end of run).  Only applies
			      if a user benchmark is being run.
			      Default $worker_sync_count.
       -c expected_clients    Number of workers that will sync.
       -D configdir           Directory containing pbench configuration
                              and public and private key for communication
			      with pbench server.
			      Any files named [nn]-[name] will be sourced in
			      order of name immediately following 
			      pbench-agent.sh.
                              NO DEFAULT.
       -e                     Log the environment.
       -H hostname            Use the specified hostname for saving results.
       -I                     Use the IP address internally as the controller
                              hostname.  Only applies if tool-meister is in use.
                              IP address is looked up rather than assumed from
                              ip addr.
       -K authorized_keyfile  File(s) containing authorized keys that will be
       	  		      allowed to connect to us.  May be repeated.
                              Default is the public keyfile (-k).
       -k keyfile             Public and private key files used to communicate
       	  		      with the agents.
       -L sshd_listen_port    Port on which sshd should listen.  If not
       	  		      specified, controller will connect to the agents.
			      NO DEFAULT.
       -N configuration_name  Configuration name for pbench logging.
                              Default to <whoami><hostname><timestamp>.
       -p                     Don't attempt to start a separate sshd.
       -P external_ssh_port   Port that agents should attempt to connect on,
       	  		      if different from -L.
       -S worker_sync_port    Port on which benchmark workers should sync.
       	  		      NO DEFAULT.
       -s agent_sync_port     Port on which agents should sync.  NO DEFAULT.
       -T tunnel_port_start   Start ssh tunnel ports at the specified number.
       	  		      Default $tunnel_port_start.
       -t tool_script         Script to execute pbench-register-tool and
       	  		      pbench-register-tool-set commands.  This script
			      will be sourced in an envronment that wraps
                              pbench-register-tool* commands.  These commands
			      should not include --remote options.
       -u username            Username for storing results
       -v                     Increase verbosity.  May be repeated.
       -W max_wait_time       Maximum time to wait for remote ssh
                              tunnels to come up.  Default $max_wait_for_ssh_tunnel.
                              -1 means wait forever.
       -w                     Do not exit when run is complete.
EOF
    exit 1
}

function warn() {
    echo "WARNING: $*" 1>&2
}

export BENCH_ARMY_KNIFE_ROLE=controller
set +u				# Until the script is fixed.
# shellcheck disable=1091
. /etc/profile.d/pbench-agent.sh
set -u

function add_host_alias() {
    local host
    local aliases
    host=${1%%=*}
    aliases=${1#*=}
    host_aliases[$host]=$aliases
}

while getopts "A:a:C:c:D:eH:Ik:K:L:N:P:pS:s:T:t:u:vW:w" arg ; do
    case "$arg" in
	A) expected_agents="$OPTARG"             ;;
	a) add_host_alias "$OPTARG"		 ;;
	C) worker_sync_count="$OPTARG"           ;;
	c) expected_clients="$OPTARG"            ;;
	D) configdir="$OPTARG"                   ;;
	e) log_environment=1	                 ;;
	H) controller_hostname="$OPTARG"	 ;;
	I) use_ip_for_controller_addr=1		 ;;
	K) ssh_authorized_key_file+=("$OPTARG")  ;;
	k) keyfile="$OPTARG"                     ;;
	L) sshd_listen_port="$OPTARG"; passive=1 ;;
	N) configname="$OPTARG"                  ;;
	P) ssh_ext_port="$OPTARG"	         ;;
	p) dont_start_sshd=1; passive=1	         ;;
	S) worker_sync_port="$OPTARG"            ;;
	s) agent_sync_port="$OPTARG"             ;;
	T) tunnel_port_start="$OPTARG"		 ;;
	t) tool_script="$OPTARG"	         ;;
	u) username="$OPTARG"			 ;;
	v) verbose+=" -v"                        ;;
	W) max_wait_for_ssh_tunnel=$OPTARG       ;;
	w) waitforever=1                         ;;
	*)                           	         ;;
    esac
done

shift $((OPTIND-1))

function supports_pbench_move_results_controller() {
    if [[ ! -r /opt/pbench-agent/VERSION ]] ; then
	return 1
    fi
    local -a v
    IFS=. read -r -a v < /opt/pbench-agent/VERSION
    if (( ${v[0]:-0} > 0 ||
	      ${v[1]:-0} > 70 ||
	      (${v[1]:-0} == 70 && ${v[2]:-0} >= 1) )) ; then
	return 0
    else
	return 1
    fi
}

if ! supports_pbench_move_results_controller ; then
    echo "Using pre-toolmeister strategy" 1>&2
    if [[ -n "$controller_hostname" ]] ; then
	export full_hostname=$controller_hostname
    fi
else
    echo "Using toolmeister strategy" 1>&2
    if (( use_ip_for_controller_addr )) ; then
	# shellcheck disable=2155
	export _pbench_full_hostname=$(host "$(hostname)" |awk '{print $NF}' | head -1)
	export PBENCH_TM_BIND_HOSTNAME=$_pbench_full_hostname
	sed -i -e 's,bind {hostnames},protected-mode no,' /opt/pbench-agent/util-scripts/pbench-tool-meister-start
	echo "Setting controller to $_pbench_full_hostname" 1>&2
    fi
fi

declare -a command=("$@")

function valid_port() {
    local port="$1"
    [[ -n "$port" && $port -ge 1 && $port -le 65535 ]]
}

[[ -n "${sshd_listen_port:-}" ]] && passive=1
if [[ -z "$expected_agents" && $(type -t oc) = file ]] ; then
    expected_agents=$(oc get pods -n pbench -l pbench-agent --no-headers |wc -l)
fi
if [[ -z "${BAK_SERVER_CONFIG:-}" || -z "${BAK_SERVER_PRIVATE_KEY:-}" ]] ; then
    [[ -z "${configdir:-}" ]] && usage "-D must be specified."
    [[ -d "$configdir" ]] || usage "-D $configdir does not exist."
    if [[ ! -r "$configdir/pbench-agent.cfg" ]] ; then
	if [[ -n "${BAK_INSDIR}" || ! -r /opt/pbench-agent/config/pbench-agent.cfg ]] ; then
	    usage "Expected configuration file $configdir/pbench-agent.cfg does not exist"
	else
	    warn "No configuration file $configdir/pbench-agent.cfg provided; using existing default."
	fi
    fi
    [[ -r "$configdir"/id_rsa ]] || usage "Expected private key $configdir/pbench-agent.cfg does not exist"
fi
[[ $keyfile == '/'* ]] || keyfile="$configdir/$keyfile"
[[ -r "$keyfile" ]] || usage "Private key file $keyfile does not exist."
[[ -r "${keyfile}.pub" ]] || usage "Public key file ${keyfile}.pub does not exist."
ssh_ext_port=${ssh_ext_port:-$sshd_listen_port}
valid_port "$sshd_listen_port" || usage "Invalid -L sshd listen port $sshd_listen_port"
valid_port "$ssh_ext_port" || usage "Invalid -P ssh port $ssh_ext_port"
if [[ -z "$*" ]] && ! valid_port "$worker_sync_port" ; then
    usage "Invalid -S worker sync port $worker_sync_port"
fi
[[ -z "${KUBECONFIG:-}" && -r "$configdir/kubeconfig" ]] && export KUBECONFIG="$configdir/kubeconfig"

valid_port "$agent_sync_port" || usage "Invalid -s agent sync port $agent_sync_port"

declare sshd_pid=

if [[ ! -f /opt/pbench-agent/id_rsa ]] ; then
    declare server_key=${BAK_SERVER_PRIVATE_KEY:-$configdir/id_rsa}
    (umask 077 && cp "$server_key" /opt/pbench-agent/id_rsa && chown pbench:pbench /opt/pbench-agent/id_rsa)
fi

declare server_config=${BAK_SERVER_CONFIG:-$configdir/pbench-agent.cfg}
if [[ -r "$server_config" ]] ; then
    (umask 0333 && cp "$server_config" /opt/pbench-agent/config/pbench-agent.cfg && chown pbench:pbench /opt/pbench-agent/config/pbench-agent.cfg)
fi

set +u
for f in "$configdir/"* ; do
    if [[ $f =~ /[0-4][[:digit:]]-[^/]* ]] ; then
	echo "Sourcing $f" 1>&2
	# shellcheck disable=1090
	. "$f"
    else
	echo "Not sourcing $f" 1>&2
    fi
done
set -u

if (( log_environment )) ; then
    echo "Environment:" 1>&2
    env | sort 1>&2
fi

declare -a agents=()
declare -a port_data=()
# ssh_tmpdir needs to be in the home directory because /tmp is mode 777
# and sshd will refuse to accept authorized keys located inside it even
# if subdirectories are correctly protected.
# shellcheck disable=2155
declare ssh_tmpdir=$(mktemp -d -p "$HOME" -t --suffix=.pbench_ssh)
trap 'rm -rf "$ssh_tmpdir"; exit' INT TERM EXIT

function setup_authorized_keys() {
    local authorized_keys_file=$1
    local key
    local key_data;
    shift
    for key in "$@" ; do
	if [[ -f "$key" ]] ; then
	    key_data="$(head -1 "$key")"
	elif [[ -f "$configdir/$key" ]] ; then
	    key_data="$(head -1 "$configdir/$key")"
	fi
	if [[ ! -f "$authorized_keys_file" ]] ; then
	    (umask 77; touch "$authorized_keys_file")
	fi
	if ! grep -x -q "$key_data" "$authorized_keys_file" ; then
	    echo "$key_data" >> "$authorized_keys_file"
	fi
    done
}

function setup_ssh() {
    local setup_server=${1:-}
    local key
    if [[ -z "$ssh_tmpdir" || ! -d "$ssh_tmpdir" ]] ; then
	echo "Unable to create temporary ssh directory!" 1>&2
	return 1
    fi

    trap 'rm -rf "$ssh_tmpdir"; exit' INT TERM

    if [[ -n "$setup_server" ]] ; then
	mkdir -p "$ssh_tmpdir/etc/ssh"
	setup_authorized_keys "$ssh_tmpdir/etc/ssh/authorized_keys" "${ssh_authorized_key_file[@]}"
	if (( ! dont_start_sshd )) ; then
	    /sbin/sshd -D -o AuthorizedKeysFile="$ssh_tmpdir/etc/ssh/authorized_keys" -p "$sshd_listen_port" 1>&2 &
	    sshd_pid=$!
	    echo "$sshd_pid"
	    trap 'kill -9 "$sshd_pid"; rm -rf "$ssh_tmpdir"; exit' INT TERM
	else
	    trap 'rm -rf "$ssh_tmpdir"; exit' INT TERM
	fi
    else
	setup_authorized_keys "$HOME/.ssh/authorized_keys" "${ssh_authorized_key_file[@]}"
    fi
}

function ping_agents() {
    local -A agents_remaining=()
    local agent
    local -i i=0
    for agent in "$@" ; do
	agents_remaining[$agent]=1
    done
    echo "Looking for remaining agents" 1>&2
    # shellcheck disable=2155
    local start_time=$(printf '%(%s)T' -1)
    while [[ -n "${agents_remaining[*]}" ]] ; do
	echo "Pass $((i++)): ${#agents_remaining[@]} left" 1>&2
	local -a agents_found=()
	for agent in "${!agents_remaining[@]}" ; do
	    echo -n "$agent: " 1>&2
	    if ssh -o PasswordAuthentication=no -n "root@$agent" true ; then
		echo -n "OK!" 1>&2
		agents_found+=("$agent")
	    fi
	    echo 1>&2
	done
	for agent in "${agents_found[@]}" ; do
	    unset "agents_remaining[$agent]"
	done
	if (( ${#agents_remaining[@]} )) ; then
	    # shellcheck disable=2155
	    local now=$(printf '%(%s)T' -1)
	    if (( max_wait_for_ssh_tunnel > 0 && now - start_time >= max_wait_for_ssh_tunnel )) ; then
		echo "Timed out!" 1>&2
		return 1
	    fi
	    sleep 1
	fi
    done
    return 0
}

# shellcheck disable=2120
function pbench-register-tool-set() {
    echo "$(type -P pbench-register-tool-set) --remote=$(IFS=,; echo "${agents[*]}") $*"
    "$(type -P pbench-register-tool-set)" --remote="$(IFS=,; echo "${agents[*]}")" "$@"
}

# shellcheck disable=2120
function pbench-register-tool() {
    echo "$(type -P pbench-register-tool) --remote=$(IFS=,; echo "${agents[*]}") $*"
    "$(type -P pbench-register-tool)" --remote="$(IFS=,; echo "${agents[*]}")" "$@"
}

if (( passive )) ; then
    for f in ssh scp sftp ; do
	cat > "$ssh_tmpdir/$f" <<EOF
#!/bin/sh
"$(type -p $f)" $verbose -F "$ssh_tmpdir/ssh_config" "\$@"
EOF
	chmod +x "$ssh_tmpdir/$f"
    done
    [[ -f /etc/ssh/ssh_config ]] && cat /etc/ssh/ssh_config > "$ssh_tmpdir/ssh_config"
    [[ -f "$HOME/.ssh/config" ]] && cat "$HOME/.ssh/config" >> "$ssh_tmpdir/ssh_config"

    readarray -t local_ports < <(find-free-ports -n "$expected_agents" -p 18000)
    for port in "${local_ports[@]}" ; do
	port_data+=("PASV $ssh_ext_port $port $(whoami)")
    done
    sshd_pid=$(setup_ssh true)
    [[ -n "$sshd_pid" ]] && trap 'kill -9 "$sshd_pid"; rm -rf "$ssh_tmpdir"; exit' INT TERM EXIT
    i=0
    while read -r addr1 remote_port key addr agent ; do
	[[ -n "$agent" ]] || continue
	agents+=("$agent")
	for agent_name in "$agent" ${host_aliases[$agent]:+${host_aliases[$agent]}} ; do
	    cat >> "$ssh_tmpdir/ssh_config" <<EOF
Host $agent_name
HostName localhost
StrictHostKeyChecking no
UserKnownHostsFile /dev/null
Port ${local_ports[$i]}
LogLevel ERROR

EOF
	done
	i=$((i+1))
    done < <(sync.pl -v "$agent_sync_port" "$expected_agents" 1 "${port_data[@]}")
    PATH="$ssh_tmpdir${PATH:+:$PATH}"
    # Wait until clients have their tunnels up
    echo "Pinging agents..."
    if ! ping_agents "${agents[@]}" ; then
	echo "Wait for agents to come up failed!" 1>&2
	sleep infinity
	exit 1
    fi
else
    setup_ssh
    # shellcheck disable=2034
    while read -r addr1 remote_port key agent addr ; do
	[[ -n "$agent" ]] || continue
	agents+=("$agent")
	echo "Agent $agent" 1>&2
	for agent_name in "$agent" ${host_aliases[$agent]:+${host_aliases[$agent]}} ; do
	    cat >> "$ssh_tmpdir/ssh_config" <<EOF
Host $agent_name
StrictHostKeyChecking no
UserKnownHostsFile /dev/null
Port $remote_port
LogLevel ERROR

EOF
	done
    done < <(sync.pl -v "$agent_sync_port" "$expected_agents" 1)
fi

if [[ -z "${tool_script:-}" ]] ; then
    # shellcheck disable=2119
    pbench-register-tool-set
else
    if [[ -r "$tool_script" ]] ; then
	# shellcheck disable=1090
	. "$tool_script"
    elif [[ -n "${configdir:-}" && -r "$configdir/$tool_script" ]] ; then
	# shellcheck disable=1090
	. "$configdir/$tool_script"
    else
	echo "Can't find or execute tool script $tool_script" 1>&2
	exit 1
    fi
fi

echo "Waiting for benchmark to complete" 1>&2
if [[ -n "$*" ]] ; then
    "$@"
else
    command=("sync.pl" "$worker_sync_port" "$expected_clients" "$worker_sync_count")
    /opt/pbench-agent/bench-scripts/pbench-user-benchmark --config="$configname" -- "${command[@]}"
fi
echo "Moving results" 1>&2
declare controller_arg=
if supports_pbench_move_results_controller ; then
    if [[ -n "$controller_hostname" ]] ; then
	controller_arg="--controller=$controller_hostname"
    fi
fi
pbench-move-results --user="$username" ${controller_arg:+$controller_arg}
declare -i move_status=$?
echo "Final sync" 1>&2
sync.pl "$agent_sync_port" "$expected_agents" 1
if (( move_status )) ; then
    echo "*** Failed!"
else
    echo "*** Complete!"
fi
(( waitforever )) && sleep infinity
exit $move_status
